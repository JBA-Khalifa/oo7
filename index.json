[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "packages/.external-ecmascript.js",
    "static": true,
    "longname": "packages/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "packages/oo7/index.js",
    "content": "// (C) Copyright 2016-2017 Parity Technologies (UK) Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//         http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nconst oo7 = require('./lib');\n\nmodule.exports = oo7;\n",
    "static": true,
    "longname": "/home/tomusdrw/workspace/oo7-new/packages/oo7/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "file",
    "name": "packages/oo7/lib/bond.js",
    "content": "// (C) Copyright 2016-2017 Parity Technologies (UK) Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//         http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nconst BondCache = require('./bondCache');\n\nvar subscripted = {};\n// Any names which should never be subscripted.\nconst reservedNames = { toJSON: true, toString: true };\n\nfunction symbolValues (o) {\n\treturn Object.getOwnPropertySymbols(o).map(k => o[k]);\n}\n\nfunction equivalent (a, b) {\n\treturn JSON.stringify(a) === JSON.stringify(b);\n}\n\n/**\n * An object which tracks a single, potentially variable, value.\n * {@link Bond}s may be updated to new values with {@link Bond#changed} and reset to an indeterminate\n * (\"not ready\") value with {@link Bond#reset}.\n *\n * {@link Bond}s track their dependents - aspects of the program, including other {@link Bond}s,\n * which reference their current value. Dependents may be added with {@link Bond#use} and\n * removed with {@link Bond#drop}.\n *\n * A {@link Bond} may be tied to a particular function to ensure it is called whenever\n * the value changes. This implies a dependency, and can be registered with {@link Bond#tie} and\n * dropped with {@link Bond#untie}. A function may also be called should the {@link Bond} be reverted\n * to an undefined value; in this case {@link Bond#notify} and {@link Bond#unnotify} should\n * be used.\n *\n * {@link Bond}s can be made to execute a function once their value becomes ready\n * using {@link Bond#then}, which in some sense replicates the same function in the\n * context of a `Promise`. The similar function {@link Bond#done} is also supplied which\n * executes a given function when the {@link Bond} reaches a value which is considered\n * \"final\", determined by {@link Bond#isDone} being implemented and `true`. Precisely\n * what any given {@link Bond} considers final depends entirely on the subclass of\n * {@link Bond}; for the {@link Bond} class itself, `isDone` always returns `false` and thus\n * {@link Bond#done} is unusable. The value of the {@link Bond}, once _ready_, may\n * be logged to the console with the {@link Bond#log} function.\n *\n * A {@link Bond} can provide a derivative {@link Bond} whose value reflects the \"readiness\"\n * of the original, using {@link Bond#ready} and conversely {@link Bond#notReady}. This\n * can also be queried normally with {@link Bond#isReady}.\n *\n * One or a number of {@link Bond}s can be converted into a single {Promise} with the\n * {@link Bond#promise} function.\n *\n * `Bonds` can be composed. {@link Bond#map} creates a new {@link Bond} whose value is a\n * transformation. {@link Bond.all} creates a new {@link Bond} which evaluates to the array\n * of values of each of a number of dependent {@link Bond}s. {@link Bond.mapAll} combines\n * both. {@link Bond#reduce} allows a {@link Bond} that evaluates to array to be\n * transformed into some other value recursively.\n *\n * {@link Bond#sub} forms a derivative {@link Bond} as the subscript (square-bracket\n * indexing). {@link Bond#subscriptable} may be used to return a `Proxy` object that\n * allows the {@link Bond} to be subscripted (square-bracket indexed) directly without\n * need of the {@link Bond#sub} function.\n *\n * {@link Bond} is built to be subclassed. When subclassing, three functions are\n * useful to implement. {@link Bond#isDone} may be implemented\n * in order to make {@link Bond#done} be useful. {@link Bond#initialise} is called exactly once\n * when there becomes at least one dependent; {@link Bond#finalise} is called when there\n * are no longer any dependents.\n *\n * _WARNING_: You should not attempt to use the `toString` function with this\n * class. It cannot be meaningfully converted into a string, and to attempt it\n * will give an undefined result.\n */\nclass Bond {\n\t/**\n\t * Constructs a new {@link Bond} object whose value is _not ready_.\n\t *\n\t * @param {boolean} mayBeNull - `true` if this instance's value may ever\n\t * validly be `null`. If `false`, then setting this object's value to `null`\n\t * is equivalent to reseting back to being _not ready_.\n\t */\n\tconstructor (mayBeNull = true, cache = null) {\n\t\t// Functions that should execute whenever we resolve to a new, \"ready\"\n\t\t// value. They are passed the new value as a single parameter.\n\t\t// Each function is mapped to from a `Symbol`, which can be used to\n\t\t// remove it.\n\t\tthis._subscribers = {};\n\t\t// Equivalent to `_subscribers`, except that after executing, the\n\t\t// function is removed from this array. No mapping is provided so they\n\t\t// cannot be removed except by triggering.\n\t\tthis._thens = [];\n\t\t// Functions that should execute whenever either the resolved value\n\t\t// changes, or our readiness changes. No parameters are passed.\n\t\t// Each function is mapped to from a `Symbol`, which can be used to\n\t\t// remove it.\n\t\tthis._notifies = {};\n\n\t\t// Are we resolved to a value at all. If `false`, we are not yet\n\t\t// resolved to a value and `_value` is meaningless.\n\t\tthis._ready = false;\n\t\t// Our currently resolved value, if any.\n\t\tthis._value = null;\n\t\t// Is the value in the middle of having an update triggered?\n\t\tthis._triggering = null;\n\n\t\t// Is it valid to resolve to `null`? By default it is value.\n\t\tthis._mayBeNull = mayBeNull;\n\n\t\t// The reference count of the number of dependents. If zero, then there\n\t\t// is no need to go to any effort to track changes. This is used for\n\t\t// specialisations where tracking changes requires holding or managing\n\t\t// resources.\n\t\t// This is never smaller but can be larger than the total number of\n\t\t// callbacks registered between `_subscribers`, `_thens` and\n\t\t// `_notifies`.\n\t\tthis._users = 0;\n\n\t\t// The Universally Unique ID, a string used to manage caching and\n\t\t// inter-tab result sharing.\n\t\tthis._uuid = cache ? cache.id : null;\n\t\t// A method for stringifying this Bond's result when using with the cache.\n\t\tthis._stringify = cache ? cache.stringify : null;\n\t\t// A method for unstringifying this Bond's result when using with the cache.\n\t\tthis._parse = cache ? cache.parse : null;\n\t}\n\n\ttoString () {\n\t\t// Bonds make little sense as strings, and our subscripting trick (where\n\t\t// we are able to use Bonds as keys) only works if we can coerce into a\n\t\t// string. We store the reverse lookup (symbol -> Bond) in a global\n\t\t// table `subscripted` so that it can be retrieved while interpreting\n\t\t// the subscript in the code Proxy code found in `subscriptable`.\n\t\tlet s = Symbol('Bond');\n\t\tsubscripted[s] = this;\n\t\treturn s;\n\t}\n\n\t/**\n\t * Provides a transparently subscriptable version of this object.\n\t *\n\t * The object that is returned from this function is a convenience `Proxy`\n\t * which acts exactly equivalent\n\t * to the original {@link Bond}, except that any subscripting of fields that are\n\t * not members of the {@link Bond} object will create a new {@link Bond} that\n\t * itself evaluates to this {@link Bond}'s value when subscripted with the same\n\t * field.\n\t *\n\t * @example\n\t * let x = (new Bond).subscriptable();\n\t * let y = x.foo;\n\t * y.log(); // nothing yet\n\t * x.changed({foo: 42, bar: 69});\t// logs 42\n\t *\n\t * @param {number} depth - The maximum number of levels of subscripting that\n\t * the returned `Proxy` will support.\n\t * @returns {Proxy} - `Proxy` object that acts as a subscriptable variation\n\t * for convenience.\n\t */\n\tsubscriptable (depth = 1) {\n\t\t// No subscripting at all if depth is 0.\n\t\t// We will recurse if > 1.\n\t\tif (depth === 0) { return this; }\n\n\t\tlet r = new Proxy(this, {\n\t\t\t// We proxy the get object field:\n\t\t\tget (receiver, name) {\n\t\t\t\t// Skip the magic proxy and just interpret directly if the field\n\t\t\t\t// name is a string/number and it's either an extent key in the\n\t\t\t\t// underlying `Bond` or it's a reserved field name (e.g. toString).\n\t\t\t\tif (\n\t\t\t\t\t(typeof (name) === 'string' || typeof (name) === 'number')\t\t\t\t&&\n\t\t\t\t\t(reservedNames[name] || typeof (receiver[name]) !== 'undefined')\n\t\t\t\t) {\n\t\t\t\t\treturn receiver[name];\n\t\t\t\t}\n\n\t\t\t\t// If it's a symbolic key, then it's probably a `Bond` symbolified\n\t\t\t\t// in our toString function. Look it up in the global Bond symbol\n\t\t\t\t// table and recurse into one less depth.\n\t\t\t\tif (typeof (name) === 'symbol') {\n\t\t\t\t\tif (Bond._knowSymbol(name)) {\n\t\t\t\t\t\treturn receiver\n\t\t\t\t\t\t\t.sub(Bond._fromSymbol(name))\n\t\t\t\t\t\t\t.subscriptable(depth - 1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t//\t\t\t\t\t\tconsole.warn(`Unknown symbol given`);\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// console.log(`Subscripting: ${JSON.stringify(name)}`)\n\t\t\t\t// Otherwise fall back with a simple subscript and recurse\n\t\t\t\t// back with one less depth.\n\t\t\t\treturn receiver.sub(name).subscriptable(depth - 1);\n\t\t\t}\n\t\t});\n\t\treturn r;\n\t}\n\n\t// Check to see if there's a symbolic reference for a Bond.\n\tstatic _knowSymbol (name) {\n\t\treturn !!subscripted[name];\n\t}\n\t// Lookup a symbolic Bond reference and remove it from the global table.\n\tstatic _fromSymbol (name) {\n\t\tlet sub = subscripted[name];\n\t\tdelete subscripted[name];\n\t\treturn sub;\n\t}\n\n\t/**\n\t * Alters this object so that it is always _ready_.\n\t *\n\t * If this object is ever {@link Bond#reset}, then it will be changed to the\n\t * value given.\n\t *\n\t * @example\n\t * let x = (new Bond).defaultTo(42);\n\t * x.log();\t// 42\n\t * x.changed(69);\n\t * x.log();\t// 69\n\t * x.reset();\n\t * x.log() // 42\n\t *\n\t * @param {*} x - The value that this object represents if it would otherwise\n\t * be _not ready_.\n\t * @returns {@link Bond} - This (mutated) object.\n\t */\n\tdefaultTo (_defaultValue) {\n\t\tthis._defaultTo = _defaultValue;\n\t\tif (!this._ready) {\n\t\t\tthis.trigger(_defaultValue);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Resets the state of this Bond into being _not ready_.\n\t *\n\t * Any functions that are registered for _notification_ (see {@link Bond#notify})\n\t * will be called if this {@link Bond} is currently _ready_.\n\t */\n\treset () {\n\t\tif (this._defaultTo !== undefined) {\n\t\t\tthis.trigger(this._defaultTo);\n\t\t\treturn;\n\t\t}\n\t\tif (this._ready) {\n\t\t\tthis._ready = false;\n\t\t\tthis._value = null;\n\t\t\tsymbolValues(this._notifies).forEach(callback => callback());\n\t\t}\n\t}\n\t/**\n\t * Makes the object _ready_ and sets its current value.\n\t *\n\t * Any functions that are registered for _notification_ (see {@link Bond#notify})\n\t * or are _tied_ (see {@link Bond#tie}) will be called if this {@link Bond} is not\n\t * currently _ready_ or is _ready_ but has a different value.\n\t *\n\t * This function is a no-op if the JSON representations of `v` and of the\n\t * current value, if any, are equal.\n\t *\n\t * @param {*} v - The new value that this object should represent. If `undefined`\n\t * then the function does nothing.\n\t */\n\tchanged (newValue) {\n\t\tif (typeof (newValue) === 'undefined') {\n\t\t\treturn;\n\t\t}\n\t\t//\t\tconsole.log(`maybe changed (${this._value} -> ${v})`);\n\t\tif (!this._mayBeNull && newValue === null) {\n\t\t\tthis.reset();\n\t\t} else if (!this._ready || !equivalent(newValue, this._value)) {\n\t\t\tthis.trigger(newValue);\n\t\t}\n\t}\n\n\t/**\n\t * Makes the object _ready_ and sets its current value.\n\t *\n\t * Any functions that are registered for _notification_ (see {@link Bond#notify})\n\t * or are _tied_ (see {@link Bond#tie}) will be called if this {@link Bond} is not\n\t * currently _ready_ or is _ready_ but has a different value.\n\t *\n\t * Unlike {@link Bond#changed}, this function doesn't check equivalence\n\t * between the new value and the current value.\n\t *\n\t * @param {*} v - The new value that this object should represent. By default,\n\t * it will reissue the current value. It is an error to call it without\n\t * an argument if it is not _ready_.\n\t */\n\ttrigger (newValue = this._value) {\n\t\t// Cannot trigger to an undefined value (just reset it or call with `null`).\n\t\tif (typeof (newValue) === 'undefined') {\n\t\t\tconsole.error(`Trigger called with undefined value`);\n\t\t\treturn;\n\t\t}\n\t\t// Cannot trigger as a recourse to an existing trigger.\n\t\tif (this._triggering !== null) {\n\t\t\tconsole.error(`Trigger cannot be called while already triggering.`, this._triggering.becoming, newValue);\n\t\t\treturn;\n\t\t}\n\t\tthis._triggering = { becoming: newValue };\n\n\t\tif (!this._mayBeNull && newValue === null) {\n\t\t\tthis.reset();\n\t\t} else {\n\t\t\t//\t\t\tconsole.log(`firing (${JSON.stringify(v)})`);\n\t\t\tthis._ready = true;\n\t\t\tthis._value = newValue;\n\t\t\tsymbolValues(this._notifies).forEach(callback => callback());\n\t\t\tsymbolValues(this._subscribers).forEach(callback => callback(this._value));\n\t\t\tthis._thens.forEach(callback => {\n\t\t\t\tcallback(this._value);\n\t\t\t\tthis.drop();\n\t\t\t});\n\t\t\tthis._thens = [];\n\t\t}\n\n\t\tthis._triggering = null;\n\n\t\tif (this._uuid && !this._noCache && Bond.cache) {\n\t\t\tBond.cache.changed(this._uuid, newValue);\n\t\t}\n\t}\n\n\t/**\n\t * Register a single dependency for this object.\n\t *\n\t * Notes that the object's value is in use, and that it should be computed.\n\t * {@link Bond} sub-classes are allowed to not work properly unless there is\n\t * at least one dependency registered.\n\t *\n\t * @see {@link Bond#initialise}, {@link Bond#finalise}.\n\t */\n\tuse () {\n\t\tif (this._users === 0) {\n\t\t\tif (!this._uuid || !!this._noCache || !Bond.cache) {\n\t\t\t\tthis.initialise();\n\t\t\t} else {\n\t\t\t\tBond.cache.initialise(this._uuid, this, this._stringify, this._parse);\n\t\t\t}\n\t\t}\n\t\tthis._users++;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Unregister a single dependency for this object.\n\t *\n\t * Notes that a previously registered dependency has since expired. Must be\n\t * called exactly once for each time {@link Bond#use} was called.\n\t */\n\tdrop () {\n\t\tif (this._users === 0) {\n\t\t\tthrow new Error(`mismatched use()/drop(): drop() called once more than expected!`);\n\t\t}\n\t\tthis._users--;\n\t\tif (this._users === 0) {\n\t\t\tif (!this._uuid || !!this._noCache || !Bond.cache) {\n\t\t\t\tthis.finalise();\n\t\t\t} else {\n\t\t\t\tBond.cache.finalise(this._uuid, this);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Initialise the object.\n\t *\n\t * Will be called at most once before an accompanying {@link Bond#finalise}\n\t * and should initialise/open/create any resources that are required for the\n\t * sub-class to maintain its value.\n\t *\n\t * @access protected\n\t */\n\tinitialise () {}\n\n\t/**\n\t * Uninitialise the object.\n\t *\n\t * Will be called at most once after an accompanying {@link Bond#initialise}\n\t * and should close/finalise/drop any resources that are required for the\n\t * sub-class to maintain its value.\n\t *\n\t * @access protected\n\t */\n\tfinalise () {}\n\n\t/**\n\t * Returns whether the object is currently in a terminal state.\n\t *\n\t * _WARNING_: The output of this function should not change outside of a\n\t * value change. If it ever changes without the value changing, `trigger`\n\t * should be called to force an update.\n\t *\n\t * @returns {boolean} - `true` when the value should be interpreted as being\n\t * in a final state.\n\t *\n\t * @access protected\n\t * @see {@link Bond#done}\n\t */\n\tisDone () { return false; }\n\n\t/**\n\t * Notification callback.\n\t * @callback Bond~notifyCallback\n\t */\n\n\t/**\n\t * Register a function to be called when the value or the _readiness_\n\t * changes.\n\t *\n\t * Calling this function already implies calling {@link Bond#use} - there\n\t * is no need to call both.\n\t *\n\t * Use this only when you need to be notified should the object be reset to\n\t * a not _ready_ state. In general you will want to use {@link Bond#tie}\n\t * instead.\n\t *\n\t * @param {Bond~notifyCallback} f - The function to be called. Takes no parameters.\n\t * @returns {Symbol} An identifier for this registration. Must be provided\n\t * to {@link Bond#unnotify} when the function no longer needs to be called.\n\t */\n\tnotify (callback) {\n\t\tthis.use();\n\t\tlet id = Symbol('notify::id');\n\t\tthis._notifies[id] = callback;\n\t\tif (this._ready) {\n\t\t\tcallback();\n\t\t}\n\t\treturn id;\n\t}\n\n\t/**\n\t * Unregister a function previously registered with {@link Bond#notify}.\n\t *\n\t * Calling this function already implies calling {@link Bond#drop} - there\n\t * is no need to call both.\n\t *\n\t * @param {Symbol} id - The identifier returned from the corresponding\n\t * {@link Bond#notify} call.\n\t */\n\tunnotify (id) {\n\t\tdelete this._notifies[id];\n\t\tthis.drop();\n\t}\n\n\t/**\n\t * Tie callback.\n\t * @callback Bond~tieCallback\n\t * @param {&} value - The current value to which the object just changed.\n\t * @param {Symbol} id - The identifier of the registration for this callback.\n\t */\n\n\t/**\n\t * Register a function to be called when the value changes.\n\t *\n\t * Calling this function already implies calling {@link Bond#use} - there\n\t * is no need to call both.\n\t *\n\t * Unlike {@link Bond#notify}, this does not get\n\t * called should the object become reset into being not _ready_.\n\t *\n\t * @param {Bond~tieCallback} f - The function to be called.\n\t * @returns {Symbol} - An identifier for this registration. Must be provided\n\t * to {@link Bond#untie} when the function no longer needs to be called.\n\t */\n\ttie (callback) {\n\t\tthis.use();\n\t\tlet id = Symbol('tie::id');\n\t\tthis._subscribers[id] = callback;\n\t\tif (this._ready) {\n\t\t\tcallback(this._value, id);\n\t\t}\n\t\treturn id;\n\t}\n\n\t/**\n\t * Unregister a function previously registered with {@link Bond#tie}.\n\t *\n\t * Calling this function already implies calling {@link Bond#drop} - there\n\t * is no need to call both.\n\t *\n\t * @param {Symbol} id - The identifier returned from the corresponding\n\t * {@link Bond#tie} call.\n\t */\n\tuntie (id) {\n\t\tdelete this._subscribers[id];\n\t\tthis.drop();\n\t}\n\n\t/**\n\t * Determine if there is a definite value that this object represents at\n\t * present.\n\t *\n\t * @returns {boolean} - `true` if there is presently a value that this object represents.\n\t */\n\tisReady () { return this._ready; }\n\n\t/**\n\t * Provide a {@link Bond} which represents whether this object itself represents\n\t * a particular value.\n\t *\n\t * @returns {@link Bond} - Object representing the value returned by\n\t * this {@link Bond}'s {@link Bond#isReady} result. The returned object is\n\t * itself always _ready_.\n\t */\n\tready () {\n\t\tconst ReadyBond = require('./readyBond');\n\n\t\tif (!this._readyBond) {\n\t\t\tthis._readyBond = new ReadyBond(this);\n\t\t}\n\t\treturn this._readyBond;\n\t}\n\n\t/**\n\t * Convenience function for the logical negation of {@link Bond#ready}.\n\t *\n\t * @example\n\t * // These two expressions are exactly equivalent:\n\t * bond.notReady();\n\t * bond.ready().map(_ => !_);\n\t *\n\t * @returns {@link Bond} Object representing the logical opposite\n\t * of the value returned by\n\t * this {@link Bond}'s {@link Bond#isReady} result. The returned object is\n\t * itself always _ready_.\n\t */\n\tnotReady () {\n\t\tconst NotReadyBond = require('./notReadyBond');\n\n\t\tif (!this._notReadyBond) {\n\t\t\tthis._notReadyBond = new NotReadyBond(this);\n\t\t}\n\t\treturn this._notReadyBond;\n\t}\n\n\t/**\n\t * Then callback.\n\t * @callback Bond~thenCallback\n\t * @param {*} value - The current value to which the object just changed.\n\t */\n\n\t/**\n\t * Register a function to be called when this object becomes _ready_.\n\t *\n\t * For an object to be considered _ready_, it must represent a definite\n\t * value. In this case, {@link Bond#isReady} will return `true`.\n\t *\n\t * If the object is already _ready_, then `f` will be called immediately. If\n\t * not, `f` will be deferred until the object assumes a value. `f` will be\n\t * called at most once.\n\t *\n\t * @param {Bond~thenCallback} f The callback to be made once the object is ready.\n\t *\n\t * @example\n\t * let x = new Bond;\n\t * x.then(console.log);\n\t * x.changed(42); // 42 is written to the console.\n\t */\n\tthen (callback) {\n\t\tthis.use();\n\t\tif (this._ready) {\n\t\t\tcallback(this._value);\n\t\t\tthis.drop();\n\t\t} else {\n\t\t\tthis._thens.push(callback);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Register a function to be called when this object becomes _done_.\n\t *\n\t * For an object to be considered `done`, it must be _ready_ and the\n\t * function {@link Bond#isDone} should exist and return `true`.\n\t *\n\t * If the object is already _done_, then `f` will be called immediately. If\n\t * not, `f` will be deferred until the object assumes a value. `f` will be\n\t * called at most once.\n\t *\n\t * @param {Bond~thenCallback} f The callback to be made once the object is ready.\n\t *\n\t * @example\n\t * let x = new Bond;\n\t * x.then(console.log);\n\t * x.changed(42); // 42 is written to the console.\n\t */\n\tdone (callback) {\n\t\tif (this.isDone === undefined) {\n\t\t\tthrow new Error('Cannot call done() on Bond that has no implementation of isDone.');\n\t\t}\n\t\tvar id;\n\t\tlet cleanupCallback = newValue => {\n\t\t\tif (this.isDone(newValue)) {\n\t\t\t\tcallback(newValue);\n\t\t\t\tthis.untie(id);\n\t\t\t}\n\t\t};\n\t\tid = this.tie(cleanupCallback);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Logs the current value to the console.\n\t *\n\t * @returns {@link Bond} The current object.\n\t */\n\tlog () { this.then(console.log); return this; }\n\n\t/**\n\t * Maps the represented value to a string.\n\t *\n\t * @returns {@link Bond} A new {link Bond} which represents the `toString`\n\t * function on whatever value this {@link Bond} represents.\n\t */\n\tmapToString () {\n\t\treturn this.map(_ => _.toString());\n\t}\n\n\t/**\n\t * Make a new {@link Bond} which is the functional transformation of this object.\n\t *\n\t * @example\n\t * let b = new Bond;\n\t * let t = b.map(_ => _ * 2);\n\t * t.tie(console.log);\n\t * b.changed(21); // logs 42\n\t * b.changed(34.5); // logs 69\n\t *\n\t * @example\n\t * let b = new Bond;\n\t * let t = b.map(_ => { let r = new Bond; r.changed(_ * 2); return r; });\n\t * t.tie(console.log);\n\t * b.changed(21); // logs 42\n\t * b.changed(34.5); // logs 69\n\t *\n\t * @example\n\t * let b = new Bond;\n\t * let t = b.map(_ => { let r = new Bond; r.changed(_ * 2); return [r]; }, 1);\n\t * t.tie(console.log);\n\t * b.changed(21); // logs [42]\n\t * b.changed(34.5); // logs [69]\n\t *\n\t * @param {function} f - The transformation to apply to the value represented\n\t * by this {@link Bond}.\n\t * @param {number} outResolveDepth - The number of levels deep in any array\n\t * object values of the result of the transformation that {@link Bond} values\n\t * will be resolved.\n\t * @default 0\n\t * @returns {@link Bond} - An object representing this object's value with\n\t * the function `f` applied to it.\n\t */\n\tmap (transform, outResolveDepth = 0, cache = undefined) {\n\t\tconst TransformBond = require('./transformBond');\n\t\treturn new TransformBond(transform, [this], [], outResolveDepth, 1, cache);\n\t}\n\n\t/**\n\t * Create a new {@link Bond} which represents this object's array value with\n\t * its elements transformed by a function.\n\t *\n\t * @example\n\t * let b = new Bond;\n\t * let t = b.mapEach(_ => _ * 2);\n\t * t.tie(console.log);\n\t * b.changed([1, 2, 3]); // logs [2, 4, 6]\n\t * b.changed([21]); // logs [42]\n\t *\n\t * @param {function} f - The transformation to apply to each element.\n\t * @returns The new {@link Bond} object representing the element-wise\n\t * Transformation.\n\t */\n\tmapEach (transform, cache = undefined) {\n\t\treturn this.map(item => item.map(transform), 1, cache);\n\t}\n\n\t/**\n\t * Create a new {@link Bond} which represents this object's value when\n\t * subscripted.\n\t *\n\t * @example\n\t * let b = new Bond;\n\t * let t = b.sub('foo');\n\t * t.tie(console.log);\n\t * b.changed({foo: 42}); // logs 42\n\t * b.changed({foo: 69}); // logs 69\n\t *\n\t * @example\n\t * let b = new Bond;\n\t * let c = new Bond;\n\t * let t = b.sub(c);\n\t * t.tie(console.log);\n\t * b.changed([42, 4, 2]);\n\t * c.changed(0); // logs 42\n\t * c.changed(1); // logs 4\n\t * b.changed([68, 69, 70]); // logs 69\n\t *\n\t * @param {string|number} name - The field or index by which to subscript this object's\n\t * represented value. May itself be a {@link Bond}, in which case, the\n\t * resolved value is used.\n\t * @param {number} outResolveDepth - The depth in any returned structure\n\t * that a {@link Bond} may be for it to be resolved.\n\t * @returns {@link Bond} - The object representing the value which is the\n\t * value represented by this object subscripted by the value represented by\n\t * `name`.\n\t */\n\tsub (name, outResolveDepth = 0, cache = undefined) {\n\t\tconst TransformBond = require('./transformBond');\n\t\treturn new TransformBond(\n\t\t\t(object, field) => object[field],\n\t\t\t[this, name],\n\t\t\t[],\n\t\t\toutResolveDepth,\n\t\t\t1,\n\t\t\tcache\n\t\t);\n\t}\n\n\t/**\n\t * Create a new {@link Bond} which represents the array of many objects'\n\t * representative values.\n\t *\n\t * This object will be _ready_ if and only if all objects in `list` are\n\t * themselves _ready_.\n\t *\n\t * @example\n\t * let b = new Bond;\n\t * let c = new Bond;\n\t * let t = Bond.all([b, c]);\n\t * t.tie(console.log);\n\t * b.changed(42);\n\t * c.changed(69); // logs [42, 69]\n\t * b.changed(3); // logs [3, 69]\n\t *\n\t * @example\n\t * let b = new Bond;\n\t * let c = new Bond;\n\t * let t = Bond.all(['a', {b, c}, 'd'], 2);\n\t * t.tie(console.log);\n\t * b.changed(42);\n\t * c.changed(69); // logs ['a', {b: 42, c: 69}, 'd']\n\t * b.changed(null); // logs ['a', {b: null, c: 69}, 'd']\n\t *\n\t * @param {array} list - An array of {@link Bond} objects, plain values or\n\t * structures (arrays/objects) which contain either of these.\n\t * @param {number} resolveDepth - The depth in a structure (array or object)\n\t * that a {@link Bond} may be in any of `list`'s items for it to be resolved.\n\t * @returns {@link Bond} - The object representing the value of the array of\n\t * each object's representative value in `list`.\n\t */\n\tstatic all (list, resolveDepth = 1, cache = undefined) {\n\t\tconst TransformBond = require('./transformBond');\n\t\treturn new TransformBond((...args) => args, list, [], 0, resolveDepth, cache);\n\t}\n\n\t/**\n\t * Create a new {@link Bond} which represents a functional transformation of\n\t * many objects' representative values.\n\t *\n\t * @example\n\t * let b = new Bond;\n\t * b.changed(23);\n\t * let c = new Bond;\n\t * c.changed(3);\n\t * let multiply = (x, y) => x * y;\n\t * // These two are exactly equivalent:\n\t * let bc = Bond.all([b, c]).map(([b, c]) => multiply(b, c));\n\t * let bc2 = Bond.mapAll([b, c], multiply);\n\t *\n\t * @param {array} list - An array of {@link Bond} objects or plain values.\n\t * @param {function} f - A function which accepts as many parameters are there\n\t * values in `list` and transforms it into a {@link Bond}, {@link Promise}\n\t * or other value.\n\t * @param {number} resolveDepth - The depth in a structure (array or object)\n\t * that a {@link Bond} may be in any of `list`'s items for it to be resolved.\n\t * @param {number} outResolveDepth - The depth in any returned structure\n\t * that a {@link Bond} may be for it to be resolved.\n\t */\n\tstatic mapAll (list, transform, outResolveDepth = 0, resolveDepth = 1, cache = undefined) {\n\t\tconst TransformBond = require('./transformBond');\n\t\treturn new TransformBond(transform, list, [], outResolveDepth, resolveDepth, cache);\n\t}\n\n\t// Takes a Bond which evaluates to a = [a[0], a[1], ...]\n\t// Returns Bond which evaluates to:\n\t// null iff a.length === 0\n\t// f(i, a[0])[0] iff f(i, a[0])[1] === true\n\t// fold(f(0, a[0]), a.mid(1)) otherwise\n\t/**\n\t * Lazily transforms the contents of this object's value when it is an array.\n\t *\n\t * This operates on a {@link Bond} which should represent an array. It\n\t * transforms this into a value based on a number of elements at the\n\t * beginning of that array using a recursive _reduce_ algorithm.\n\t *\n\t * The reduce algorithm works around an accumulator model. It begins with\n\t * the `init` value, and incremenetally accumulates\n\t * elements from the array by changing its value to one returned from the\n\t * `accum` function, when passed the current accumulator and the next value\n\t * from the array. The `accum` function may return a {@link Bond}, in which case it\n\t * will be resolved (using {@link Bond#then}) and that value used.\n\t *\n\t * The `accum` function returns a value (or a {@link Bond} which resolves to a value)\n\t * of an array with exactly two elements; the first is the new value for the\n\t * accumulator. The second is a boolean _early exit_ flag.\n\t *\n\t * Accumulation will continue until either there are no more elements in the\n\t * array to be processed, or until the _early exit_ flag is true, which ever\n\t * happens first.\n\t *\n\t * @param {function} accum - The reduce's accumulator function.\n\t * @param {*} init - The initialisation value for the reduce algorithm.\n\t * @returns {Bond} - A {@link Bond} representing `init` when the input array is empty,\n\t * otherwise the reduction of that array.\n\t */\n\treduce (accum, init, cache = undefined) {\n\t\tvar nextItem = function (acc, rest) {\n\t\t\tlet next = rest.pop();\n\t\t\treturn accum(acc, next).map(([result, finished]) =>\n\t\t\t\tfinished\n\t\t\t\t\t? result\n\t\t\t\t\t: rest.length > 0\n\t\t\t\t\t\t? nextItem(result, rest)\n\t\t\t\t\t\t: null\n\t\t\t);\n\t\t};\n\t\treturn this.map(array => array.length > 0 ? nextItem(init, array) : init, 0, cache);\n\t}\n\n\t/**\n\t * Create a Promise which represents one or more {@link Bond}s.\n\t *\n\t * @example\n\t * let b = new Bond;\n \t * let p = Bond.promise([b, 42])\n\t * p.then(console.log);\n\t * b.changed(69); // logs [69, 42]\n\t * b.changed(42); // nothing.\n\t *\n\t * @param {array} list - A list of values, {Promise}s or {@link Bond}s.\n\t * @returns {Promise} - A object which resolves to an array of values\n\t * corresponding to those passed in `list`.\n\t */\n\tstatic promise (list) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tvar finished = 0;\n\t\t\tvar resolved = [];\n\t\t\tresolved.length = list.length;\n\n\t\t\tlet done = (index, value) => {\n\t\t\t\t//\t\t\t\tconsole.log(`done ${i} ${v}`);\n\t\t\t\tresolved[index] = value;\n\t\t\t\tfinished++;\n\t\t\t\t//\t\t\t\tconsole.log(`finished ${finished}; l.length ${l.length}`);\n\t\t\t\tif (finished === resolved.length) {\n\t\t\t\t\t//\t\t\t\t\tconsole.log(`resolving with ${l}`);\n\t\t\t\t\tresolve(resolved);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tlist.forEach((unresolvedObject, index) => {\n\t\t\t\tif (Bond.instanceOf(unresolvedObject)) {\n\t\t\t\t\t// unresolvedObject is a Bond.\n\t\t\t\t\tunresolvedObject.then(value => done(index, value));\n\t\t\t\t} else if (unresolvedObject instanceof Promise) {\n\t\t\t\t\t// unresolvedObject is a Promise.\n\t\t\t\t\tunresolvedObject.then(value => done(index, value), reject);\n\t\t\t\t} else {\n\t\t\t\t\t// unresolvedObject is actually just a normal value.\n\t\t\t\t\tdone(index, unresolvedObject);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Duck-typed alternative to `instanceof Bond`, when multiple instantiations\n\t * of `Bond` may be available.\n\t */\n\tstatic instanceOf (b) {\n\t\treturn (\n\t\t\ttypeof (b) === 'object' &&\n\t\t\tb !== null &&\n\t\t\ttypeof (b.reset) === 'function' &&\n\t\t\ttypeof (b.changed) === 'function'\n\t\t);\n\t}\n}\n\nBond.backupStorage = {};\nBond.cache = new BondCache(Bond.backupStorage);\n\nmodule.exports = Bond;\n",
    "static": true,
    "longname": "/home/tomusdrw/workspace/oo7-new/packages/oo7/lib/bond.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 50,
    "kind": "variable",
    "name": "subscripted",
    "memberof": "packages/oo7/lib/bond.js",
    "static": true,
    "longname": "packages/oo7/lib/bond.js~subscripted",
    "access": "public",
    "export": false,
    "importPath": "./packages/oo7/lib/bond.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 51,
    "kind": "variable",
    "name": "reservedNames",
    "memberof": "packages/oo7/lib/bond.js",
    "static": true,
    "longname": "packages/oo7/lib/bond.js~reservedNames",
    "access": "public",
    "export": false,
    "importPath": "./packages/oo7/lib/bond.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "{\"toJSON\": boolean, \"toString\": boolean}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 52,
    "kind": "function",
    "name": "symbolValues",
    "memberof": "packages/oo7/lib/bond.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/oo7/lib/bond.js~symbolValues",
    "access": "public",
    "export": false,
    "importPath": "./packages/oo7/lib/bond.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [
      {
        "name": "o",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 53,
    "kind": "function",
    "name": "equivalent",
    "memberof": "packages/oo7/lib/bond.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/oo7/lib/bond.js~equivalent",
    "access": "public",
    "export": false,
    "importPath": "./packages/oo7/lib/bond.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 54,
    "kind": "class",
    "name": "Bond",
    "memberof": "packages/oo7/lib/bond.js",
    "static": true,
    "longname": "packages/oo7/lib/bond.js~Bond",
    "access": "public",
    "export": true,
    "importPath": "./packages/oo7/lib/bond.js",
    "importStyle": "Bond",
    "description": "An object which tracks a single, potentially variable, value.\n{@link Bond}s may be updated to new values with {@link Bond#changed} and reset to an indeterminate\n(\"not ready\") value with {@link Bond#reset}.\n\n{@link Bond}s track their dependents - aspects of the program, including other {@link Bond}s,\nwhich reference their current value. Dependents may be added with {@link Bond#use} and\nremoved with {@link Bond#drop}.\n\nA {@link Bond} may be tied to a particular function to ensure it is called whenever\nthe value changes. This implies a dependency, and can be registered with {@link Bond#tie} and\ndropped with {@link Bond#untie}. A function may also be called should the {@link Bond} be reverted\nto an undefined value; in this case {@link Bond#notify} and {@link Bond#unnotify} should\nbe used.\n\n{@link Bond}s can be made to execute a function once their value becomes ready\nusing {@link Bond#then}, which in some sense replicates the same function in the\ncontext of a `Promise`. The similar function {@link Bond#done} is also supplied which\nexecutes a given function when the {@link Bond} reaches a value which is considered\n\"final\", determined by {@link Bond#isDone} being implemented and `true`. Precisely\nwhat any given {@link Bond} considers final depends entirely on the subclass of\n{@link Bond}; for the {@link Bond} class itself, `isDone` always returns `false` and thus\n{@link Bond#done} is unusable. The value of the {@link Bond}, once _ready_, may\nbe logged to the console with the {@link Bond#log} function.\n\nA {@link Bond} can provide a derivative {@link Bond} whose value reflects the \"readiness\"\nof the original, using {@link Bond#ready} and conversely {@link Bond#notReady}. This\ncan also be queried normally with {@link Bond#isReady}.\n\nOne or a number of {@link Bond}s can be converted into a single {Promise} with the\n{@link Bond#promise} function.\n\n`Bonds` can be composed. {@link Bond#map} creates a new {@link Bond} whose value is a\ntransformation. {@link Bond.all} creates a new {@link Bond} which evaluates to the array\nof values of each of a number of dependent {@link Bond}s. {@link Bond.mapAll} combines\nboth. {@link Bond#reduce} allows a {@link Bond} that evaluates to array to be\ntransformed into some other value recursively.\n\n{@link Bond#sub} forms a derivative {@link Bond} as the subscript (square-bracket\nindexing). {@link Bond#subscriptable} may be used to return a `Proxy` object that\nallows the {@link Bond} to be subscripted (square-bracket indexed) directly without\nneed of the {@link Bond#sub} function.\n\n{@link Bond} is built to be subclassed. When subclassing, three functions are\nuseful to implement. {@link Bond#isDone} may be implemented\nin order to make {@link Bond#done} be useful. {@link Bond#initialise} is called exactly once\nwhen there becomes at least one dependent; {@link Bond#finalise} is called when there\nare no longer any dependents.\n\n_WARNING_: You should not attempt to use the `toString` function with this\nclass. It cannot be meaningfully converted into a string, and to attempt it\nwill give an undefined result.",
    "lineNumber": 82,
    "interface": false
  },
  {
    "__docId__": 55,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/oo7/lib/bond.js~Bond",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/oo7/lib/bond.js~Bond#constructor",
    "access": "public",
    "description": "Constructs a new {@link Bond} object whose value is _not ready_.",
    "lineNumber": 90,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "mayBeNull",
        "description": "`true` if this instance's value may ever\nvalidly be `null`. If `false`, then setting this object's value to `null`\nis equivalent to reseting back to being _not ready_."
      }
    ]
  },
  {
    "__docId__": 56,
    "kind": "member",
    "name": "_subscribers",
    "memberof": "packages/oo7/lib/bond.js~Bond",
    "static": false,
    "longname": "packages/oo7/lib/bond.js~Bond#_subscribers",
    "access": "private",
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 57,
    "kind": "member",
    "name": "_thens",
    "memberof": "packages/oo7/lib/bond.js~Bond",
    "static": false,
    "longname": "packages/oo7/lib/bond.js~Bond#_thens",
    "access": "private",
    "description": null,
    "lineNumber": 99,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 58,
    "kind": "member",
    "name": "_notifies",
    "memberof": "packages/oo7/lib/bond.js~Bond",
    "static": false,
    "longname": "packages/oo7/lib/bond.js~Bond#_notifies",
    "access": "private",
    "description": null,
    "lineNumber": 104,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 59,
    "kind": "member",
    "name": "_ready",
    "memberof": "packages/oo7/lib/bond.js~Bond",
    "static": false,
    "longname": "packages/oo7/lib/bond.js~Bond#_ready",
    "access": "private",
    "description": null,
    "lineNumber": 108,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 60,
    "kind": "member",
    "name": "_value",
    "memberof": "packages/oo7/lib/bond.js~Bond",
    "static": false,
    "longname": "packages/oo7/lib/bond.js~Bond#_value",
    "access": "private",
    "description": null,
    "lineNumber": 110,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 61,
    "kind": "member",
    "name": "_triggering",
    "memberof": "packages/oo7/lib/bond.js~Bond",
    "static": false,
    "longname": "packages/oo7/lib/bond.js~Bond#_triggering",
    "access": "private",
    "description": null,
    "lineNumber": 112,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 62,
    "kind": "member",
    "name": "_mayBeNull",
    "memberof": "packages/oo7/lib/bond.js~Bond",
    "static": false,
    "longname": "packages/oo7/lib/bond.js~Bond#_mayBeNull",
    "access": "private",
    "description": null,
    "lineNumber": 115,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 63,
    "kind": "member",
    "name": "_users",
    "memberof": "packages/oo7/lib/bond.js~Bond",
    "static": false,
    "longname": "packages/oo7/lib/bond.js~Bond#_users",
    "access": "private",
    "description": null,
    "lineNumber": 124,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 64,
    "kind": "member",
    "name": "_uuid",
    "memberof": "packages/oo7/lib/bond.js~Bond",
    "static": false,
    "longname": "packages/oo7/lib/bond.js~Bond#_uuid",
    "access": "private",
    "description": null,
    "lineNumber": 128,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 65,
    "kind": "member",
    "name": "_stringify",
    "memberof": "packages/oo7/lib/bond.js~Bond",
    "static": false,
    "longname": "packages/oo7/lib/bond.js~Bond#_stringify",
    "access": "private",
    "description": null,
    "lineNumber": 130,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 66,
    "kind": "member",
    "name": "_parse",
    "memberof": "packages/oo7/lib/bond.js~Bond",
    "static": false,
    "longname": "packages/oo7/lib/bond.js~Bond#_parse",
    "access": "private",
    "description": null,
    "lineNumber": 132,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 67,
    "kind": "method",
    "name": "toString",
    "memberof": "packages/oo7/lib/bond.js~Bond",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/oo7/lib/bond.js~Bond#toString",
    "access": "public",
    "description": null,
    "lineNumber": 135,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 68,
    "kind": "method",
    "name": "subscriptable",
    "memberof": "packages/oo7/lib/bond.js~Bond",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/oo7/lib/bond.js~Bond#subscriptable",
    "access": "public",
    "description": "Provides a transparently subscriptable version of this object.\n\nThe object that is returned from this function is a convenience `Proxy`\nwhich acts exactly equivalent\nto the original {@link Bond}, except that any subscripting of fields that are\nnot members of the {@link Bond} object will create a new {@link Bond} that\nitself evaluates to this {@link Bond}'s value when subscripted with the same\nfield.",
    "examples": [
      "let x = (new Bond).subscriptable();\nlet y = x.foo;\ny.log(); // nothing yet\nx.changed({foo: 42, bar: 69});\t// logs 42"
    ],
    "lineNumber": 167,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Proxy} - `Proxy` object that acts as a subscriptable variation\nfor convenience."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "depth",
        "description": "The maximum number of levels of subscripting that\nthe returned `Proxy` will support."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Proxy"
      ],
      "spread": false,
      "description": "`Proxy` object that acts as a subscriptable variation\nfor convenience."
    }
  },
  {
    "__docId__": 69,
    "kind": "method",
    "name": "_knowSymbol",
    "memberof": "packages/oo7/lib/bond.js~Bond",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/oo7/lib/bond.js~Bond._knowSymbol",
    "access": "private",
    "description": null,
    "lineNumber": 208,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 70,
    "kind": "method",
    "name": "_fromSymbol",
    "memberof": "packages/oo7/lib/bond.js~Bond",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/oo7/lib/bond.js~Bond._fromSymbol",
    "access": "private",
    "description": null,
    "lineNumber": 212,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 71,
    "kind": "method",
    "name": "defaultTo",
    "memberof": "packages/oo7/lib/bond.js~Bond",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/oo7/lib/bond.js~Bond#defaultTo",
    "access": "public",
    "description": "Alters this object so that it is always _ready_.\n\nIf this object is ever {@link Bond#reset}, then it will be changed to the\nvalue given.",
    "examples": [
      "let x = (new Bond).defaultTo(42);\nx.log();\t// 42\nx.changed(69);\nx.log();\t// 69\nx.reset();\nx.log() // 42"
    ],
    "lineNumber": 236,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@link Bond} - This (mutated) object."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The value that this object represents if it would otherwise\nbe _not ready_."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "{@link Bond} - This (mutated) object."
    }
  },
  {
    "__docId__": 72,
    "kind": "member",
    "name": "_defaultTo",
    "memberof": "packages/oo7/lib/bond.js~Bond",
    "static": false,
    "longname": "packages/oo7/lib/bond.js~Bond#_defaultTo",
    "access": "private",
    "description": null,
    "lineNumber": 237,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 73,
    "kind": "method",
    "name": "reset",
    "memberof": "packages/oo7/lib/bond.js~Bond",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/oo7/lib/bond.js~Bond#reset",
    "access": "public",
    "description": "Resets the state of this Bond into being _not ready_.\n\nAny functions that are registered for _notification_ (see {@link Bond#notify})\nwill be called if this {@link Bond} is currently _ready_.",
    "lineNumber": 250,
    "params": [],
    "return": null
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "changed",
    "memberof": "packages/oo7/lib/bond.js~Bond",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/oo7/lib/bond.js~Bond#changed",
    "access": "public",
    "description": "Makes the object _ready_ and sets its current value.\n\nAny functions that are registered for _notification_ (see {@link Bond#notify})\nor are _tied_ (see {@link Bond#tie}) will be called if this {@link Bond} is not\ncurrently _ready_ or is _ready_ but has a different value.\n\nThis function is a no-op if the JSON representations of `v` and of the\ncurrent value, if any, are equal.",
    "lineNumber": 274,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "The new value that this object should represent. If `undefined`\nthen the function does nothing."
      }
    ],
    "return": null
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "trigger",
    "memberof": "packages/oo7/lib/bond.js~Bond",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/oo7/lib/bond.js~Bond#trigger",
    "access": "public",
    "description": "Makes the object _ready_ and sets its current value.\n\nAny functions that are registered for _notification_ (see {@link Bond#notify})\nor are _tied_ (see {@link Bond#tie}) will be called if this {@link Bond} is not\ncurrently _ready_ or is _ready_ but has a different value.\n\nUnlike {@link Bond#changed}, this function doesn't check equivalence\nbetween the new value and the current value.",
    "lineNumber": 300,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "The new value that this object should represent. By default,\nit will reissue the current value. It is an error to call it without\nan argument if it is not _ready_."
      }
    ],
    "return": null
  },
  {
    "__docId__": 83,
    "kind": "method",
    "name": "use",
    "memberof": "packages/oo7/lib/bond.js~Bond",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/oo7/lib/bond.js~Bond#use",
    "access": "public",
    "description": "Register a single dependency for this object.\n\nNotes that the object's value is in use, and that it should be computed.\n{@link Bond} sub-classes are allowed to not work properly unless there is\nat least one dependency registered.",
    "see": [
      "{@link Bond#initialise}, {@link Bond#finalise}."
    ],
    "lineNumber": 344,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 84,
    "kind": "method",
    "name": "drop",
    "memberof": "packages/oo7/lib/bond.js~Bond",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/oo7/lib/bond.js~Bond#drop",
    "access": "public",
    "description": "Unregister a single dependency for this object.\n\nNotes that a previously registered dependency has since expired. Must be\ncalled exactly once for each time {@link Bond#use} was called.",
    "lineNumber": 362,
    "params": [],
    "return": null
  },
  {
    "__docId__": 85,
    "kind": "method",
    "name": "initialise",
    "memberof": "packages/oo7/lib/bond.js~Bond",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/oo7/lib/bond.js~Bond#initialise",
    "access": "protected",
    "description": "Initialise the object.\n\nWill be called at most once before an accompanying {@link Bond#finalise}\nand should initialise/open/create any resources that are required for the\nsub-class to maintain its value.",
    "lineNumber": 385,
    "params": [],
    "return": null
  },
  {
    "__docId__": 86,
    "kind": "method",
    "name": "finalise",
    "memberof": "packages/oo7/lib/bond.js~Bond",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/oo7/lib/bond.js~Bond#finalise",
    "access": "protected",
    "description": "Uninitialise the object.\n\nWill be called at most once after an accompanying {@link Bond#initialise}\nand should close/finalise/drop any resources that are required for the\nsub-class to maintain its value.",
    "lineNumber": 396,
    "params": [],
    "return": null
  },
  {
    "__docId__": 87,
    "kind": "method",
    "name": "isDone",
    "memberof": "packages/oo7/lib/bond.js~Bond",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/oo7/lib/bond.js~Bond#isDone",
    "access": "protected",
    "description": "Returns whether the object is currently in a terminal state.\n\n_WARNING_: The output of this function should not change outside of a\nvalue change. If it ever changes without the value changing, `trigger`\nshould be called to force an update.",
    "see": [
      "{@link Bond#done}"
    ],
    "lineNumber": 411,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} - `true` when the value should be interpreted as being\nin a final state."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "`true` when the value should be interpreted as being\nin a final state."
    },
    "params": []
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "notify",
    "memberof": "packages/oo7/lib/bond.js~Bond",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/oo7/lib/bond.js~Bond#notify",
    "access": "public",
    "description": "Register a function to be called when the value or the _readiness_\nchanges.\n\nCalling this function already implies calling {@link Bond#use} - there\nis no need to call both.\n\nUse this only when you need to be notified should the object be reset to\na not _ready_ state. In general you will want to use {@link Bond#tie}\ninstead.",
    "lineNumber": 433,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Symbol} An identifier for this registration. Must be provided\nto {@link Bond#unnotify} when the function no longer needs to be called."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Bond~notifyCallback"
        ],
        "spread": false,
        "optional": false,
        "name": "f",
        "description": "The function to be called. Takes no parameters."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Symbol"
      ],
      "spread": false,
      "description": "An identifier for this registration. Must be provided\nto {@link Bond#unnotify} when the function no longer needs to be called."
    }
  },
  {
    "__docId__": 89,
    "kind": "method",
    "name": "unnotify",
    "memberof": "packages/oo7/lib/bond.js~Bond",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/oo7/lib/bond.js~Bond#unnotify",
    "access": "public",
    "description": "Unregister a function previously registered with {@link Bond#notify}.\n\nCalling this function already implies calling {@link Bond#drop} - there\nis no need to call both.",
    "lineNumber": 452,
    "params": [
      {
        "nullable": null,
        "types": [
          "Symbol"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "The identifier returned from the corresponding\n{@link Bond#notify} call."
      }
    ],
    "return": null
  },
  {
    "__docId__": 90,
    "kind": "method",
    "name": "tie",
    "memberof": "packages/oo7/lib/bond.js~Bond",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/oo7/lib/bond.js~Bond#tie",
    "access": "public",
    "description": "Register a function to be called when the value changes.\n\nCalling this function already implies calling {@link Bond#use} - there\nis no need to call both.\n\nUnlike {@link Bond#notify}, this does not get\ncalled should the object become reset into being not _ready_.",
    "lineNumber": 477,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Symbol} - An identifier for this registration. Must be provided\nto {@link Bond#untie} when the function no longer needs to be called."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Bond~tieCallback"
        ],
        "spread": false,
        "optional": false,
        "name": "f",
        "description": "The function to be called."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Symbol"
      ],
      "spread": false,
      "description": "An identifier for this registration. Must be provided\nto {@link Bond#untie} when the function no longer needs to be called."
    }
  },
  {
    "__docId__": 91,
    "kind": "method",
    "name": "untie",
    "memberof": "packages/oo7/lib/bond.js~Bond",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/oo7/lib/bond.js~Bond#untie",
    "access": "public",
    "description": "Unregister a function previously registered with {@link Bond#tie}.\n\nCalling this function already implies calling {@link Bond#drop} - there\nis no need to call both.",
    "lineNumber": 496,
    "params": [
      {
        "nullable": null,
        "types": [
          "Symbol"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "The identifier returned from the corresponding\n{@link Bond#tie} call."
      }
    ],
    "return": null
  },
  {
    "__docId__": 92,
    "kind": "method",
    "name": "isReady",
    "memberof": "packages/oo7/lib/bond.js~Bond",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/oo7/lib/bond.js~Bond#isReady",
    "access": "public",
    "description": "Determine if there is a definite value that this object represents at\npresent.",
    "lineNumber": 507,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} - `true` if there is presently a value that this object represents."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "`true` if there is presently a value that this object represents."
    },
    "params": []
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "ready",
    "memberof": "packages/oo7/lib/bond.js~Bond",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/oo7/lib/bond.js~Bond#ready",
    "access": "public",
    "description": "Provide a {@link Bond} which represents whether this object itself represents\na particular value.",
    "lineNumber": 517,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@link Bond} - Object representing the value returned by\nthis {@link Bond}'s {@link Bond#isReady} result. The returned object is\nitself always _ready_."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "{@link Bond} - Object representing the value returned by\nthis {@link Bond}'s {@link Bond#isReady} result. The returned object is\nitself always _ready_."
    },
    "params": []
  },
  {
    "__docId__": 94,
    "kind": "member",
    "name": "_readyBond",
    "memberof": "packages/oo7/lib/bond.js~Bond",
    "static": false,
    "longname": "packages/oo7/lib/bond.js~Bond#_readyBond",
    "access": "private",
    "description": null,
    "lineNumber": 521,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "notReady",
    "memberof": "packages/oo7/lib/bond.js~Bond",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/oo7/lib/bond.js~Bond#notReady",
    "access": "public",
    "description": "Convenience function for the logical negation of {@link Bond#ready}.",
    "examples": [
      "// These two expressions are exactly equivalent:\nbond.notReady();\nbond.ready().map(_ => !_);"
    ],
    "lineNumber": 539,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@link Bond} Object representing the logical opposite\nof the value returned by\nthis {@link Bond}'s {@link Bond#isReady} result. The returned object is\nitself always _ready_."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "{@link Bond} Object representing the logical opposite\nof the value returned by\nthis {@link Bond}'s {@link Bond#isReady} result. The returned object is\nitself always _ready_."
    },
    "params": []
  },
  {
    "__docId__": 96,
    "kind": "member",
    "name": "_notReadyBond",
    "memberof": "packages/oo7/lib/bond.js~Bond",
    "static": false,
    "longname": "packages/oo7/lib/bond.js~Bond#_notReadyBond",
    "access": "private",
    "description": null,
    "lineNumber": 543,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 97,
    "kind": "method",
    "name": "then",
    "memberof": "packages/oo7/lib/bond.js~Bond",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/oo7/lib/bond.js~Bond#then",
    "access": "public",
    "description": "Register a function to be called when this object becomes _ready_.\n\nFor an object to be considered _ready_, it must represent a definite\nvalue. In this case, {@link Bond#isReady} will return `true`.\n\nIf the object is already _ready_, then `f` will be called immediately. If\nnot, `f` will be deferred until the object assumes a value. `f` will be\ncalled at most once.",
    "examples": [
      "let x = new Bond;\nx.then(console.log);\nx.changed(42); // 42 is written to the console."
    ],
    "lineNumber": 571,
    "params": [
      {
        "nullable": null,
        "types": [
          "Bond~thenCallback"
        ],
        "spread": false,
        "optional": false,
        "name": "f",
        "description": "The callback to be made once the object is ready."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "done",
    "memberof": "packages/oo7/lib/bond.js~Bond",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/oo7/lib/bond.js~Bond#done",
    "access": "public",
    "description": "Register a function to be called when this object becomes _done_.\n\nFor an object to be considered `done`, it must be _ready_ and the\nfunction {@link Bond#isDone} should exist and return `true`.\n\nIf the object is already _done_, then `f` will be called immediately. If\nnot, `f` will be deferred until the object assumes a value. `f` will be\ncalled at most once.",
    "examples": [
      "let x = new Bond;\nx.then(console.log);\nx.changed(42); // 42 is written to the console."
    ],
    "lineNumber": 599,
    "params": [
      {
        "nullable": null,
        "types": [
          "Bond~thenCallback"
        ],
        "spread": false,
        "optional": false,
        "name": "f",
        "description": "The callback to be made once the object is ready."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 99,
    "kind": "method",
    "name": "log",
    "memberof": "packages/oo7/lib/bond.js~Bond",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/oo7/lib/bond.js~Bond#log",
    "access": "public",
    "description": "Logs the current value to the console.",
    "lineNumber": 619,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@link Bond} The current object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "{@link Bond} The current object."
    },
    "params": []
  },
  {
    "__docId__": 100,
    "kind": "method",
    "name": "mapToString",
    "memberof": "packages/oo7/lib/bond.js~Bond",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/oo7/lib/bond.js~Bond#mapToString",
    "access": "public",
    "description": "Maps the represented value to a string.",
    "lineNumber": 627,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@link Bond} A new {link Bond} which represents the `toString`\nfunction on whatever value this {@link Bond} represents."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "{@link Bond} A new {link Bond} which represents the `toString`\nfunction on whatever value this {@link Bond} represents."
    },
    "params": []
  },
  {
    "__docId__": 101,
    "kind": "method",
    "name": "map",
    "memberof": "packages/oo7/lib/bond.js~Bond",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/oo7/lib/bond.js~Bond#map",
    "access": "public",
    "description": "Make a new {@link Bond} which is the functional transformation of this object.",
    "examples": [
      "let b = new Bond;\nlet t = b.map(_ => _ * 2);\nt.tie(console.log);\nb.changed(21); // logs 42\nb.changed(34.5); // logs 69",
      "let b = new Bond;\nlet t = b.map(_ => { let r = new Bond; r.changed(_ * 2); return r; });\nt.tie(console.log);\nb.changed(21); // logs 42\nb.changed(34.5); // logs 69",
      "let b = new Bond;\nlet t = b.map(_ => { let r = new Bond; r.changed(_ * 2); return [r]; }, 1);\nt.tie(console.log);\nb.changed(21); // logs [42]\nb.changed(34.5); // logs [69]"
    ],
    "lineNumber": 664,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "0"
      },
      {
        "tagName": "@returns",
        "tagValue": "{@link Bond} - An object representing this object's value with\nthe function `f` applied to it."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "f",
        "description": "The transformation to apply to the value represented\nby this {@link Bond}."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "outResolveDepth",
        "description": "The number of levels deep in any array\nobject values of the result of the transformation that {@link Bond} values\nwill be resolved."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "{@link Bond} - An object representing this object's value with\nthe function `f` applied to it."
    }
  },
  {
    "__docId__": 102,
    "kind": "method",
    "name": "mapEach",
    "memberof": "packages/oo7/lib/bond.js~Bond",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/oo7/lib/bond.js~Bond#mapEach",
    "access": "public",
    "description": "Create a new {@link Bond} which represents this object's array value with\nits elements transformed by a function.",
    "examples": [
      "let b = new Bond;\nlet t = b.mapEach(_ => _ * 2);\nt.tie(console.log);\nb.changed([1, 2, 3]); // logs [2, 4, 6]\nb.changed([21]); // logs [42]"
    ],
    "lineNumber": 684,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "The new {@link Bond} object representing the element-wise\nTransformation."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "f",
        "description": "The transformation to apply to each element."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "The new {@link Bond} object representing the element-wise\nTransformation."
    }
  },
  {
    "__docId__": 103,
    "kind": "method",
    "name": "sub",
    "memberof": "packages/oo7/lib/bond.js~Bond",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/oo7/lib/bond.js~Bond#sub",
    "access": "public",
    "description": "Create a new {@link Bond} which represents this object's value when\nsubscripted.",
    "examples": [
      "let b = new Bond;\nlet t = b.sub('foo');\nt.tie(console.log);\nb.changed({foo: 42}); // logs 42\nb.changed({foo: 69}); // logs 69",
      "let b = new Bond;\nlet c = new Bond;\nlet t = b.sub(c);\nt.tie(console.log);\nb.changed([42, 4, 2]);\nc.changed(0); // logs 42\nc.changed(1); // logs 4\nb.changed([68, 69, 70]); // logs 69"
    ],
    "lineNumber": 718,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@link Bond} - The object representing the value which is the\nvalue represented by this object subscripted by the value represented by\n`name`."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The field or index by which to subscript this object's\nrepresented value. May itself be a {@link Bond}, in which case, the\nresolved value is used."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "outResolveDepth",
        "description": "The depth in any returned structure\nthat a {@link Bond} may be for it to be resolved."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "{@link Bond} - The object representing the value which is the\nvalue represented by this object subscripted by the value represented by\n`name`."
    }
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "all",
    "memberof": "packages/oo7/lib/bond.js~Bond",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/oo7/lib/bond.js~Bond.all",
    "access": "public",
    "description": "Create a new {@link Bond} which represents the array of many objects'\nrepresentative values.\n\nThis object will be _ready_ if and only if all objects in `list` are\nthemselves _ready_.",
    "examples": [
      "let b = new Bond;\nlet c = new Bond;\nlet t = Bond.all([b, c]);\nt.tie(console.log);\nb.changed(42);\nc.changed(69); // logs [42, 69]\nb.changed(3); // logs [3, 69]",
      "let b = new Bond;\nlet c = new Bond;\nlet t = Bond.all(['a', {b, c}, 'd'], 2);\nt.tie(console.log);\nb.changed(42);\nc.changed(69); // logs ['a', {b: 42, c: 69}, 'd']\nb.changed(null); // logs ['a', {b: null, c: 69}, 'd']"
    ],
    "lineNumber": 762,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@link Bond} - The object representing the value of the array of\neach object's representative value in `list`."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "list",
        "description": "An array of {@link Bond} objects, plain values or\nstructures (arrays/objects) which contain either of these."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "resolveDepth",
        "description": "The depth in a structure (array or object)\nthat a {@link Bond} may be in any of `list`'s items for it to be resolved."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "{@link Bond} - The object representing the value of the array of\neach object's representative value in `list`."
    }
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "mapAll",
    "memberof": "packages/oo7/lib/bond.js~Bond",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/oo7/lib/bond.js~Bond.mapAll",
    "access": "public",
    "description": "Create a new {@link Bond} which represents a functional transformation of\nmany objects' representative values.",
    "examples": [
      "let b = new Bond;\nb.changed(23);\nlet c = new Bond;\nc.changed(3);\nlet multiply = (x, y) => x * y;\n// These two are exactly equivalent:\nlet bc = Bond.all([b, c]).map(([b, c]) => multiply(b, c));\nlet bc2 = Bond.mapAll([b, c], multiply);"
    ],
    "lineNumber": 790,
    "params": [
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "list",
        "description": "An array of {@link Bond} objects or plain values."
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "f",
        "description": "A function which accepts as many parameters are there\nvalues in `list` and transforms it into a {@link Bond}, {@link Promise}\nor other value."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "resolveDepth",
        "description": "The depth in a structure (array or object)\nthat a {@link Bond} may be in any of `list`'s items for it to be resolved."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "outResolveDepth",
        "description": "The depth in any returned structure\nthat a {@link Bond} may be for it to be resolved."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 106,
    "kind": "method",
    "name": "reduce",
    "memberof": "packages/oo7/lib/bond.js~Bond",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/oo7/lib/bond.js~Bond#reduce",
    "access": "public",
    "description": "Lazily transforms the contents of this object's value when it is an array.\n\nThis operates on a {@link Bond} which should represent an array. It\ntransforms this into a value based on a number of elements at the\nbeginning of that array using a recursive _reduce_ algorithm.\n\nThe reduce algorithm works around an accumulator model. It begins with\nthe `init` value, and incremenetally accumulates\nelements from the array by changing its value to one returned from the\n`accum` function, when passed the current accumulator and the next value\nfrom the array. The `accum` function may return a {@link Bond}, in which case it\nwill be resolved (using {@link Bond#then}) and that value used.\n\nThe `accum` function returns a value (or a {@link Bond} which resolves to a value)\nof an array with exactly two elements; the first is the new value for the\naccumulator. The second is a boolean _early exit_ flag.\n\nAccumulation will continue until either there are no more elements in the\narray to be processed, or until the _early exit_ flag is true, which ever\nhappens first.",
    "lineNumber": 827,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Bond} - A {@link Bond} representing `init` when the input array is empty,\notherwise the reduction of that array."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "accum",
        "description": "The reduce's accumulator function."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "init",
        "description": "The initialisation value for the reduce algorithm."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Bond"
      ],
      "spread": false,
      "description": "A {@link Bond} representing `init` when the input array is empty,\notherwise the reduction of that array."
    }
  },
  {
    "__docId__": 107,
    "kind": "method",
    "name": "promise",
    "memberof": "packages/oo7/lib/bond.js~Bond",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/oo7/lib/bond.js~Bond.promise",
    "access": "public",
    "description": "Create a Promise which represents one or more {@link Bond}s.",
    "examples": [
      "let b = new Bond;\nlet p = Bond.promise([b, 42])\np.then(console.log);\nb.changed(69); // logs [69, 42]\nb.changed(42); // nothing."
    ],
    "lineNumber": 855,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - A object which resolves to an array of values\ncorresponding to those passed in `list`."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "list",
        "description": "A list of values, {Promise}s or {@link Bond}s."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "A object which resolves to an array of values\ncorresponding to those passed in `list`."
    }
  },
  {
    "__docId__": 108,
    "kind": "method",
    "name": "instanceOf",
    "memberof": "packages/oo7/lib/bond.js~Bond",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/oo7/lib/bond.js~Bond.instanceOf",
    "access": "public",
    "description": "Duck-typed alternative to `instanceof Bond`, when multiple instantiations\nof `Bond` may be available.",
    "lineNumber": 891,
    "params": [
      {
        "name": "b",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 109,
    "kind": "file",
    "name": "packages/oo7/lib/bondCache.js",
    "content": "// (C) Copyright 2016-2017 Parity Technologies (UK) Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//         http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// The parent-side cache-server to which child-side BondCaches can connect.\n// Will send messages of the form { bondCacheUpdate: { uuid: '...', value: ... }}\n// value, if provided is the actual Bond value, not a stringification of it.\n// Will try to send these only for UUIDs that it knows the child is interested\n// in - child can register interest with a message { useBond: uuid } and\n// unregister interest with { dropBond: uuid }.\n//\n// If you construct BondCache passing a deferParentPrefix arg, then it's up to\n// you to ensure that the parent actually has a BondCacheProxy constructed. If\n// it doesn't, things will go screwy.\n\nlet consoleDebug = typeof window !== 'undefined' && window.debugging ? console.debug : () => {};\n\nclass BondCache {\n\tconstructor (backupStorage, deferParentPrefix, surrogateWindow = null) {\n\t\tthis.window = surrogateWindow || (typeof window === 'undefined' ? null : window);\n\t\tif (this.window) {\n\t\t\tthis.window.addEventListener('storage', this.onStorageChanged.bind(this));\n\t\t\tthis.window.addEventListener('unload', this.onUnload.bind(this));\n\t\t\tthis.window.addEventListener('message', this.onMessage.bind(this));\n\t\t}\n\n\t\tthis.deferParentPrefix = this.window && this.window.parent ? deferParentPrefix : null;\n\n\t\tthis.regs = {};\n\n\t\t// TODO: would be nice if this were better.\n\t\tthis.sessionId = Math.floor((1 + Math.random()) * 0x100000000).toString(16).substr(1);\n\t\tconsoleDebug('BondCache: Constructing', this.sessionId);\n\n\t\ttry {\n\t\t\tthis.storage = this.window ? this.window.localStorage : backupStorage;\n\t\t} catch (e) {\n\t\t\tthis.storage = backupStorage;\n\t\t}\n\t}\n\n\tinitialise (uuid, bond, stringify, parse) {\n\t\tconsoleDebug('BondCache.initialise', this.sessionId, uuid, bond, this.regs);\n\t\tif (!this.regs[uuid]) {\n\t\t\tconsoleDebug('BondCache.initialise: creating...');\n\t\t\tthis.regs[uuid] = { owned: false, deferred: false, users: [bond], primary: null, stringify, parse };\n\t\t\tlet key = '$_Bonds.' + uuid;\n\t\t\tif (this.storage[key] !== undefined) {\n\t\t\t\tconsoleDebug('BondCache.initialise: restoring from persistent cache');\n\t\t\t\tbond.changed(parse(this.storage[key]));\n\t\t\t}\n\t\t\tthis.ensureActive(uuid);\n\t\t\tconsoleDebug('BondCache.initialise: Created reg', this.regs);\n\t\t} else if (this.regs[uuid].primary === bond) {\n\t\t\tconsoleDebug('BondCache.initialise: Reactivating an inactive primary.');\n\t\t\tif (this.regs[uuid].owned) {\n\t\t\t\tconsole.error('BondCache.initialise: initialise called on already-active Bond.');\n\t\t\t}\n\t\t\tthis.regs[uuid].owned = true;\n\t\t} else {\n\t\t\tconsoleDebug('BondCache.initialise: appending to pre-existing entry', JSON.parse(JSON.stringify(this.regs[uuid])));\n\t\t\tif (!this.regs[uuid].primary && !this.regs[uuid].deferred) {\n\t\t\t\tconsole.error('BondCache.initialise: Registered Bond that has neither primary nor deferred.');\n\t\t\t}\n\t\t\tthis.regs[uuid].users.push(bond);\n\t\t\tlet equivBond = (this.regs[uuid].primary || this.regs[uuid].users[0]);\n\t\t\tif (equivBond.isReady()) {\n\t\t\t\tconsoleDebug('BondCache.initialise: restoring from equivalent active');\n\t\t\t\tbond.changed(equivBond._value);\n\t\t\t}\n\t\t}\n\t\tif (typeof window !== 'undefined' && window.debugging) {\n\t\t\tthis.checkConsistency();\n\t\t}\n\t}\n\n\tcheckConsistency () {\n\t\tObject.keys(this.regs).forEach(uuid => {\n\t\t\tlet item = this.regs[uuid];\n\t\t\tif (\n\t\t\t\t(item.primary === null &&\n\t\t\t\t\t!item.deferred &&\n\t\t\t\t\titem.users.length > 0 &&\n\t\t\t\t\t(this.storage['$_Bonds^' + uuid] === this.sessionId ||\n\t\t\t\t\t\t!this.storage['$_Bonds^' + uuid])\n\t\t\t\t) || (item.primary === null && item.owned)\n\t\t\t) {\n\t\t\t\tconsole.error('BondCache consistency failed!', this.regs);\n\t\t\t}\n\t\t});\n\t}\n\n\tchanged (uuid, value) {\n\t\tconsoleDebug('BondCache.changed', this.sessionId, uuid, value, this.regs);\n\t\tlet item = this.regs[uuid];\n\t\tif (item && this.storage['$_Bonds^' + uuid] === this.sessionId) {\n\t\t\tlet key = '$_Bonds.' + uuid;\n\t\t\tif (value === undefined) {\n\t\t\t\tdelete this.storage[key];\n\t\t\t\titem.users.forEach(bond => bond.reset());\n\t\t\t} else {\n\t\t\t\tthis.storage[key] = item.stringify(value);\n\t\t\t\titem.users.forEach(bond => bond.changed(value));\n\t\t\t}\n\t\t}\n\t\tconsoleDebug('BondCache.changed: complete', this.regs[uuid]);\n\t}\n\n\tfinalise (uuid, bond) {\n\t\tconsoleDebug('BondCache.finalise', uuid, bond, this.regs);\n\t\tlet item = this.regs[uuid];\n\t\tif (typeof item === 'undefined') {\n\t\t\tconsole.error(`BondCache.finalise: called for unregistered UUID ${uuid}`, bond);\n\t\t\treturn;\n\t\t}\n\t\tif (item.primary === bond) {\n\t\t\tconsoleDebug('BondCache.finalise: We own; finalising Bond');\n\n\t\t\t// TODO: decide whether to delete directly, or keep around.\n\t\t\tlet keepAround = true;\n\n\t\t\tif (keepAround) {\n\t\t\t\titem.owned = false;\n\t\t\t\t// TODO: record the current time as an LRU and place the bond in a map for eventual deletion.\n\t\t\t} else {\n\t\t\t\titem.primary.finalise();\n\t\t\t\titem.primary = null;\n\t\t\t\tif (item.users.length === 0) {\n\t\t\t\t\tconsoleDebug('BondCache.finalise: No users; deleting entry and unreging from storage.');\n\t\t\t\t\t// no owner and no users. we shold be the owner in\n\t\t\t\t\t// storage. if we are, remove our key to signify to other\n\t\t\t\t\t// tabs we're no longer maintaining this.\n\t\t\t\t\tlet storageKey = '$_Bonds^' + uuid;\n\t\t\t\t\tlet owner = this.storage[storageKey];\n\t\t\t\t\tif (owner === this.sessionId) {\n\t\t\t\t\t\tdelete this.storage[storageKey];\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconsoleDebug('BondCache.finalise: Still users; ensuring active.');\n\t\t\t\t\t// we removed the owner and there are users, must ensure that\n\t\t\t\t\t// the bond is maintained.\n\t\t\t\t\tthis.ensureActive(uuid);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tconsoleDebug('BondCache.finalise: Not owner. Removing self from users.');\n\t\t\t// otherwise, just remove the exiting bond from the users.\n\t\t\titem.users = item.users.filter(b => b !== bond);\n\n\t\t\t// If we're the last user from a parent-deferred Bond, then notify\n\t\t\t// parent we're no longer bothered about further updates.\n\t\t\tif (item.users.length === 0 && this.regs[uuid].deferred) {\n\t\t\t\tconsoleDebug('BondCache.finalise: dropping deferral from parent frame', uuid);\n\t\t\t\tthis.window.parent.postMessage({ dropBond: uuid }, '*');\n\t\t\t\tthis.regs[uuid].deferred = false;\n\t\t\t}\n\t\t}\n\t\tif (item.primary === null && !item.deferred && item.users.length === 0) {\n\t\t\tdelete this.regs[uuid];\n\t\t}\n\t\tif (typeof window !== 'undefined' && window.debugging) {\n\t\t\tthis.checkConsistency();\n\t\t}\n\t}\n\n\tensureActive (uuid, key = '$_Bonds^' + uuid) {\n\t\tconsoleDebug('BondCache.ensureActive', uuid);\n\t\tlet item = this.regs[uuid];\n\t\tif (item && item.users.length > 0 && item.primary && !item.owned) {\n\t\t\t// would-be owners (users). no need for the primary any more.\n\t\t\tconsoleDebug('BondCache.ensureActive: Cleaning up orphan primary.');\n\t\t\titem.primary.finalise();\n\t\t\titem.primary = null;\n\t\t\titem.owned = false;\n\t\t}\n\t\tif (item && item.users.length > 0 && item.primary === null && !item.deferred) {\n\t\t\tconsoleDebug('BondCache.ensureActive: Activating...');\n\t\t\tif (item.owned) {\n\t\t\t\tconsole.error('BondCache.ensureActive: INCONSISTENT. Cannot have no primary but be owned.');\n\t\t\t}\n\t\t\tif (this.deferParentPrefix && uuid.startsWith(this.deferParentPrefix)) {\n\t\t\t\tconsoleDebug('BondCache.ensureActive: deferring to parent frame', uuid);\n\t\t\t\titem.deferred = true;\n\t\t\t\tthis.window.parent.postMessage({ useBond: uuid }, '*');\n\t\t\t// One that we use - adopt it if necessary.\n\t\t\t} else {\n\t\t\t\tconsoleDebug('BondCache.ensureActive: One that we use - adopt it if necessary.', this.storage[key], this.sessionId);\n\t\t\t\tif (!this.storage[key]) {\n\t\t\t\t\tconsoleDebug('BondCache.ensureActive: No registered owner yet. Adopting');\n\t\t\t\t\tthis.storage[key] = this.sessionId;\n\t\t\t\t}\n\t\t\t\tif (this.storage[key] === this.sessionId) {\n\t\t\t\t\tconsoleDebug('BondCache.ensureActive: We are responsible for this UUID - initialise');\n\t\t\t\t\titem.primary = item.users.pop();\n\t\t\t\t\titem.owned = true;\n\t\t\t\t\titem.primary.initialise();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treconstruct (updateMessage, bond) {\n\t\tif (updateMessage.valueString) {\n\t\t\treturn bond._parse(updateMessage.valueString);\n\t\t}\n\t\treturn updateMessage.value;\n\t}\n\n\tonMessage (e) {\n\t\t//\t\tconsole.log('Received message', e);\n\t\tif (this.window && e.source === this.window.parent) {\n\t\t\t// Comes from parent.\n\t\t\t//\t\t\tconsole.log('Message is from parent');\n\t\t\tif (typeof e.data === 'object' && e.data !== null) {\n\t\t\t\tlet up = e.data.bondCacheUpdate;\n\t\t\t\tif (up && this.regs[up.uuid]) {\n\t\t\t\t\tconsoleDebug('BondCache.onMessage: Bond cache update that we care about:', up.uuid);\n\t\t\t\t\tlet item = this.regs[up.uuid];\n\t\t\t\t\tif (item.users.length > 0) {\n\t\t\t\t\t\tlet value = this.reconstruct(up, item.users[0]);\n\t\t\t\t\t\tif (typeof value !== 'undefined') {\n\t\t\t\t\t\t\tconsoleDebug('BondCache.onMessage: Updating bond:', up.uuid, value, item.users);\n\t\t\t\t\t\t\titem.users.forEach(bond => bond.changed(value));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconsoleDebug('BondCache.onMessage: Resetting bond:', up.uuid, item.users);\n\t\t\t\t\t\t\titem.users.forEach(bond => bond.reset());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tonStorageChanged (e) {\n\t\tif (!e.key.startsWith('$_Bonds')) {\n\t\t\treturn;\n\t\t}\n\t\tlet uuid = e.key.substr(8);\n\t\tlet item = this.regs[uuid];\n\t\tconsoleDebug('BondCache.onStorageChanged', uuid, item);\n\t\tif (!item) {\n\t\t\treturn;\n\t\t}\n\t\tif (e.key[7] === '.') {\n\t\t\t// Bond changed...\n\t\t\tif (typeof (this.storage[e.key]) === 'undefined') {\n\t\t\t\titem.users.forEach(bond => bond.reset());\n\t\t\t} else {\n\t\t\t\tlet v = item.parse(this.storage[e.key]);\n\t\t\t\titem.users.forEach(bond => bond.changed(v));\n\t\t\t}\n\t\t} else if (e.key[7] === '^') {\n\t\t\t// Owner going offline...\n\t\t\tthis.ensureActive(uuid, e.key);\n\t\t}\n\t}\n\n\tonUnload () {\n\t\tconsoleDebug('BondCache.onUnload');\n\t\t// Like drop for all items, except that we don't care about usage; we\n\t\t// drop anyway.\n\t\tObject.keys(this.regs).forEach(uuid => {\n\t\t\tif (this.regs[uuid].deferred) {\n\t\t\t\tconsoleDebug('BondCache.onUnload: dropping deferral from parent frame', uuid);\n\t\t\t\tthis.window.parent.postMessage({ dropBond: uuid }, '*');\n\t\t\t} else {\n\t\t\t\tconsoleDebug('BondCache.onUnload: dropping ownership key from storage', uuid);\n\t\t\t\tlet storageKey = '$_Bonds^' + uuid;\n\t\t\t\tlet owner = this.storage[storageKey];\n\t\t\t\tif (owner === this.sessionId) {\n\t\t\t\t\tdelete this.storage[storageKey];\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tthis.regs = {};\n\t}\n}\n\nmodule.exports = BondCache;\n",
    "static": true,
    "longname": "/home/tomusdrw/workspace/oo7-new/packages/oo7/lib/bondCache.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 110,
    "kind": "variable",
    "name": "consoleDebug",
    "memberof": "packages/oo7/lib/bondCache.js",
    "static": true,
    "longname": "packages/oo7/lib/bondCache.js~consoleDebug",
    "access": "public",
    "export": false,
    "importPath": "./packages/oo7/lib/bondCache.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 111,
    "kind": "class",
    "name": "BondCache",
    "memberof": "packages/oo7/lib/bondCache.js",
    "static": true,
    "longname": "packages/oo7/lib/bondCache.js~BondCache",
    "access": "public",
    "export": true,
    "importPath": "./packages/oo7/lib/bondCache.js",
    "importStyle": "BondCache",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 112,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/oo7/lib/bondCache.js~BondCache",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/oo7/lib/bondCache.js~BondCache#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true
  },
  {
    "__docId__": 113,
    "kind": "member",
    "name": "window",
    "memberof": "packages/oo7/lib/bondCache.js~BondCache",
    "static": false,
    "longname": "packages/oo7/lib/bondCache.js~BondCache#window",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 114,
    "kind": "member",
    "name": "deferParentPrefix",
    "memberof": "packages/oo7/lib/bondCache.js~BondCache",
    "static": false,
    "longname": "packages/oo7/lib/bondCache.js~BondCache#deferParentPrefix",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 115,
    "kind": "member",
    "name": "regs",
    "memberof": "packages/oo7/lib/bondCache.js~BondCache",
    "static": false,
    "longname": "packages/oo7/lib/bondCache.js~BondCache#regs",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 116,
    "kind": "member",
    "name": "sessionId",
    "memberof": "packages/oo7/lib/bondCache.js~BondCache",
    "static": false,
    "longname": "packages/oo7/lib/bondCache.js~BondCache#sessionId",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 117,
    "kind": "member",
    "name": "storage",
    "memberof": "packages/oo7/lib/bondCache.js~BondCache",
    "static": false,
    "longname": "packages/oo7/lib/bondCache.js~BondCache#storage",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 119,
    "kind": "method",
    "name": "initialise",
    "memberof": "packages/oo7/lib/bondCache.js~BondCache",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/oo7/lib/bondCache.js~BondCache#initialise",
    "access": "public",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "params": [
      {
        "name": "uuid",
        "types": [
          "*"
        ]
      },
      {
        "name": "bond",
        "types": [
          "*"
        ]
      },
      {
        "name": "stringify",
        "types": [
          "*"
        ]
      },
      {
        "name": "parse",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 120,
    "kind": "method",
    "name": "checkConsistency",
    "memberof": "packages/oo7/lib/bondCache.js~BondCache",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/oo7/lib/bondCache.js~BondCache#checkConsistency",
    "access": "public",
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 121,
    "kind": "method",
    "name": "changed",
    "memberof": "packages/oo7/lib/bondCache.js~BondCache",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/oo7/lib/bondCache.js~BondCache#changed",
    "access": "public",
    "description": null,
    "lineNumber": 103,
    "undocument": true,
    "params": [
      {
        "name": "uuid",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 122,
    "kind": "method",
    "name": "finalise",
    "memberof": "packages/oo7/lib/bondCache.js~BondCache",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/oo7/lib/bondCache.js~BondCache#finalise",
    "access": "public",
    "description": null,
    "lineNumber": 119,
    "undocument": true,
    "params": [
      {
        "name": "uuid",
        "types": [
          "*"
        ]
      },
      {
        "name": "bond",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 123,
    "kind": "method",
    "name": "ensureActive",
    "memberof": "packages/oo7/lib/bondCache.js~BondCache",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/oo7/lib/bondCache.js~BondCache#ensureActive",
    "access": "public",
    "description": null,
    "lineNumber": 176,
    "undocument": true,
    "params": [
      {
        "name": "uuid",
        "types": [
          "*"
        ]
      },
      {
        "name": "key",
        "optional": true,
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 124,
    "kind": "method",
    "name": "reconstruct",
    "memberof": "packages/oo7/lib/bondCache.js~BondCache",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/oo7/lib/bondCache.js~BondCache#reconstruct",
    "access": "public",
    "description": null,
    "lineNumber": 212,
    "undocument": true,
    "params": [
      {
        "name": "updateMessage",
        "types": [
          "*"
        ]
      },
      {
        "name": "bond",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 125,
    "kind": "method",
    "name": "onMessage",
    "memberof": "packages/oo7/lib/bondCache.js~BondCache",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/oo7/lib/bondCache.js~BondCache#onMessage",
    "access": "public",
    "description": null,
    "lineNumber": 219,
    "undocument": true,
    "params": [
      {
        "name": "e",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 126,
    "kind": "method",
    "name": "onStorageChanged",
    "memberof": "packages/oo7/lib/bondCache.js~BondCache",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/oo7/lib/bondCache.js~BondCache#onStorageChanged",
    "access": "public",
    "description": null,
    "lineNumber": 244,
    "undocument": true,
    "params": [
      {
        "name": "e",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 127,
    "kind": "method",
    "name": "onUnload",
    "memberof": "packages/oo7/lib/bondCache.js~BondCache",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/oo7/lib/bondCache.js~BondCache#onUnload",
    "access": "public",
    "description": null,
    "lineNumber": 268,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 129,
    "kind": "file",
    "name": "packages/oo7/lib/bondProxy.js",
    "content": "// (C) Copyright 2016-2017 Parity Technologies (UK) Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//         http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// The parent-side cache-server to which child-side BondCaches can connect.\n// Will send messages of the form { bondCacheUpdate: { uuid: '...', value: ... }}\n// value, if provided is the actual Bond value, not a stringification of it.\n// Will try to send these only for UUIDs that it knows the child is interested\n// in - child can register interest with a message { useBond: uuid } and\n// unregister interest with { dropBond: uuid }.\n//\n// If you construct BondCache passing a deferParentPrefix arg, then it's up to\n// you to ensure that the parent actually has a BondCacheProxy constructed. If\n// it doesn't, things will go screwy.\n\nlet consoleDebug = typeof window !== 'undefined' && window.debugging ? console.debug : () => {};\n\n// Prepare value `v` for being sent over `window.postMessage`.\nfunction prepUpdate (uuid, bond) {\n\tlet value = bond.isReady() ? bond._value : undefined;\n\n\tif (typeof value === 'object' && value !== null && bond._stringify) {\n\t\treturn { uuid, valueString: bond._stringify(value) };\n\t}\n\n\treturn { uuid, value };\n}\n\nclass BondProxy {\n\tconstructor (deferParentPrefix, fromUuid, surrogateWindow = null) {\n\t\tthis.bonds = {};\n\t\tthis.deferParentPrefix = deferParentPrefix;\n\t\tthis.fromUuid = fromUuid;\n\t\tthis.window = surrogateWindow || (typeof window === 'undefined' ? null : window);\n\n\t\t// set up listener so that we get notified by our child.\n\t\tthis.window.addEventListener('message', this.onMessage.bind(this));\n\t}\n\n\tonMessage (e) {\n\t\tif (e.source.parent !== this.window) {\n\t\t\tconsole.warn(`BondProxy.onMessage: Unknown client at ${e.origin} attempting to message proxy with ${e.data}. Ignoring.`);\n\t\t\treturn;\n\t\t}\n\t\tif (typeof e.data === 'object' && e.data !== null) {\n\t\t\tconsoleDebug('BondProxy.onMessage: Received message from child: ', e.data);\n\t\t\tif (e.data.helloBondProxy) {\n\t\t\t\te.source.postMessage({ bondProxyInfo: { deferParentPrefix: this.deferParentPrefix } }, '*');\n\t\t\t} else if (typeof e.data.useBond === 'string') {\n\t\t\t\tlet uuid = e.data.useBond;\n\t\t\t\tlet entry = this.bonds[uuid];\n\t\t\t\tconsoleDebug('BondProxy.onMessage: useBond ', uuid, entry);\n\t\t\t\tif (entry) {\n\t\t\t\t\t// already here - increase refs.\n\t\t\t\t\tif (entry.users.indexOf(e.source) !== -1) {\n\t\t\t\t\t\tconsole.warn(`BondProxy.onMessage: Source using UUID ${uuid} more than once.`);\n\t\t\t\t\t}\n\t\t\t\t\tconsoleDebug('BondProxy.onMessage: Another user');\n\t\t\t\t\tentry.users.push(e.source);\n\t\t\t\t} else {\n\t\t\t\t\t// create it.\n\t\t\t\t\tlet newBond = this.fromUuid(uuid);\n\t\t\t\t\tif (newBond) {\n\t\t\t\t\t\tconsoleDebug('BondProxy.onMessage: Creating new bond');\n\t\t\t\t\t\tentry = this.bonds[uuid] = { bond: newBond, users: [e.source] };\n\t\t\t\t\t\tentry.notifyKey = newBond.notify(() => {\n\t\t\t\t\t\t\tlet bondCacheUpdate = prepUpdate(uuid, newBond);\n\t\t\t\t\t\t\tconsoleDebug('BondProxy.onMessage: Bond changed. Updating child:', bondCacheUpdate);\n\t\t\t\t\t\t\tentry.users.forEach(u =>\n\t\t\t\t\t\t\t\tu.postMessage({ bondCacheUpdate }, '*')\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn(`BondProxy.onMessage: UUID ${uuid} is unknown - cannot create a Bond for it.`);\n\t\t\t\t\t\te.source.postMessage({ bondUnknown: { uuid } }, '*');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tlet bondCacheUpdate = prepUpdate(uuid, entry.bond);\n\t\t\t\tconsoleDebug('BondProxy.onMessage: Posting update back to child', bondCacheUpdate);\n\t\t\t\te.source.postMessage({ bondCacheUpdate }, '*');\n\t\t\t} else if (typeof e.data.dropBond === 'string') {\n\t\t\t\tlet uuid = e.data.dropBond;\n\t\t\t\tlet entry = this.bonds[uuid];\n\t\t\t\tconsoleDebug('BondProxy.onMessage: dropBond ', uuid, entry);\n\t\t\t\tif (entry) {\n\t\t\t\t\tlet i = entry.users.indexOf(e.source);\n\t\t\t\t\tif (i !== -1) {\n\t\t\t\t\t\tconsoleDebug('BondProxy.onMessage: Removing child from updates list');\n\t\t\t\t\t\tentry.users.splice(i, 1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn(`BondProxy.onMessage: Source asking to drop UUID ${uuid} that they do not track. They probably weren't getting updates.`);\n\t\t\t\t\t}\n\t\t\t\t\tif (entry.users.length === 0) {\n\t\t\t\t\t\tconsoleDebug('BondProxy.onMessage: No users - retiring bond');\n\t\t\t\t\t\tentry.bond.unnotify(entry.notifyKey);\n\t\t\t\t\t\tdelete this.bonds[uuid];\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn(`BondProxy.onMessage: Cannot drop a Bond (${uuid}) that we do not track.`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nmodule.exports = BondProxy;\n",
    "static": true,
    "longname": "/home/tomusdrw/workspace/oo7-new/packages/oo7/lib/bondProxy.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 130,
    "kind": "variable",
    "name": "consoleDebug",
    "memberof": "packages/oo7/lib/bondProxy.js",
    "static": true,
    "longname": "packages/oo7/lib/bondProxy.js~consoleDebug",
    "access": "public",
    "export": false,
    "importPath": "./packages/oo7/lib/bondProxy.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 131,
    "kind": "function",
    "name": "prepUpdate",
    "memberof": "packages/oo7/lib/bondProxy.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/oo7/lib/bondProxy.js~prepUpdate",
    "access": "public",
    "export": false,
    "importPath": "./packages/oo7/lib/bondProxy.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "params": [
      {
        "name": "uuid",
        "types": [
          "*"
        ]
      },
      {
        "name": "bond",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"uuid\": *, \"value\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 132,
    "kind": "class",
    "name": "BondProxy",
    "memberof": "packages/oo7/lib/bondProxy.js",
    "static": true,
    "longname": "packages/oo7/lib/bondProxy.js~BondProxy",
    "access": "public",
    "export": true,
    "importPath": "./packages/oo7/lib/bondProxy.js",
    "importStyle": "BondProxy",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 133,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/oo7/lib/bondProxy.js~BondProxy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/oo7/lib/bondProxy.js~BondProxy#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true
  },
  {
    "__docId__": 134,
    "kind": "member",
    "name": "bonds",
    "memberof": "packages/oo7/lib/bondProxy.js~BondProxy",
    "static": false,
    "longname": "packages/oo7/lib/bondProxy.js~BondProxy#bonds",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 135,
    "kind": "member",
    "name": "deferParentPrefix",
    "memberof": "packages/oo7/lib/bondProxy.js~BondProxy",
    "static": false,
    "longname": "packages/oo7/lib/bondProxy.js~BondProxy#deferParentPrefix",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 136,
    "kind": "member",
    "name": "fromUuid",
    "memberof": "packages/oo7/lib/bondProxy.js~BondProxy",
    "static": false,
    "longname": "packages/oo7/lib/bondProxy.js~BondProxy#fromUuid",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 137,
    "kind": "member",
    "name": "window",
    "memberof": "packages/oo7/lib/bondProxy.js~BondProxy",
    "static": false,
    "longname": "packages/oo7/lib/bondProxy.js~BondProxy#window",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 138,
    "kind": "method",
    "name": "onMessage",
    "memberof": "packages/oo7/lib/bondProxy.js~BondProxy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/oo7/lib/bondProxy.js~BondProxy#onMessage",
    "access": "public",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "params": [
      {
        "name": "e",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 139,
    "kind": "file",
    "name": "packages/oo7/lib/index.js",
    "content": "// (C) Copyright 2016-2017 Parity Technologies (UK) Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//         http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nconst Bond = require('./bond');\nconst BondCache = require('./bondCache');\nconst BondProxy = require('./bondProxy');\nconst ReactiveBond = require('./reactiveBond');\nconst ReactivePromise = require('./reactivePromise');\nconst TimeBond = require('./timeBond');\nconst TransformBond = require('./transformBond');\n\nmodule.exports = {\n\tBond,\n\tBondCache,\n\tBondProxy,\n\tReactiveBond,\n\tReactivePromise,\n\tTimeBond,\n\tTransformBond\n};\n",
    "static": true,
    "longname": "/home/tomusdrw/workspace/oo7-new/packages/oo7/lib/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 140,
    "kind": "file",
    "name": "packages/oo7/lib/notReadyBond.js",
    "content": "// (C) Copyright 2016-2017 Parity Technologies (UK) Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//         http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nconst Bond = require('./bond');\n\n/**\n * Derivative {@link Bond} representing the non-readiness of another {@link Bond}.\n */\nclass NotReadyBond extends Bond {\n\tconstructor (targetBond) {\n\t\tsuper(false);\n\n\t\tthis._poll = () => this.changed(!targetBond._ready);\n\t\tthis._targetBond = targetBond;\n\t}\n\n\tinitialise () {\n\t\tthis._notifyId = this._targetBond.notify(this._poll);\n\t\tthis._poll();\n\t}\n\n\tfinalise () {\n\t\tthis._targetBond.unnotify(this._notifyId);\n\t}\n}\n\nmodule.exports = NotReadyBond;\n",
    "static": true,
    "longname": "/home/tomusdrw/workspace/oo7-new/packages/oo7/lib/notReadyBond.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 141,
    "kind": "class",
    "name": "NotReadyBond",
    "memberof": "packages/oo7/lib/notReadyBond.js",
    "static": true,
    "longname": "packages/oo7/lib/notReadyBond.js~NotReadyBond",
    "access": "public",
    "export": true,
    "importPath": "./packages/oo7/lib/notReadyBond.js",
    "importStyle": "NotReadyBond",
    "description": "Derivative {@link Bond} representing the non-readiness of another {@link Bond}.",
    "lineNumber": 20,
    "interface": false,
    "extends": [
      "packages/oo7/lib/bond.js~Bond"
    ]
  },
  {
    "__docId__": 142,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/oo7/lib/notReadyBond.js~NotReadyBond",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/oo7/lib/notReadyBond.js~NotReadyBond#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true
  },
  {
    "__docId__": 143,
    "kind": "member",
    "name": "_poll",
    "memberof": "packages/oo7/lib/notReadyBond.js~NotReadyBond",
    "static": false,
    "longname": "packages/oo7/lib/notReadyBond.js~NotReadyBond#_poll",
    "access": "private",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 144,
    "kind": "member",
    "name": "_targetBond",
    "memberof": "packages/oo7/lib/notReadyBond.js~NotReadyBond",
    "static": false,
    "longname": "packages/oo7/lib/notReadyBond.js~NotReadyBond#_targetBond",
    "access": "private",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 145,
    "kind": "method",
    "name": "initialise",
    "memberof": "packages/oo7/lib/notReadyBond.js~NotReadyBond",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/oo7/lib/notReadyBond.js~NotReadyBond#initialise",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 146,
    "kind": "member",
    "name": "_notifyId",
    "memberof": "packages/oo7/lib/notReadyBond.js~NotReadyBond",
    "static": false,
    "longname": "packages/oo7/lib/notReadyBond.js~NotReadyBond#_notifyId",
    "access": "private",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 147,
    "kind": "method",
    "name": "finalise",
    "memberof": "packages/oo7/lib/notReadyBond.js~NotReadyBond",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/oo7/lib/notReadyBond.js~NotReadyBond#finalise",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 148,
    "kind": "file",
    "name": "packages/oo7/lib/reactiveBond.js",
    "content": "// (C) Copyright 2016-2017 Parity Technologies (UK) Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//         http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nconst Bond = require('./bond');\n\n/* Determines whether a `resolvable` value is actually resolved.\n * If true, then `resolvable` is not an unready {@link Bond} or\n * a {@link Promise}, nor is a possibly recursive structure that contains such\n * a thing up to a depth `depthLeft` into it.\n */\nfunction isReady (resolvable, depthLeft) {\n\tif (typeof (resolvable) === 'object' && resolvable !== null) {\n\t\tif (Bond.instanceOf(resolvable)) { return resolvable._ready; } else if (resolvable instanceof Promise) { return typeof (resolvable._value) !== 'undefined'; } else if (depthLeft > 0 && resolvable.constructor === Array) { return resolvable.every(index => isReady(index, depthLeft - 1)); } else if (depthLeft > 0 && resolvable.constructor === Object) {\n\t\t\treturn Object.keys(resolvable).every(key =>\n\t\t\t\tisReady(resolvable[key], depthLeft - 1)\n\t\t\t);\n\t\t} else { return true; }\n\t} else { return true; }\n}\n\n/* Determines whether a `value` is an array which has at least one item which is\n * either a {@link Bond} or a {@link Promise}, or, if `depthLeft` is greater\n * than 1, another array or object. Returns `false` if `depthLeft` is zero.\n */\nfunction isArrayWithNonPlainItems (array, depthLeft) {\n\treturn depthLeft > 0 &&\n\t\tarray.constructor === Array &&\n\t\t(\n\t\t\t(depthLeft === 1 && array.findIndex(item =>\n\t\t\t\tBond.instanceOf(item) ||\n\t\t\t\titem instanceof Promise\n\t\t\t) !== -1)\t\t||\n\t\t\t(depthLeft > 1 && array.findIndex(item =>\n\t\t\t\tBond.instanceOf(item) ||\n\t\t\t\titem instanceof Promise ||\n\t\t\t\titem instanceof Array ||\n\t\t\t\titem instanceof Object\n\t\t\t) !== -1)\n\t\t);\n}\n\n/* Determines whether a `value` is an object which has at least one item which is\n * either a {@link Bond} or a {@link Promise}, or, if `depthLeft` is greater\n * than 1, another array or object. Returns `false` if `depthLeft` is zero.\n */\nfunction isObjectWithNonPlainItems (object, depthLeft) {\n\treturn depthLeft > 0 &&\n\t\tobject.constructor === Object &&\n\t\t(\n\t\t\t(depthLeft === 1 && Object.keys(object).findIndex(item =>\n\t\t\t\tBond.instanceOf(object[item]) ||\n\t\t\t\tobject[item] instanceof Promise\n\t\t\t) !== -1)\t\t||\n\t\t\t(depthLeft > 1 && Object.keys(object).findIndex(item =>\n\t\t\t\tBond.instanceOf(object[item]) ||\n\t\t\t\tobject[item] instanceof Promise ||\n\t\t\t\tobject[item] instanceof Array ||\n\t\t\t\tobject[item] instanceof Object\n\t\t\t) !== -1)\n\t\t);\n}\n\n/* Returns the value represented by `resolvable`, resolving Bonds and\n * Promises as necessary up to a depth of `depthLeft`.\n */\nfunction resolved (resolvable, depthLeft) {\n\t/* if (!isReady(resolvable, depthLeft)) {\n\t\tthrow `Internal error: Unready value being resolved`;\n\t} */\n//\tconsole.log(`resolvable info: ${resolvable} ${typeof(resolvable)} ${resolvable.constructor.name} ${JSON.stringify(resolvable)}; depthLeft: ${depthLeft}`);\n\tif (typeof (resolvable) === 'object' && resolvable !== null) {\n\t\tif (Bond.instanceOf(resolvable)) {\n\t\t\tif (resolvable._ready !== true) {\n\t\t\t\tthrow new Error(`Internal error: Unready Bond being resolved`);\n\t\t\t}\n\t\t\tif (typeof (resolvable._value) === 'undefined') {\n\t\t\t\tthrow new Error(`Internal error: Ready Bond with undefined value in resolved`);\n\t\t\t}\n\t\t\t//\t\t\tconsole.log(`Bond: ${JSON.stringify(resolvable._value)}}`);\n\t\t\treturn resolvable._value;\n\t\t} else if (resolvable instanceof Promise) {\n\t\t\tif (typeof (resolvable._value) === 'undefined') {\n\t\t\t\tthrow new Error(`Internal error: Ready Promise has undefined value`);\n\t\t\t}\n\t\t\t//\t\t\tconsole.log(`Promise: ${JSON.stringify(resolvable._value)}}`);\n\t\t\treturn resolvable._value;\n\t\t} else if (isArrayWithNonPlainItems(resolvable, depthLeft)) {\n\t\t\t//\t\t\tconsole.log(`Deep array...`);\n\t\t\treturn resolvable.slice().map(item =>\n\t\t\t\tresolved(item, depthLeft - 1)\n\t\t\t);\n\t\t} else if (isObjectWithNonPlainItems(resolvable, depthLeft)) {\n\t\t\tvar result = {};\n\t\t\t//\t\t\tconsole.log(`Deep object...`);\n\t\t\tObject.keys(resolvable).forEach(key => {\n\t\t\t\tresult[key] = resolved(resolvable[key], depthLeft - 1);\n\t\t\t});\n\t\t\t//\t\t\tconsole.log(`...Deep object: ${JSON.stringify(o)}`);\n\t\t\treturn result;\n\t\t} else {\n\t\t\t//\t\t\tconsole.log(`Shallow object.`);\n\t\t\treturn resolvable;\n\t\t}\n\t} else {\n\t\t//\t\tconsole.log(`Basic value.`);\n\t\treturn resolvable;\n\t}\n}\n\n/* Recurses up to `depthLeft` levels into the possibly deep structure\n * `resolvable`, placing a notify callback `callback` onto any `Bond`s found\n * and a then callback `callback` onto any `Promise`s found.\n * All resultant identifiers for the `notify` callbacks are added to `notifyKeys`s in\n * depth-first order of traveral of the possible deep structure `resolvable`.\n *\n * Returns `true` if there were any `Bond`s or `Promise`s encountered.\n */\nfunction deepNotify (resolvable, callback, notifyKeys, depthLeft) {\n//\tconsole.log(`Setitng up deep notification on object: ${JSON.stringify(resolvable)} - ${typeof(resolvable)}/${resolvable === null}/${resolvable.constructor.name} (depthLeft: ${depthLeft})`);\n\tif (typeof (resolvable) === 'object' && resolvable !== null) {\n\t\tif (Bond.instanceOf(resolvable)) {\n\t\t\tnotifyKeys.push(resolvable.notify(callback));\n\t\t\treturn true;\n\t\t} else if (resolvable instanceof Promise) {\n\t\t\tresolvable.then(resolved => {\n\t\t\t\tresolvable._value = resolved;\n\t\t\t\tcallback();\n\t\t\t});\n\t\t\treturn true;\n\t\t} else if (isArrayWithNonPlainItems(resolvable, depthLeft)) {\n\t\t\tlet result = false;\n\t\t\tresolvable.forEach(item => {\n\t\t\t\tresult = deepNotify(item, callback, notifyKeys, depthLeft - 1) || result;\n\t\t\t});\n\t\t\treturn result;\n\t\t} else if (isObjectWithNonPlainItems(resolvable, depthLeft)) {\n\t\t\tlet result = false;\n\t\t\tObject.keys(resolvable).forEach(key => {\n\t\t\t\tresult = deepNotify(resolvable[key], callback, notifyKeys, depthLeft - 1) || result;\n\t\t\t});\n\t\t\treturn result;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t} else {\n\t\treturn false;\n\t}\n}\n\n/* Recurses up to `depthLeft` levels into the possibly deep structure\n * `resolvable`, placing an unnotify call onto any `Bond`s found, using\n * `notifyKeys` as the depth-first sequence of notify key identifiers.\n */\nfunction deepUnnotify (resolvable, notifyKeys, depthLeft) {\n\tif (typeof (resolvable) === 'object' && resolvable !== null) {\n\t\tif (Bond.instanceOf(resolvable)) {\n\t\t\tresolvable.unnotify(notifyKeys.shift());\n\t\t\treturn true;\n\t\t} else if (isArrayWithNonPlainItems(resolvable, depthLeft)) {\n\t\t\tlet result = false;\n\t\t\tresolvable.forEach(item => {\n\t\t\t\tresult = deepUnnotify(item, notifyKeys, depthLeft - 1) || result;\n\t\t\t});\n\t\t\treturn result;\n\t\t} else if (isObjectWithNonPlainItems(resolvable, depthLeft)) {\n\t\t\tlet result = false;\n\t\t\tObject.keys(resolvable).forEach(key => {\n\t\t\t\tresult = deepUnnotify(resolvable[key], notifyKeys, depthLeft - 1) || result;\n\t\t\t});\n\t\t\treturn result;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t} else {\n\t\treturn false;\n\t}\n}\n\n/**\n * @summary A {@link Bond} which retains dependencies on other {@link Bond}s.\n * @description This inherits from the {@link Bond} class, providing its full API,\n * but also allows for dependencies to other `Bond`s to be registered. When\n * any dependency changes value (or _readiness_), a callback is executed and\n * is passed the new set of underlying values corresponding to each dependency.\n *\n * The callback is made if and only if this object is in use (i.e. {@link Bond#use}\n * or one of its dependents has been called).\n */\nclass ReactiveBond extends Bond {\n\t/**\n\t * Constructs a new object.\n\t *\n\t * @param {array} args - Each item that this object's representative value\n\t * is dependent upon, and which needs to be used by the callback function\n\t * (presumably to determine that value to be passed into {@link Bond#changed}).\n\t * @param {array} dependencies - {@link Bond}s or {Promise}s that the representative\n\t * value is dependent on, but which are not needed for passing into the\n\t * callback.\n\t * @param {function} execute - The callback function which is called when\n\t * any item of `args` or `deps` changes its underlying value. A value corresponding\n\t * to each item in `args` are passed to the callback:\n\t * items that are {@link Bond}s are resolved to the value they represent before\n\t * being passed into the callback `execute` function. {Promise} objects are\n\t * likewise resolved for their underlying value. Structures such as arrays\n\t * and objects are traversed recursively and likewise interpreted. Other\n\t * types are passed straight through.\n\t * The callback is only made when all items of `args` are considered _ready_.\n\t * @param {boolean} mayBeNull - Noramlly, `null` is a valid value for dependent `Bond`s\n\t * and `Promise`s to represent. Pass `false` here to disallow `null` to be\n\t * considered valid (and thus any `null` dependencies in `args` will mean that\n\t * dependency is considered not _ready_ and no callback will happen).\n\t * @defaultValue true\n\t * @param {number} resolveDepth - The maximum number of times to recurse into\n\t * arrays or objects of `args` items in searching for {@link Bond}s or {Promise}s\n\t * to resolve.\n\t * @defaultValue 1\n\t */\n\tconstructor (\n\t\targs,\n\t\tdependencies,\n\t\texecute,\n\t\tmayBeNull = true,\n\t\tresolveDepth = 1,\n\t\tcache = { id: null, stringify: JSON.stringify, parse: JSON.parse }\n\t) {\n\t\tsuper(mayBeNull, cache);\n\n\t\tthis._execute = (execute ? typeof execute === 'object' ? execute.ready : execute : this.changed).bind(this);\n\t\tthis._executeReset = (execute && typeof execute === 'object' ? execute.reset : this.reset).bind(this);\n\t\tthis._active = false;\n\t\tthis._dependencies = dependencies.slice();\n\t\tthis._args = args.slice();\n\t\tthis._resolveDepth = resolveDepth;\n\t}\n\n\t_notified () {\n\t\t//\t\tconsole.log(`Polling ReactiveBond with resolveDepth ${resolveDepth}`);\n\t\tif (this._args.every(item => isReady(item, this._resolveDepth))) {\n\t\t\t//\t\t\tconsole.log(`poll: All dependencies good...`, a, resolveDepth);\n\t\t\tlet resolvedArgs = this._args.map(argument =>\n\t\t\t\tresolved(argument, this._resolveDepth)\n\t\t\t);\n\t\t\t//\t\t\tconsole.log(`poll: Mapped dependencies:`, am);\n\t\t\tthis._execute(resolvedArgs);\n\t\t} else {\n\t\t\t//\t\t\tconsole.log(\"poll: One or more dependencies undefined\");\n\t\t\tthis._executeReset();\n\t\t}\n\t}\n\n\t// TODO: implement isDone.\n\tinitialise () {\n\t\t//\t\tconsole.log(`Initialising ReactiveBond for resolveDepth ${this.resolveDepth}`);\n\t\tthis._notifyKeys = [];\n\t\tthis._dependencies.forEach(dependency =>\n\t\t\tthis._notifyKeys.push(dependency.notify(this._notified.bind(this)))\n\t\t);\n\n\t\t// true if any of our args are/contain Bonds/Promises.\n\t\tvar active = false;\n\t\tthis._args.forEach(argument => {\n\t\t\tif (deepNotify(\n\t\t\t\targument,\n\t\t\t\tthis._notified.bind(this),\n\t\t\t\tthis._notifyKeys,\n\t\t\t\tthis._resolveDepth\n\t\t\t)) {\n\t\t\t\tactive = true;\n\t\t\t}\n\t\t});\n\n\t\t// no active args, no dependencies - nothing will happen. make the\n\t\t// _notified call now.\n\t\tif (!active && this._dependencies.length === 0) {\n\t\t\tthis._notified();\n\t\t}\n\t}\n\n\tfinalise () {\n\t\t//\t\tconsole.log(`Finalising ReactiveBond with resolveDepth ${this.resolveDepth}`);\n\t\tthis._dependencies.forEach(dependency =>\n\t\t\tdependency.unnotify(this._notifyKeys.shift())\n\t\t);\n\t\tthis._args.forEach(argument =>\n\t\t\tdeepUnnotify(argument, this._notifyKeys, this._resolveDepth)\n\t\t);\n\t}\n}\n\nmodule.exports = ReactiveBond;\n",
    "static": true,
    "longname": "/home/tomusdrw/workspace/oo7-new/packages/oo7/lib/reactiveBond.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 149,
    "kind": "function",
    "name": "isReady",
    "memberof": "packages/oo7/lib/reactiveBond.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/oo7/lib/reactiveBond.js~isReady",
    "access": "public",
    "export": false,
    "importPath": "./packages/oo7/lib/reactiveBond.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [
      {
        "name": "resolvable",
        "types": [
          "*"
        ]
      },
      {
        "name": "depthLeft",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 150,
    "kind": "function",
    "name": "isArrayWithNonPlainItems",
    "memberof": "packages/oo7/lib/reactiveBond.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/oo7/lib/reactiveBond.js~isArrayWithNonPlainItems",
    "access": "public",
    "export": false,
    "importPath": "./packages/oo7/lib/reactiveBond.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "params": [
      {
        "name": "array",
        "types": [
          "*"
        ]
      },
      {
        "name": "depthLeft",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 151,
    "kind": "function",
    "name": "isObjectWithNonPlainItems",
    "memberof": "packages/oo7/lib/reactiveBond.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/oo7/lib/reactiveBond.js~isObjectWithNonPlainItems",
    "access": "public",
    "export": false,
    "importPath": "./packages/oo7/lib/reactiveBond.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "params": [
      {
        "name": "object",
        "types": [
          "*"
        ]
      },
      {
        "name": "depthLeft",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 152,
    "kind": "function",
    "name": "resolved",
    "memberof": "packages/oo7/lib/reactiveBond.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/oo7/lib/reactiveBond.js~resolved",
    "access": "public",
    "export": false,
    "importPath": "./packages/oo7/lib/reactiveBond.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "params": [
      {
        "name": "resolvable",
        "types": [
          "*"
        ]
      },
      {
        "name": "depthLeft",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 153,
    "kind": "function",
    "name": "deepNotify",
    "memberof": "packages/oo7/lib/reactiveBond.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/oo7/lib/reactiveBond.js~deepNotify",
    "access": "public",
    "export": false,
    "importPath": "./packages/oo7/lib/reactiveBond.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 129,
    "undocument": true,
    "params": [
      {
        "name": "resolvable",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      },
      {
        "name": "notifyKeys",
        "types": [
          "*"
        ]
      },
      {
        "name": "depthLeft",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 154,
    "kind": "function",
    "name": "deepUnnotify",
    "memberof": "packages/oo7/lib/reactiveBond.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/oo7/lib/reactiveBond.js~deepUnnotify",
    "access": "public",
    "export": false,
    "importPath": "./packages/oo7/lib/reactiveBond.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 165,
    "undocument": true,
    "params": [
      {
        "name": "resolvable",
        "types": [
          "*"
        ]
      },
      {
        "name": "notifyKeys",
        "types": [
          "*"
        ]
      },
      {
        "name": "depthLeft",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 155,
    "kind": "class",
    "name": "ReactiveBond",
    "memberof": "packages/oo7/lib/reactiveBond.js",
    "static": true,
    "longname": "packages/oo7/lib/reactiveBond.js~ReactiveBond",
    "access": "public",
    "export": true,
    "importPath": "./packages/oo7/lib/reactiveBond.js",
    "importStyle": "ReactiveBond",
    "description": "",
    "lineNumber": 200,
    "unknown": [
      {
        "tagName": "@summary",
        "tagValue": "A {@link Bond} which retains dependencies on other {@link Bond}s."
      },
      {
        "tagName": "@description",
        "tagValue": "This inherits from the {@link Bond} class, providing its full API,\nbut also allows for dependencies to other `Bond`s to be registered. When\nany dependency changes value (or _readiness_), a callback is executed and\nis passed the new set of underlying values corresponding to each dependency.\n\nThe callback is made if and only if this object is in use (i.e. {@link Bond#use}\nor one of its dependents has been called)."
      }
    ],
    "interface": false,
    "extends": [
      "packages/oo7/lib/bond.js~Bond"
    ]
  },
  {
    "__docId__": 156,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/oo7/lib/reactiveBond.js~ReactiveBond",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/oo7/lib/reactiveBond.js~ReactiveBond#constructor",
    "access": "public",
    "description": "Constructs a new object.",
    "lineNumber": 229,
    "unknown": [
      {
        "tagName": "@defaultValue",
        "tagValue": "true"
      },
      {
        "tagName": "@defaultValue",
        "tagValue": "1"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": "Each item that this object's representative value\nis dependent upon, and which needs to be used by the callback function\n(presumably to determine that value to be passed into {@link Bond#changed})."
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "dependencies",
        "description": "{@link Bond}s or {Promise}s that the representative\nvalue is dependent on, but which are not needed for passing into the\ncallback."
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "execute",
        "description": "The callback function which is called when\nany item of `args` or `deps` changes its underlying value. A value corresponding\nto each item in `args` are passed to the callback:\nitems that are {@link Bond}s are resolved to the value they represent before\nbeing passed into the callback `execute` function. {Promise} objects are\nlikewise resolved for their underlying value. Structures such as arrays\nand objects are traversed recursively and likewise interpreted. Other\ntypes are passed straight through.\nThe callback is only made when all items of `args` are considered _ready_."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "mayBeNull",
        "description": "Noramlly, `null` is a valid value for dependent `Bond`s\nand `Promise`s to represent. Pass `false` here to disallow `null` to be\nconsidered valid (and thus any `null` dependencies in `args` will mean that\ndependency is considered not _ready_ and no callback will happen)."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "resolveDepth",
        "description": "The maximum number of times to recurse into\narrays or objects of `args` items in searching for {@link Bond}s or {Promise}s\nto resolve."
      }
    ]
  },
  {
    "__docId__": 157,
    "kind": "member",
    "name": "_execute",
    "memberof": "packages/oo7/lib/reactiveBond.js~ReactiveBond",
    "static": false,
    "longname": "packages/oo7/lib/reactiveBond.js~ReactiveBond#_execute",
    "access": "private",
    "description": null,
    "lineNumber": 239,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 158,
    "kind": "member",
    "name": "_executeReset",
    "memberof": "packages/oo7/lib/reactiveBond.js~ReactiveBond",
    "static": false,
    "longname": "packages/oo7/lib/reactiveBond.js~ReactiveBond#_executeReset",
    "access": "private",
    "description": null,
    "lineNumber": 240,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 159,
    "kind": "member",
    "name": "_active",
    "memberof": "packages/oo7/lib/reactiveBond.js~ReactiveBond",
    "static": false,
    "longname": "packages/oo7/lib/reactiveBond.js~ReactiveBond#_active",
    "access": "private",
    "description": null,
    "lineNumber": 241,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 160,
    "kind": "member",
    "name": "_dependencies",
    "memberof": "packages/oo7/lib/reactiveBond.js~ReactiveBond",
    "static": false,
    "longname": "packages/oo7/lib/reactiveBond.js~ReactiveBond#_dependencies",
    "access": "private",
    "description": null,
    "lineNumber": 242,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 161,
    "kind": "member",
    "name": "_args",
    "memberof": "packages/oo7/lib/reactiveBond.js~ReactiveBond",
    "static": false,
    "longname": "packages/oo7/lib/reactiveBond.js~ReactiveBond#_args",
    "access": "private",
    "description": null,
    "lineNumber": 243,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 162,
    "kind": "member",
    "name": "_resolveDepth",
    "memberof": "packages/oo7/lib/reactiveBond.js~ReactiveBond",
    "static": false,
    "longname": "packages/oo7/lib/reactiveBond.js~ReactiveBond#_resolveDepth",
    "access": "private",
    "description": null,
    "lineNumber": 244,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 163,
    "kind": "method",
    "name": "_notified",
    "memberof": "packages/oo7/lib/reactiveBond.js~ReactiveBond",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/oo7/lib/reactiveBond.js~ReactiveBond#_notified",
    "access": "private",
    "description": null,
    "lineNumber": 247,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 164,
    "kind": "method",
    "name": "initialise",
    "memberof": "packages/oo7/lib/reactiveBond.js~ReactiveBond",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/oo7/lib/reactiveBond.js~ReactiveBond#initialise",
    "access": "public",
    "description": null,
    "lineNumber": 263,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 165,
    "kind": "member",
    "name": "_notifyKeys",
    "memberof": "packages/oo7/lib/reactiveBond.js~ReactiveBond",
    "static": false,
    "longname": "packages/oo7/lib/reactiveBond.js~ReactiveBond#_notifyKeys",
    "access": "private",
    "description": null,
    "lineNumber": 265,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 166,
    "kind": "method",
    "name": "finalise",
    "memberof": "packages/oo7/lib/reactiveBond.js~ReactiveBond",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/oo7/lib/reactiveBond.js~ReactiveBond#finalise",
    "access": "public",
    "description": null,
    "lineNumber": 290,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 167,
    "kind": "file",
    "name": "packages/oo7/lib/reactivePromise.js",
    "content": "// (C) Copyright 2016-2017 Parity Technologies (UK) Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//         http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nconst ReactiveBond = require('./reactiveBond');\n\n// Exactly like ReactiveBond, except only calls `execute` once. Further changes\n// to members of `args` or `dependencies` have no effect.\nclass ReactivePromise extends ReactiveBond {\n\tconstructor (\n\t\targs,\n\t\tdependencies,\n\t\texecute = args => this.changed(args),\n\t\tmayBeNull = true,\n\t\tresolveDepth = 1,\n\t\tcache = { id: null, stringify: JSON.stringify, parse: JSON.parse }\n\t) {\n\t\tvar done = false;\n\t\tsuper(args, dependencies, resolvedArguments => {\n\t\t\tif (!done) {\n\t\t\t\tdone = true;\n\t\t\t\texecute.bind(this)(resolvedArguments);\n\t\t\t}\n\t\t}, mayBeNull, resolveDepth, cache);\n\t}\n}\n\nmodule.exports = ReactivePromise;\n",
    "static": true,
    "longname": "/home/tomusdrw/workspace/oo7-new/packages/oo7/lib/reactivePromise.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 168,
    "kind": "class",
    "name": "ReactivePromise",
    "memberof": "packages/oo7/lib/reactivePromise.js",
    "static": true,
    "longname": "packages/oo7/lib/reactivePromise.js~ReactivePromise",
    "access": "public",
    "export": true,
    "importPath": "./packages/oo7/lib/reactivePromise.js",
    "importStyle": "ReactivePromise",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "interface": false,
    "extends": [
      "packages/oo7/lib/reactiveBond.js~ReactiveBond"
    ]
  },
  {
    "__docId__": 169,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/oo7/lib/reactivePromise.js~ReactivePromise",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/oo7/lib/reactivePromise.js~ReactivePromise#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true
  },
  {
    "__docId__": 170,
    "kind": "file",
    "name": "packages/oo7/lib/readyBond.js",
    "content": "// (C) Copyright 2016-2017 Parity Technologies (UK) Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//         http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nconst Bond = require('./bond');\n\n/**\n * Derivative {@link Bond} representing the readiness of another {@link Bond}.\n */\nclass ReadyBond extends Bond {\n\tconstructor (targetBond) {\n\t\tsuper(false);\n\n\t\tthis._poll = () => this.changed(targetBond._ready);\n\t\tthis._targetBond = targetBond;\n\t}\n\n\tinitialise () {\n\t\tthis._notifyId = this._targetBond.notify(this._poll);\n\t\tthis._poll();\n\t}\n\n\tfinalise () {\n\t\tthis._targetBond.unnotify(this._notifyId);\n\t}\n}\n\nmodule.exports = ReadyBond;\n",
    "static": true,
    "longname": "/home/tomusdrw/workspace/oo7-new/packages/oo7/lib/readyBond.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 171,
    "kind": "class",
    "name": "ReadyBond",
    "memberof": "packages/oo7/lib/readyBond.js",
    "static": true,
    "longname": "packages/oo7/lib/readyBond.js~ReadyBond",
    "access": "public",
    "export": true,
    "importPath": "./packages/oo7/lib/readyBond.js",
    "importStyle": "ReadyBond",
    "description": "Derivative {@link Bond} representing the readiness of another {@link Bond}.",
    "lineNumber": 20,
    "interface": false,
    "extends": [
      "packages/oo7/lib/bond.js~Bond"
    ]
  },
  {
    "__docId__": 172,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/oo7/lib/readyBond.js~ReadyBond",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/oo7/lib/readyBond.js~ReadyBond#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true
  },
  {
    "__docId__": 173,
    "kind": "member",
    "name": "_poll",
    "memberof": "packages/oo7/lib/readyBond.js~ReadyBond",
    "static": false,
    "longname": "packages/oo7/lib/readyBond.js~ReadyBond#_poll",
    "access": "private",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 174,
    "kind": "member",
    "name": "_targetBond",
    "memberof": "packages/oo7/lib/readyBond.js~ReadyBond",
    "static": false,
    "longname": "packages/oo7/lib/readyBond.js~ReadyBond#_targetBond",
    "access": "private",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 175,
    "kind": "method",
    "name": "initialise",
    "memberof": "packages/oo7/lib/readyBond.js~ReadyBond",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/oo7/lib/readyBond.js~ReadyBond#initialise",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 176,
    "kind": "member",
    "name": "_notifyId",
    "memberof": "packages/oo7/lib/readyBond.js~ReadyBond",
    "static": false,
    "longname": "packages/oo7/lib/readyBond.js~ReadyBond#_notifyId",
    "access": "private",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 177,
    "kind": "method",
    "name": "finalise",
    "memberof": "packages/oo7/lib/readyBond.js~ReadyBond",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/oo7/lib/readyBond.js~ReadyBond#finalise",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 178,
    "kind": "file",
    "name": "packages/oo7/lib/timeBond.js",
    "content": "// (C) Copyright 2016-2017 Parity Technologies (UK) Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//         http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/* global setInterval,clearInterval */\n\nconst Bond = require('./bond');\n\nvar privateTestIntervals = {};\n\n/**\n * @summary {@link Bond} object which represents the current time rounded down\n * to the second.\n *\n * @example\n * let b = new TimeBond;\n * b.log(); // logs 1497080209000\n * window.setTimeout(() => b.log(), 1000); // logs 1497080210000\n */\nclass TimeBond extends Bond {\n\tconstructor () {\n\t\tsuper();\n\t\tthis.poll();\n\t}\n\tpoll () {\n\t\tthis.trigger(Math.floor(Date.now() / 1000) * 1000);\n\t}\n\tinitialise () {\n\t\tif (!TimeBond.useTestIntervals) {\n\t\t\tthis.interval = setInterval(this.poll.bind(this), 1000);\n\t\t} else {\n\t\t\tthis.interval = Object.keys(privateTestIntervals).length + 1;\n\t\t\tprivateTestIntervals[this.interval] = this.poll.bind(this);\n\t\t}\n\t}\n\tfinalise () {\n\t\tif (!TimeBond.useTestIntervals) {\n\t\t\tclearInterval(this.interval);\n\t\t} else {\n\t\t\tif (!privateTestIntervals[this.interval]) {\n\t\t\t\tthrow new Error(`finalise() called multiple time on same timer!`);\n\t\t\t}\n\t\t\tdelete privateTestIntervals[this.interval];\n\t\t}\n\t}\n\n\tstatic testIntervals () { return privateTestIntervals; }\n}\n\nTimeBond.useTestIntervals = false;\n\nmodule.exports = TimeBond;\n",
    "static": true,
    "longname": "/home/tomusdrw/workspace/oo7-new/packages/oo7/lib/timeBond.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 179,
    "kind": "variable",
    "name": "privateTestIntervals",
    "memberof": "packages/oo7/lib/timeBond.js",
    "static": true,
    "longname": "packages/oo7/lib/timeBond.js~privateTestIntervals",
    "access": "public",
    "export": false,
    "importPath": "./packages/oo7/lib/timeBond.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 180,
    "kind": "class",
    "name": "TimeBond",
    "memberof": "packages/oo7/lib/timeBond.js",
    "static": true,
    "longname": "packages/oo7/lib/timeBond.js~TimeBond",
    "access": "public",
    "export": true,
    "importPath": "./packages/oo7/lib/timeBond.js",
    "importStyle": "TimeBond",
    "description": "",
    "examples": [
      "let b = new TimeBond;\nb.log(); // logs 1497080209000\nwindow.setTimeout(() => b.log(), 1000); // logs 1497080210000"
    ],
    "lineNumber": 30,
    "unknown": [
      {
        "tagName": "@summary",
        "tagValue": "{@link Bond} object which represents the current time rounded down\nto the second."
      }
    ],
    "interface": false,
    "extends": [
      "packages/oo7/lib/bond.js~Bond"
    ]
  },
  {
    "__docId__": 181,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/oo7/lib/timeBond.js~TimeBond",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/oo7/lib/timeBond.js~TimeBond#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true
  },
  {
    "__docId__": 182,
    "kind": "method",
    "name": "poll",
    "memberof": "packages/oo7/lib/timeBond.js~TimeBond",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/oo7/lib/timeBond.js~TimeBond#poll",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 183,
    "kind": "method",
    "name": "initialise",
    "memberof": "packages/oo7/lib/timeBond.js~TimeBond",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/oo7/lib/timeBond.js~TimeBond#initialise",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 184,
    "kind": "member",
    "name": "interval",
    "memberof": "packages/oo7/lib/timeBond.js~TimeBond",
    "static": false,
    "longname": "packages/oo7/lib/timeBond.js~TimeBond#interval",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 186,
    "kind": "method",
    "name": "finalise",
    "memberof": "packages/oo7/lib/timeBond.js~TimeBond",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/oo7/lib/timeBond.js~TimeBond#finalise",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 187,
    "kind": "method",
    "name": "testIntervals",
    "memberof": "packages/oo7/lib/timeBond.js~TimeBond",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/oo7/lib/timeBond.js~TimeBond.testIntervals",
    "access": "public",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 188,
    "kind": "file",
    "name": "packages/oo7/lib/transformBond.js",
    "content": "// (C) Copyright 2016-2017 Parity Technologies (UK) Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//         http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nconst Bond = require('./bond');\nconst ReactiveBond = require('./reactiveBond');\n\nlet defaultContext = typeof (global.parity) === 'undefined' ? null : global.parity.api;\n\n/* Determines whether a `value` is not a {@link Bond} or\n * a {@link Promise}, nor a possibly recursive structure that contains such\n * a thing up to a depth `depthLeft` into it.\n */\nfunction isPlain (value, depthLeft) {\n\tif (typeof (value) !== 'object' || value === null) {\n\t\treturn true;\n\t}\n\n\tif (Bond.instanceOf(value)) {\n\t\treturn false;\n\t}\n\n\tif (value instanceof Promise) {\n\t\treturn false;\n\t}\n\n\tif (depthLeft > 0 && value.constructor === Array) {\n\t\treturn value.every(index => isPlain(index, depthLeft - 1));\n\t}\n\n\tif (depthLeft > 0 && value.constructor === Object) {\n\t\treturn Object.keys(value).every(key =>\n\t\t\tisPlain(value[key], depthLeft - 1)\n\t\t);\n\t}\n\n\treturn true;\n}\n\n/**\n * @summary Configurable {@link Bond}-derivation representing a functional transformation\n * of a number of other items.\n * @description This is the underlying class which powers the {@link Bond#map} and {@link Bond#mapAll}\n * functions; you'll generally want to use those unless there is some particular\n * aspect of this class's configurability that you need.\n *\n * It is constructed with a transform function and a number of args; this\n * {@link Bond} represents the result of the function when applied to those arguemnts'\n * representative values. `Bond`s and `Promises`, are resolved automatically at\n * a configurable depth within complex structures, both as input items and\n * the value resulting from the transform function.\n */\nclass TransformBond extends ReactiveBond {\n\t/**\n\t * Constructs a new object.\n\t *\n\t * @param {function} transform - The transformation function. It is called with\n\t * values corresponding (in order) to the items of `args`. It may return a\n\t * {@link Bond}, {Promise} or plain value resolving to representative values.\n\t * @param {array} args - A list of items whose representative values should be\n\t * passed to `transform`.\n\t * @defaultValue [].\n\t * @param {array} dependencies - A list of {@link Bond}s on which `transform` indirectly\n\t * depends.\n\t * @defaultValue [].\n\t * @param {number} outResolveDepth - The depth in any returned structure\n\t * that a {@link Bond} may be for it to be resolved.\n\t * @defaultValue 0.\n\t * @param {number} resolveDepth - The depth in a structure (array or object)\n\t * that a {@link Bond} may be in any of `args`'s items for it to be resolved\n\t * (in place) to its representative value. Beyond this depth, {@link Bond}s amd\n\t * {Promise}s will be left alone.\n\t * @defaultValue 1.\n\t * @param {number} latched - If `false`, this object becomes _not ready_ as\n\t * long as there is an output value waiting for resolution.\n\t * @defaultValue `true`\n\t * @param {boolean} mayBeNull - If `false`, a resultant value of `null` from\n\t * `transform` causes this {@link Bond} to become _not ready_. Optional.\n\t * @defaultValue `true`\n\t * @param {object} context - The context (i.e. `this` object) that `transform`\n\t * is bound to. Optional; defaults to the value set by {@link setDefaultTransformBondContext}.\n\t * @defaultValue `null`\n\t */\n\tconstructor (\n\t\ttransform,\n\t\targs = [],\n\t\tdependencies = [],\n\t\toutResolveDepth = 0,\n\t\tresolveDepth = 1,\n\t\tcache = { id: null, stringify: JSON.stringify, parse: JSON.parse },\n\t\tlatched = true,\n\t\tmayBeNull = true,\n\t\tcontext = defaultContext\n\t) {\n\t\tsuper(args, dependencies, function (resolvedArguments) {\n\t\t\t//\t\t\tconsole.log(`Applying: ${JSON.stringify(args)}`);\n\t\t\t// Cancel any previous result-resolving.\n\t\t\tthis.dropOut();\n\n\t\t\t// Apply transform to the resolved argument values.\n\t\t\tlet result = transform.apply(context, resolvedArguments);\n\n\t\t\t// Assue an undefined result means \"reset\".\n\t\t\tif (typeof (result) === 'undefined') {\n\t\t\t\tconsole.warn(`Transformation returned undefined: Applied ${transform} to ${JSON.stringify(resolvedArguments)}.`);\n\t\t\t\tthis.reset();\n\t\t\t} else if (result instanceof Promise) {\n\t\t\t\t// If we're not latching, we reset while we resolve the\n\t\t\t\t// resultant promise.\n\t\t\t\tif (!latched) {\n\t\t\t\t\tthis.reset();\n\t\t\t\t}\n\t\t\t\t// Then resolve the Promise; by calling `changed`, we recurse\n\t\t\t\t// as necessary.\n\t\t\t\tresult.then(this.changed.bind(this));\n\t\t\t} else if (!isPlain(result, outResolveDepth)) {\n\t\t\t\t//\t\t\t\tconsole.log(`Using ReactiveBond to resolve and trigger non-plain result (at depth ${outResolveDepth})`);\n\t\t\t\t// If we're not latching, we reset while we resolve the\n\t\t\t\t// resultant Bond(s)/Promise(s).\n\t\t\t\tif (!latched) {\n\t\t\t\t\tthis.reset();\n\t\t\t\t}\n\t\t\t\t// Then create a new `Bond` which we own to maintain the\n\t\t\t\t// resultant complex resolvable structure.\n\t\t\t\tthis.useOut(new ReactiveBond([result], [], ([resolvedResult]) => {\n\t\t\t\t\t//\t\t\t\t\tconsole.log(`Resolved results: ${JSON.stringify(v)}. Triggering...`);\n\t\t\t\t\t// Call `changed` to recurse as neccessary.\n\t\t\t\t\tthis.changed.bind(this)(resolvedResult);\n\t\t\t\t}, false, outResolveDepth));\n\t\t\t} else {\n\t\t\t\t// Nothing special here - just call changed with the result.\n\t\t\t\tthis.changed(result);\n\t\t\t}\n\t\t}, mayBeNull, resolveDepth, cache);\n\n\t\t// the current Bond used to resolve the result (output) value if the\n\t\t// result of our transform is itself a Bond.\n\t\tthis._outBond = null;\n\t}\n\n\t// Register `newOutBond` as our result-resolving bond. Ensures it knows\n\t// we depend on it via `use`.\n\tuseOut (newOutBond) {\n\t\tthis._outBond = newOutBond.use();\n\t}\n\n\t// Unregister our current result-resolving bond. Ensures it knows\n\t// we no longer depend on it via `drop`.\n\tdropOut () {\n\t\tif (this._outBond !== null) {\n\t\t\tthis._outBond.drop();\n\t\t}\n\t\tthis._outBond = null;\n\t}\n\n\t// If nobody depends on us (anymore), then drop our result-resolving Bond.\n\tfinalise () {\n\t\tthis.dropOut();\n\t\tReactiveBond.prototype.finalise.call(this);\n\t}\n\n\t/**\n\t * Set the default context under which {@link Bond} transformations run.\n\t *\n\t * @see {@link Bond#map} {@link Bond#mapAll} {@link TransformBond}\n\t */\n\tstatic setDefaultContext (c) {\n\t\tdefaultContext = c;\n\t}\n}\n\nmodule.exports = TransformBond;\n",
    "static": true,
    "longname": "/home/tomusdrw/workspace/oo7-new/packages/oo7/lib/transformBond.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 189,
    "kind": "variable",
    "name": "defaultContext",
    "memberof": "packages/oo7/lib/transformBond.js",
    "static": true,
    "longname": "packages/oo7/lib/transformBond.js~defaultContext",
    "access": "public",
    "export": false,
    "importPath": "./packages/oo7/lib/transformBond.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 190,
    "kind": "function",
    "name": "isPlain",
    "memberof": "packages/oo7/lib/transformBond.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/oo7/lib/transformBond.js~isPlain",
    "access": "public",
    "export": false,
    "importPath": "./packages/oo7/lib/transformBond.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "depthLeft",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 191,
    "kind": "class",
    "name": "TransformBond",
    "memberof": "packages/oo7/lib/transformBond.js",
    "static": true,
    "longname": "packages/oo7/lib/transformBond.js~TransformBond",
    "access": "public",
    "export": true,
    "importPath": "./packages/oo7/lib/transformBond.js",
    "importStyle": "TransformBond",
    "description": "",
    "lineNumber": 63,
    "unknown": [
      {
        "tagName": "@summary",
        "tagValue": "Configurable {@link Bond}-derivation representing a functional transformation\nof a number of other items."
      },
      {
        "tagName": "@description",
        "tagValue": "This is the underlying class which powers the {@link Bond#map} and {@link Bond#mapAll}\nfunctions; you'll generally want to use those unless there is some particular\naspect of this class's configurability that you need.\n\nIt is constructed with a transform function and a number of args; this\n{@link Bond} represents the result of the function when applied to those arguemnts'\nrepresentative values. `Bond`s and `Promises`, are resolved automatically at\na configurable depth within complex structures, both as input items and\nthe value resulting from the transform function."
      }
    ],
    "interface": false,
    "extends": [
      "packages/oo7/lib/reactiveBond.js~ReactiveBond"
    ]
  },
  {
    "__docId__": 192,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/oo7/lib/transformBond.js~TransformBond",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/oo7/lib/transformBond.js~TransformBond#constructor",
    "access": "public",
    "description": "Constructs a new object.",
    "lineNumber": 94,
    "unknown": [
      {
        "tagName": "@defaultValue",
        "tagValue": "[]."
      },
      {
        "tagName": "@defaultValue",
        "tagValue": "[]."
      },
      {
        "tagName": "@defaultValue",
        "tagValue": "0."
      },
      {
        "tagName": "@defaultValue",
        "tagValue": "1."
      },
      {
        "tagName": "@defaultValue",
        "tagValue": "`true`"
      },
      {
        "tagName": "@defaultValue",
        "tagValue": "`true`"
      },
      {
        "tagName": "@defaultValue",
        "tagValue": "`null`"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "transform",
        "description": "The transformation function. It is called with\nvalues corresponding (in order) to the items of `args`. It may return a\n{@link Bond}, {Promise} or plain value resolving to representative values."
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": "A list of items whose representative values should be\npassed to `transform`."
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "dependencies",
        "description": "A list of {@link Bond}s on which `transform` indirectly\ndepends."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "outResolveDepth",
        "description": "The depth in any returned structure\nthat a {@link Bond} may be for it to be resolved."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "resolveDepth",
        "description": "The depth in a structure (array or object)\nthat a {@link Bond} may be in any of `args`'s items for it to be resolved\n(in place) to its representative value. Beyond this depth, {@link Bond}s amd\n{Promise}s will be left alone."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "latched",
        "description": "If `false`, this object becomes _not ready_ as\nlong as there is an output value waiting for resolution."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "mayBeNull",
        "description": "If `false`, a resultant value of `null` from\n`transform` causes this {@link Bond} to become _not ready_. Optional."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": "The context (i.e. `this` object) that `transform`\nis bound to. Optional; defaults to the value set by {@link setDefaultTransformBondContext}."
      }
    ]
  },
  {
    "__docId__": 193,
    "kind": "member",
    "name": "_outBond",
    "memberof": "packages/oo7/lib/transformBond.js~TransformBond",
    "static": false,
    "longname": "packages/oo7/lib/transformBond.js~TransformBond#_outBond",
    "access": "private",
    "description": null,
    "lineNumber": 148,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 194,
    "kind": "method",
    "name": "useOut",
    "memberof": "packages/oo7/lib/transformBond.js~TransformBond",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/oo7/lib/transformBond.js~TransformBond#useOut",
    "access": "public",
    "description": null,
    "lineNumber": 153,
    "undocument": true,
    "params": [
      {
        "name": "newOutBond",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 196,
    "kind": "method",
    "name": "dropOut",
    "memberof": "packages/oo7/lib/transformBond.js~TransformBond",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/oo7/lib/transformBond.js~TransformBond#dropOut",
    "access": "public",
    "description": null,
    "lineNumber": 159,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 198,
    "kind": "method",
    "name": "finalise",
    "memberof": "packages/oo7/lib/transformBond.js~TransformBond",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/oo7/lib/transformBond.js~TransformBond#finalise",
    "access": "public",
    "description": null,
    "lineNumber": 167,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 199,
    "kind": "method",
    "name": "setDefaultContext",
    "memberof": "packages/oo7/lib/transformBond.js~TransformBond",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/oo7/lib/transformBond.js~TransformBond.setDefaultContext",
    "access": "public",
    "description": "Set the default context under which {@link Bond} transformations run.",
    "see": [
      "{@link Bond#map} {@link Bond#mapAll} {@link TransformBond}"
    ],
    "lineNumber": 177,
    "params": [
      {
        "name": "c",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 200,
    "kind": "file",
    "name": "packages/oo7-parity/src/abis/index.js",
    "content": "// (C) Copyright 2016-2017 Parity Technologies (UK) Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//         http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nconst ParityApi = require('@parity/api');\n\nconst sha3 = ParityApi.util.sha3;\n\n/** @type {ABI} */\nconst RegistryABI = require('./registry.json');\nconst RegistryExtras = [\n\t{ name: 'lookupData', method: 'getData', args: [n => sha3(n.toLowerCase()), null] },\n\t{ name: 'lookupAddress', method: 'getAddress', args: [n => sha3(n.toLowerCase()), null] },\n\t{ name: 'lookupUint', method: 'getUint', args: [n => sha3(n.toLowerCase()), null] },\n\t{ name: 'lookupOwner', method: 'getOwner', args: [n => sha3(n.toLowerCase())] }\n];\n/**\n * Github Hint ABI definition.\n *\n * @type {ABI}\n */\nconst GitHubHintABI = (() => require('./githubhint.json'))();\n/** @type {ABI} */\nconst OperationsABI = (() => require('./operations.json'))();\n/** @type {ABI} */\nconst BadgeRegABI = (() => require('./badgereg.json'))();\n/** @type {ABI} */\nconst TokenRegABI = (() => require('./tokenreg.json'))();\n/** @type {ABI} */\nconst BadgeABI = (() => require('./badge.json'))();\n/** @type {ABI} */\nconst TokenABI = (() => require('./token.json'))();\n\n/**\n * Deprecated.\n */\nfunction abiPolyfill () {\n\treturn {\n\t\tregistry: RegistryABI,\n\t\tregistryExtras: RegistryExtras,\n\t\tgithubhint: GitHubHintABI,\n\t\toperations: OperationsABI,\n\t\tbadgereg: BadgeRegABI,\n\t\ttokenreg: TokenRegABI,\n\t\tbadge: BadgeABI,\n\t\terc20token: TokenABI\n\t};\n}\n\nmodule.exports = {\n\tabiPolyfill,\n\tRegistryABI,\n\tRegistryExtras,\n\tGitHubHintABI,\n\tOperationsABI,\n\tBadgeRegABI,\n\tTokenRegABI,\n\tBadgeABI,\n\tTokenABI\n};\n",
    "static": true,
    "longname": "/home/tomusdrw/workspace/oo7-new/packages/oo7-parity/src/abis/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 201,
    "kind": "variable",
    "name": "sha3",
    "memberof": "packages/oo7-parity/src/abis/index.js",
    "static": true,
    "longname": "packages/oo7-parity/src/abis/index.js~sha3",
    "access": "public",
    "export": false,
    "importPath": "./packages/oo7-parity/src/abis/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 202,
    "kind": "function",
    "name": "abiPolyfill",
    "memberof": "packages/oo7-parity/src/abis/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/oo7-parity/src/abis/index.js~abiPolyfill",
    "access": "public",
    "export": true,
    "importPath": "./packages/oo7-parity/src/abis/index.js",
    "importStyle": "{abiPolyfill}",
    "description": "Deprecated.",
    "lineNumber": 47,
    "params": [],
    "return": {
      "types": [
        "{\"registry\": *, \"registryExtras\": *, \"githubhint\": *, \"operations\": *, \"badgereg\": *, \"tokenreg\": *, \"badge\": *, \"erc20token\": *}"
      ]
    }
  },
  {
    "__docId__": 203,
    "kind": "variable",
    "name": "RegistryExtras",
    "memberof": "packages/oo7-parity/src/abis/index.js",
    "static": true,
    "longname": "packages/oo7-parity/src/abis/index.js~RegistryExtras",
    "access": "public",
    "export": true,
    "importPath": "./packages/oo7-parity/src/abis/index.js",
    "importStyle": "{RegistryExtras}",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 204,
    "kind": "variable",
    "name": "GitHubHintABI",
    "memberof": "packages/oo7-parity/src/abis/index.js",
    "static": true,
    "longname": "packages/oo7-parity/src/abis/index.js~GitHubHintABI",
    "access": "public",
    "export": true,
    "importPath": "./packages/oo7-parity/src/abis/index.js",
    "importStyle": "{GitHubHintABI}",
    "description": "Github Hint ABI definition.",
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "ABI"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 205,
    "kind": "variable",
    "name": "OperationsABI",
    "memberof": "packages/oo7-parity/src/abis/index.js",
    "static": true,
    "longname": "packages/oo7-parity/src/abis/index.js~OperationsABI",
    "access": "public",
    "export": true,
    "importPath": "./packages/oo7-parity/src/abis/index.js",
    "importStyle": "{OperationsABI}",
    "description": null,
    "lineNumber": 34,
    "type": {
      "nullable": null,
      "types": [
        "ABI"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 206,
    "kind": "variable",
    "name": "BadgeRegABI",
    "memberof": "packages/oo7-parity/src/abis/index.js",
    "static": true,
    "longname": "packages/oo7-parity/src/abis/index.js~BadgeRegABI",
    "access": "public",
    "export": true,
    "importPath": "./packages/oo7-parity/src/abis/index.js",
    "importStyle": "{BadgeRegABI}",
    "description": null,
    "lineNumber": 36,
    "type": {
      "nullable": null,
      "types": [
        "ABI"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 207,
    "kind": "variable",
    "name": "TokenRegABI",
    "memberof": "packages/oo7-parity/src/abis/index.js",
    "static": true,
    "longname": "packages/oo7-parity/src/abis/index.js~TokenRegABI",
    "access": "public",
    "export": true,
    "importPath": "./packages/oo7-parity/src/abis/index.js",
    "importStyle": "{TokenRegABI}",
    "description": null,
    "lineNumber": 38,
    "type": {
      "nullable": null,
      "types": [
        "ABI"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 208,
    "kind": "variable",
    "name": "BadgeABI",
    "memberof": "packages/oo7-parity/src/abis/index.js",
    "static": true,
    "longname": "packages/oo7-parity/src/abis/index.js~BadgeABI",
    "access": "public",
    "export": true,
    "importPath": "./packages/oo7-parity/src/abis/index.js",
    "importStyle": "{BadgeABI}",
    "description": null,
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "ABI"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 209,
    "kind": "variable",
    "name": "TokenABI",
    "memberof": "packages/oo7-parity/src/abis/index.js",
    "static": true,
    "longname": "packages/oo7-parity/src/abis/index.js~TokenABI",
    "access": "public",
    "export": true,
    "importPath": "./packages/oo7-parity/src/abis/index.js",
    "importStyle": "{TokenABI}",
    "description": null,
    "lineNumber": 42,
    "type": {
      "nullable": null,
      "types": [
        "ABI"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 210,
    "kind": "file",
    "name": "packages/oo7-parity/src/index.js",
    "content": "// (C) Copyright 2016-2017 Parity Technologies (UK) Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//         http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/* eslint-disable no-return-assign */\n/* eslint-disable no-proto */\n\n// TODO [Document auxilary types]\n\nconst oo7 = require('oo7');\nconst ParityApi = require('@parity/api');\n\nconst {\n\tasciiToHex,\n\tbytesToHex,\n\thexToAscii,\n\tisAddressValid,\n\ttoChecksumAddress,\n\tsha3,\n\tcapitalizeFirstLetter,\n\tsingleton,\n\tdenominations,\n\tdenominationMultiplier,\n\tinterpretRender,\n\tcombineValue,\n\tdefDenom,\n\tformatValue,\n\tformatValueNoDenom,\n\tformatToExponential,\n\tinterpretQuantity,\n\tsplitValue,\n\tformatBalance,\n\tformatBlockNumber,\n\tisNullData,\n\tsplitSignature,\n\tremoveSigningPrefix,\n\tcleanup\n} = require('./utils');\n\nconst {\n\tabiPolyfill,\n\tRegistryABI,\n\tRegistryExtras,\n\tGitHubHintABI,\n\tOperationsABI,\n\tBadgeRegABI,\n\tTokenRegABI,\n\tBadgeABI,\n\tTokenABI\n} = require('./abis');\n\nfunction defaultProvider () {\n\tif (typeof window !== 'undefined' && window.ethereum) {\n\t\treturn window.ethereum;\n\t}\n\n\ttry {\n\t\tif (typeof window !== 'undefined' && window.parent && window.parent.ethereum) {\n\t\t\treturn window.parent.ethereum;\n\t\t}\n\t} catch (e) {}\n\n\treturn new ParityApi.Provider.Http('http://localhost:8545');\n}\n\nclass Bonds {\n\t/**\n\t * Creates a new oo7-parity bonds aggregate object with given ethereum provider.\n\t *\n\t * Additional documentation can be found at https://wiki.parity.io/oo7-Parity-Reference.html\n\t *\n\t * @param {?Provider} provider Web3-compatible transport Provider (i.e. `window.ethereum`). Uses a sane default if not provided.\n\t * @returns {Bonds}\n\t */\n\tconstructor (provider = defaultProvider()) {\n\t\tif (!this) {\n\t\t\treturn createBonds({ api: new ParityApi(provider) });\n\t\t}\n\n\t\t/**\n\t\t *\n\t\t * A {@link Bond} representing latest time. Updated every second.\n\t\t *\n\t\t * @type {TimeBond}\n\t\t *\n\t\t * @example\n\t\t * const { bonds } = require('oo7-parity')\n\t\t *\n\t\t * bonds\n\t\t *\t.time\n\t\t *\t.tie(console.log) // prints time periodically\n\t\t */\n\t\tthis.time = null;\n\n\t\t/**\n\t\t * A {@link Bond} representing latest block number.\n\t\t * Alias for {@link Bonds.blockNumber}\n\t\t *\n\t\t * @type {Bond.<Number>}\n\t\t */\n\t\tthis.height = null;\n\n\t\t/**\n\t\t * A {@link Bond} representing latest block number.\n\t\t *\n\t\t * @type {Bond.<Number>}\n\t\t *\n\t\t * @example\n\t\t * const { bonds } = require('oo7-parity')\n\t\t *\n\t\t * bonds\n\t\t *\t.blockNumber\n\t\t *\t.tie(console.log) // prints latest block number when it changes\n\t\t */\n\t\tthis.blockNumber = null;\n\n\t\t/**\n\t\t * A function returning bond that represents given block content.\n\t\t *\n\t\t * @param {string|number|Bond} number block number\n\t\t * @returns {Bond.<Block>} block bond\n\t\t *\n\t\t * @example\n\t\t * const { bonds } = require('oo7-parity')\n\t\t *\n\t\t * bonds\n\t\t *\t.blockByNumber(bonds.height)\n\t\t *\t.tie(console.log) // prints latest block\n\t\t */\n\t\tthis.blockByNumber = null;\n\n\t\t/**\n\t\t * A function returning bond that represents given block content.\n\t\t *\n\t\t * @param {string|number|Bond} hash block hash\n\t\t * @returns {Bond.<Block>} block bond\n\t\t *\n\t\t * @example\n\t\t * const { bonds } = require('oo7-parity')\n\t\t *\n\t\t * bonds\n\t\t *\t.blockByHash('0x2b23d04567313fa141ca396f1e2620b62ab0c5d69f8c77157118f8d7671e1f4d')\n\t\t *\t.tie(console.log) // prints block with given hash\n\t\t */\n\t\tthis.blockByHash = null;\n\n\t\t/**\n\t\t * Similar to {@link Bonds.blockByNumber} and {@link Bonds.blockByHash},\n\t\t * but accepts both hashes and numbers as arguments.\n\t\t *\n\t\t * @param {string|number|Bond} hashOrNumber block hash or block number\n\t\t * @returns {Bond.<Block>} block bond\n\t\t *\n\t\t * @example\n\t\t * const { bonds } = require('oo7-parity')\n\t\t *\n\t\t * bonds\n\t\t *\t.findBlock('0x2b23d04567313fa141ca396f1e2620b62ab0c5d69f8c77157118f8d7671e1f4d')\n\t\t *\t.tie(console.log) // prints block with given hash\n\t\t */\n\t\tthis.findBlock = null;\n\n\t\t/**\n\t\t * A subscriptable version of {@link Bonds.findBlock}\n\t\t *\n\t\t * You can retrieve bonds given block numbers or hashes or other Bonds.\n\t\t *\n\t\t * @type {Object.<string|number|Bond, Bond>}\n\t\t *\n\t\t * @example\n\t\t * const { bonds } = require('oo7-parity')\n\t\t *\n\t\t * bonds\n\t\t *\t.blocks['0x2b23d04567313fa141ca396f1e2620b62ab0c5d69f8c77157118f8d7671e1f4d']\n\t\t *\t.tie(console.log) // prints block with given hash\n\t\t *\n\t\t * bonds\n\t\t *\t.blocks[bonds.height]\n\t\t *\t.tie(console.log) // prints latest block every time it changes\n\t\t */\n\t\tthis.blocks = null;\n\n\t\t/**\n\t\t * A {@link Bond} for latest block.\n\t\t *\n\t\t * @type {Bond.<Block>}\n\t\t *\n\t\t * @example\n\t\t * const { bonds } = require('oo7-parity')\n\t\t *\n\t\t * bonds\n\t\t *\t.head\n\t\t *\t.tie(console.log) // prints latest block every time it changes\n\t\t *\n\t\t */\n\t\tthis.head = null;\n\n\t\t/**\n\t\t * A {@link Bond} for currently set block author.\n\t\t * Represents a result of `eth_coinbase` RPC call.\n\t\t *\n\t\t * @type {Bond.<Address>}\n\t\t *\n\t\t * @example\n\t\t * const { bonds } = require('oo7-parity')\n\t\t *\n\t\t * bonds\n\t\t *\t.author\n\t\t *\t.tie(console.log) // prints currently set block author (coinbase/miner) every time it changes\n\t\t *\n\t\t */\n\t\tthis.author = null;\n\n\t\t/**\n\t\t * List of accounts managed by the node.\n\t\t *\n\t\t * @type {Bond.<Address[]>}\n\t\t *\n\t\t * @example\n\t\t * const { bonds } = require('oo7-parity')\n\t\t *\n\t\t * bonds\n\t\t *\t.accounts\n\t\t *\t.tie(console.log) // prints accounts list every time it changes\n\t\t *\n\t\t */\n\t\tthis.accounts = null;\n\n\t\t/**\n\t\t * User-selected default account for this dapp.\n\t\t *\n\t\t * @type {Bond.<Address>}\n\t\t *\n\t\t * @example\n\t\t * const { bonds } = require('oo7-parity')\n\t\t *\n\t\t * bonds\n\t\t *\t.defaultAccount\n\t\t *\t.tie(console.log) // prints default account every time it changes\n\t\t *\n\t\t */\n\t\tthis.defaultAccount = null;\n\n\t\t/**\n\t\t * Alias for {@link Bonds.defaultAccount}\n\t\t *\n\t\t * @type {Bond.<Address>}\n\t\t *\n\t\t * @example\n\t\t * const { bonds } = require('oo7-parity')\n\t\t *\n\t\t * bonds\n\t\t *\t.me\n\t\t *\t.tie(console.log) // prints default account every time it changes\n\t\t *\n\t\t */\n\t\tthis.me = null;\n\t\t/**\n\t\t * Posts a transaction to the network.\n\t\t *\n\t\t * @param {TransactionRequest} tx Transaction details\n\t\t * @returns {ReactivePromise.<TransactionStatus>}\n\t\t * @example\n\t\t * const { bonds } = require('oo7-parity')\n\t\t *\n\t\t * bonds\n\t\t *\t.post({ to: bonds.me, value: 0  })\n\t\t *\t.tie(console.log) // Reports transaction progress\n\t\t */\n\t\tthis.post = null;\n\t\t/**\n\t\t * Returns a signature of given message\n\t\t *\n\t\t * @param {Hash|Bond} hash Hash to sign\n\t\t * @param {?Address|Bond} from Optional account that should be used for signing.\n\t\t * @returns {ReactivePromise.<SignStatus>}\n\t\t * @example\n\t\t * const { bonds } = require('oo7-parity')\n\t\t *\n\t\t * bonds\n\t\t *\t.sign('0x2ea2e504d09c458dbadc703112125564d53ca03c27a5b28e7b3e2b5804289c45')\n\t\t *\t.tie(console.log) // Reports signing progress\n\t\t */\n\t\tthis.sign = null;\n\n\t\t/**\n\t\t * Returns balance of given address.\n\t\t *\n\t\t * @param {string|Bond.<Address>} address\n\t\t * @returns {Bond.<BigNumber>}\n\t\t *\n\t\t * @example\n\t\t * const { bonds } = require('oo7-parity')\n\t\t *\n\t\t * bonds\n\t\t *\t.balance(bonds.me)\n\t\t *\t.tie(console.log) // prints default account balance every time any of them changes\n\t\t *\n\t\t */\n\t\tthis.balance = null;\n\n\t\t/**\n\t\t * Returns code of given address.\n\t\t *\n\t\t * @param {string|Bond.<Address>} address\n\t\t * @returns {Bond.<Bytes>}\n\t\t *\n\t\t * @example\n\t\t * const { bonds } = require('oo7-parity')\n\t\t *\n\t\t * bonds\n\t\t *\t.code(bonds.me)\n\t\t *\t.tie(console.log) // prints default account code every time any of them changes\n\t\t *\n\t\t */\n\t\tthis.code = null;\n\n\t\t/**\n\t\t * Returns the nonce of given address.\n\t\t *\n\t\t * @param {string|Bond.<Address>} address\n\t\t * @returns {Bond.<BigNumber>}\n\t\t *\n\t\t * @example\n\t\t * const { bonds } = require('oo7-parity')\n\t\t *\n\t\t * bonds\n\t\t *\t.nonce(bonds.me)\n\t\t *\t.tie(console.log) // prints default account nonce every time any of them changes\n\t\t *\n\t\t */\n\t\tthis.nonce = null;\n\n\t\t/**\n\t\t * Returns storage at given index of an address.\n\t\t *\n\t\t * @param {string|Bond.<Address>} address Contract address\n\t\t * @param {string|number|Bond.<H256>} storageIdx Contract storage index\n\t\t * @returns {Bond.<BigNumber>}\n\t\t *\n\t\t * @example\n\t\t * const { bonds } = require('oo7-parity')\n\t\t *\n\t\t * bonds\n\t\t *\t.storageAt(bonds.me, 0)\n\t\t *\t.tie(console.log) // prints default account storage at position 0 every time any of them changes\n\t\t *\n\t\t */\n\t\tthis.storageAt = null;\n\n\t\t/**\n\t\t * Returns node's syncing status.\n\t\t * If the node is fully synced this will return `false`.\n\t\t *\n\t\t * @type {Bond.<bool>}\n\t\t *\n\t\t * @example\n\t\t * const { bonds } = require('oo7-parity')\n\t\t *\n\t\t * bonds\n\t\t *\t.syncing\n\t\t *\t.tie(console.log) // prints sync status every time it changes\n\t\t *\n\t\t */\n\t\tthis.syncing = null;\n\t\t/**\n\t\t * Returns node's authoring status.\n\t\t * If the node is not authoring blocks this will return `false`.\n\t\t *\n\t\t * @type {Bond.<bool>}\n\t\t *\n\t\t * @example\n\t\t * const { bonds } = require('oo7-parity')\n\t\t *\n\t\t * bonds\n\t\t *\t.authoring\n\t\t *\t.tie(console.log) // prints authoring status every time it changes\n\t\t *\n\t\t */\n\t\tthis.authoring = null;\n\t\t/**\n\t\t * Reported hashrate.\n\t\t * If there is an external miner connected to the node it will return reported values.\n\t\t *\n\t\t * @type {Bond.<BigNumber>}\n\t\t *\n\t\t * @example\n\t\t * const { bonds } = require('oo7-parity')\n\t\t *\n\t\t * bonds\n\t\t *\t.hashrate\n\t\t *\t.tie(console.log) // prints current average hashrate\n\t\t *\n\t\t */\n\t\tthis.hashrate = null;\n\t\tthis.ethProtocolVersion = null;\n\t\t/**\n\t\t * Suggested gas price value. (Gas Price Oracle)\n\t\t * This returns a suggested gas price for next transaction. The estimation is based on statistics from last blocks.\n\t\t *\n\t\t * @type {Bond.<BigNumber>}\n\t\t *\n\t\t * @example\n\t\t * const { bonds } = require('oo7-parity')\n\t\t *\n\t\t * bonds\n\t\t *\t.gasPrice\n\t\t *\t.tie(console.log) // prints current gas price suggestion\n\t\t *\n\t\t */\n\t\tthis.gasPrice = null;\n\t\t/**\n\t\t * Estimates gas required to execute given transaction\n\t\t *\n\t\t * @param {{ from: ?Address, to: ?Address, data: ?Bytes }} call Transaction request\n\t\t * @returns {Bond.<BigNumber>} gas estimate\n\t\t *\n\t\t * @example\n\t\t * const { bonds } = require('oo7-parity')\n\t\t *\n\t\t * bonds\n\t\t *\t.estimateGas({ from: bonds.me, to: '0x00D6Cc1BA9cf89BD2e58009741f4F7325BAdc0ED' })\n\t\t *\t.tie(console.log) // prints current gas estimate\n\t\t *\n\t\t */\n\t\tthis.estimateGas = null;\n\n\t\t/**\n\t\t * Returns block transaction count given block number or hash.\n\t\t *\n\t\t * @param {string|number|Bond} block block number or hash\n\t\t * @returns {Bond.<Number>} number of transactions in block\n\t\t *\n\t\t * @example\n\t\t * const { bonds } = require('oo7-parity')\n\t\t *\n\t\t * bonds\n\t\t *\t.blockTransactionCount(bonds.blockNumber)\n\t\t *\t.tie(console.log) // prints number of transactions in latest block\n\t\t *\n\t\t */\n\t\tthis.blockTransactionCount = null;\n\t\t/**\n\t\t * Returns uncle count given block number or hash.\n\t\t *\n\t\t * @param {string|number|Bond} block block number or hash\n\t\t * @returns {Bond.<Number>} number of uncles in a block\n\t\t *\n\t\t * @example\n\t\t * const { bonds } = require('oo7-parity')\n\t\t *\n\t\t * bonds\n\t\t *\t.uncleCount(bonds.blockNumber)\n\t\t *\t.tie(console.log) // prints number of uncles in latest block\n\t\t *\n\t\t */\n\t\tthis.uncleCount = null;\n\t\t/**\n\t\t * Returns uncle given block number or hash and uncle index\n\t\t *\n\t\t * @param {string|number|Bond} block block number or hash\n\t\t * @param {string|number|Bond} index index of an uncle within a block\n\t\t * @returns {Bond.<Header>} uncle header at that index\n\t\t *\n\t\t * @example\n\t\t * const { bonds } = require('oo7-parity')\n\t\t *\n\t\t * bonds\n\t\t *\t.uncle(bonds.blockNumber, 0)\n\t\t *\t.tie(console.log) // prints the first uncle in latest block\n\t\t *\n\t\t */\n\t\tthis.uncle = null;\n\t\t/**\n\t\t * Returns transaction given block number or hash and transaction index\n\t\t *\n\t\t * @param {string|number|Bond} block block number or hash\n\t\t * @param {string|number|Bond} index index of a transaction within a block\n\t\t * @returns {Bond.<Transaction>} transaction at that index\n\t\t *\n\t\t * @example\n\t\t * const { bonds } = require('oo7-parity')\n\t\t *\n\t\t * bonds\n\t\t *\t.transaction(bonds.blockNumber, 0)\n\t\t *\t.tie(console.log) // prints the first uncle in latest block\n\t\t *\n\t\t */\n\t\tthis.transaction = null;\n\t\t/**\n\t\t * Returns receipt given transaction hash.\n\t\t *\n\t\t * @param {string|number|Bond} hash transaction hash\n\t\t * @returns {Bond.<TransactionReceipt>} transaction at that index\n\t\t *\n\t\t * @example\n\t\t * const { bonds } = require('oo7-parity')\n\t\t *\n\t\t * bonds\n\t\t *\t.receipt(bonds.transaction(bonds.height, 0).map(x => x ? x.hash : undefined))\n\t\t *\t.tie(console.log) // prints receipt of first transaction in latest block\n\t\t *\n\t\t */\n\t\tthis.receipt = null;\n\n\t\t/**\n\t\t * Returns client version string. (`web3_clientVersion`).\n\t\t *\n\t\t * @type {Bond.<String>}\n\t\t * @example\n\t\t * const { bonds } = require('oo7-parity')\n\t\t *\n\t\t * bonds\n\t\t *\t.clientVersion\n\t\t *\t.tie(console.log)\n\t\t *\n\t\t */\n\t\tthis.clientVersion = null;\n\n\t\t/**\n\t\t * Returns current peer count. (`net_peerCount`).\n\t\t *\n\t\t * @type {Bond.<Number>}\n\t\t * @example\n\t\t * const { bonds } = require('oo7-parity')\n\t\t *\n\t\t * bonds\n\t\t *\t.peerCount\n\t\t *\t.tie(console.log)\n\t\t *\n\t\t */\n\t\tthis.peerCount = null;\n\t\t/**\n\t\t * Returns true if the node is actively listening for network connections.\n\t\t *\n\t\t * @type {Bond.<bool>}\n\t\t * @example\n\t\t * const { bonds } = require('oo7-parity')\n\t\t *\n\t\t * bonds\n\t\t *\t.listening\n\t\t *\t.tie(console.log)\n\t\t *\n\t\t */\n\t\tthis.listening = null;\n\t\t/**\n\t\t * Returns chain id (used for chain replay protection).\n\t\t * NOTE: It's _not_ network id.\n\t\t *\n\t\t * @type {Bond.<Number>}\n\t\t * @example\n\t\t * const { bonds } = require('oo7-parity')\n\t\t *\n\t\t * bonds\n\t\t *\t.chainId\n\t\t *\t.tie(console.log)\n\t\t *\n\t\t */\n\t\tthis.chainId = null;\n\n\t\t/**\n\t\t * Returns a hash of content under given URL.\n\t\t *\n\t\t * @param {string|Bond} url URL of the content\n\t\t * @returns {Bond.<string>} hash of the content\n\t\t * @example\n\t\t * const { bonds } = require('oo7-parity')\n\t\t *\n\t\t * bonds\n\t\t *\t.hashContent('https://google.com')\n\t\t *\t.tie(console.log)\n\t\t *\n\t\t */\n\t\tthis.hashContent = null;\n\t\tthis.gasPriceHistogram = null;\n\t\tthis.accountsInfo = null;\n\t\tthis.allAccontsInfo = null;\n\t\tthis.hardwareAccountsInfo = null;\n\t\tthis.mode = null;\n\n\t\tthis.defaultExtraData = null;\n\t\tthis.extraData = null;\n\t\tthis.gasCeilTarget = null;\n\t\tthis.gasFloorTarget = null;\n\t\tthis.minGasPrice = null;\n\t\tthis.transactionsLimit = null;\n\t\t/**\n\t\t * Returns a string name of currently connected chain.\n\t\t *\n\t\t * @type {Bond.<string>}\n\t\t * @example\n\t\t * const { bonds } = require('oo7-parity')\n\t\t *\n\t\t * bonds\n\t\t *\t.chainName\n\t\t *\t.tie(console.log)\n\t\t */\n\t\tthis.chainName = null;\n\t\t/**\n\t\t * Returns a status of currently connected chain.\n\t\t *\n\t\t * @type {Bond.<object>}\n\t\t * @example\n\t\t * const { bonds } = require('oo7-parity')\n\t\t *\n\t\t * bonds\n\t\t *\t.chainStatus\n\t\t *\t.tie(console.log)\n\t\t */\n\t\tthis.chainStatus = null;\n\n\t\tthis.peers = null;\n\t\tthis.enode = null;\n\t\tthis.nodePort = null;\n\t\tthis.nodeName = null;\n\t\tthis.signerPort = null;\n\t\tthis.dappsPort = null;\n\t\tthis.dappsInterface = null;\n\n\t\tthis.nextNonce = null;\n\t\tthis.pending = null;\n\t\tthis.local = null;\n\t\tthis.future = null;\n\t\tthis.pendingStats = null;\n\t\tthis.unsignedCount = null;\n\n\t\tthis.releaseInfo = null;\n\t\tthis.versionInfo = null;\n\t\tthis.consensusCapability = null;\n\t\tthis.upgradeReady = null;\n\n\t\t/**\n\t\t * Replays (re-executes) a transaction. Returns requested traces of execution.\n\t\t *\n\t\t * @param {string} hash Transaction hash\n\t\t * @param {String[]} traces Any subset of `trace`,`vmTrace`,`stateDiff`.\n\t\t * @returns {Bond.<object>}\n\t\t * @example\n\t\t * const { bonds } = require('oo7-parity')\n\t\t *\n\t\t * bonds\n\t\t *\t.replayTx('0x2ea2e504d09c458dbadc703112125564d53ca03c27a5b28e7b3e2b5804289c45', ['trace'])\n\t\t *\t.tie(console.log)\n\t\t */\n\t\tthis.replayTx = null;\n\t\t/**\n\t\t * Executs a transaction and collects traces.\n\t\t *\n\t\t * @param {TransactionRequest} transaction Transaction request\n\t\t * @param {String[]} traces Any subset of `trace`,`vmTrace`,`stateDiff`.\n\t\t * @param {string|number|Bond} block Block number or hash\n\t\t * @returns {Bond.<object>}\n\t\t * @example\n\t\t * const { bonds } = require('oo7-parity')\n\t\t *\n\t\t * bonds\n\t\t *\t.callTx({\n\t\t *\t\tfrom: bonds.me,\n\t\t *\t\tto: bonds.registry.address\n\t\t *\t}, ['trace'], 'latest')\n\t\t *\t.tie(console.log)\n\t\t */\n\t\tthis.callTx = null;\n\n\t\t/**\n\t\t * Deploys a new contract\n\t\t *\n\t\t * @param {string|Bytes} init Initialization bytecode\n\t\t * @param {ABI} abi Contract ABI\n\t\t * @param {{from: ?Address, gas: ?BigNumber, gasPrice: ?BigNumber, nonce: ?BigNumber}} options Deployment options\n\t\t * @returns {ReactivePromise.<DeployStatus>}\n\t\t * @example\n\t\t * const { bonds } = require('oo7-parity')\n\t\t *\n\t\t * bonds\n\t\t *\t.deployContract('0x1234', abi, {})\n\t\t *\t.tie(console.log) // Reports deployment progress\n\t\t */\n\t\tthis.deployContract = null;\n\t\t/**\n\t\t * Creates bond-enabled contract object for existing contract.\n\t\t *\n\t\t * @param {string|Bond} address Contract address\n\t\t * @param {ABI} abi Contract ABI\n\t\t * @param {?ABI} extras Additional methods not defined in the ABI.\n\t\t * @returns {Contract}\n\t\t * @example\n\t\t * const { bonds } = require('oo7-parity')\n\t\t *\n\t\t * bonds\n\t\t *\t.makeContract(bonds.me, abi)\n\t\t *\t.someMethod()\n\t\t *\t.tie(console.log) // returns a result of someMethod call\n\t\t */\n\t\tthis.makeContract = null;\n\n\t\t/**\n\t\t * Parity registry contract instance.\n\t\t * @type {Contract.<Registry>}\n\t\t */\n\t\tthis.registry = null;\n\n\t\t/**\n\t\t * Parity registry contract instance.\n\t\t * @type {Contract.<GithubHint>}\n\t\t */\n\t\tthis.githubhint = null;\n\t\t/**\n\t\t * Parity registry contract instance.\n\t\t * @type {Contract.<Operations>}\n\t\t */\n\t\tthis.operations = null;\n\t\t/**\n\t\t * Parity registry contract instance.\n\t\t * @type {Contract.<BadgeReg>}\n\t\t */\n\t\tthis.badgereg = null;\n\t\t/**\n\t\t * Parity registry contract instance.\n\t\t * @type {Contract.<TokenReg>}\n\t\t */\n\t\tthis.tokenreg = null;\n\n\t\t/**\n\t\t * A {@link Bond} representing all currently registered badges from BadgeReg.\n\t\t *\n\t\t * @type {Bond.<{id:string,name:string,img:string,caption:string,badge:Contract}[]>}\n\t\t */\n\t\tthis.badges = null;\n\t\t/**\n\t\t * Returns a list of badges for given address.\n\t\t *\n\t\t * @param {Address} address\n\t\t * @returns {Bond.<Badge[]>} see {@link Bonds.badges}\n\t\t */\n\t\tthis.badgesOf = null;\n\n\t\t/**\n\t\t * A {@link Bond} representing all currently registered tokens from TokenReg.\n\t\t *\n\t\t * @type {Bond.<{id:string,tla:string,base:string,name:string,owner:address,img:string,caption:string}[]>}\n\t\t */\n\t\tthis.tokens = null;\n\t\t/**\n\t\t * Returns a list of tokens with a non-empty balance for given address.\n\t\t *\n\t\t * @param {Address} address\n\t\t * @returns {Bond.<Token[]>} see {@link Bonds.tokens}\n\t\t */\n\t\tthis.tokensOf = null;\n\n\t\treturn this;\n\t}\n}\n\nfunction isNumber (n) {\n\treturn typeof (n) === 'number' || (typeof (n) === 'string' && n.match(/^[0-9]+$/));\n}\n\nfunction memoized (f) {\n\tvar memo;\n\treturn function () {\n\t\tif (memo === undefined) { memo = f(); }\n\t\treturn memo;\n\t};\n}\n\nfunction overlay (base, top) {\n\tObject.keys(top).forEach(k => {\n\t\tbase[k] = top[k];\n\t});\n\treturn base;\n}\n\nfunction transactionPromise (api, tx, progress, f) {\n\tprogress({initialising: null});\n\tlet condition = tx.condition || null;\n\tPromise.all([api().eth.accounts(), api().eth.gasPrice()])\n\t\t.then(([a, p]) => {\n\t\t\tprogress({estimating: null});\n\t\t\ttx.from = tx.from || a[0];\n\t\t\ttx.gasPrice = tx.gasPrice || p;\n\t\t\treturn tx.gas || api().eth.estimateGas(tx);\n\t\t})\n\t\t.then(g => {\n\t\t\tprogress({estimated: g});\n\t\t\ttx.gas = tx.gas || g;\n\t\t\treturn api().parity.postTransaction(tx);\n\t\t})\n\t\t.then(signerRequestId => {\n\t\t\tprogress({requested: signerRequestId});\n\t\t\treturn api().pollMethod('parity_checkRequest', signerRequestId);\n\t\t})\n\t\t.then(transactionHash => {\n\t\t\tif (condition) {\n\t\t\t\tprogress(f({signed: transactionHash, scheduled: condition}));\n\t\t\t\treturn {signed: transactionHash, scheduled: condition};\n\t\t\t} else {\n\t\t\t\tprogress({signed: transactionHash});\n\t\t\t\treturn api()\n\t\t\t\t\t.pollMethod('eth_getTransactionReceipt', transactionHash, (receipt) => receipt && receipt.blockNumber && !receipt.blockNumber.eq(0))\n\t\t\t\t\t.then(receipt => {\n\t\t\t\t\t\tprogress(f({confirmed: receipt}));\n\t\t\t\t\t\treturn receipt;\n\t\t\t\t\t});\n\t\t\t}\n\t\t})\n\t\t.catch(error => {\n\t\t\tprogress({failed: error});\n\t\t});\n}\n\nclass DeployContract extends oo7.ReactivePromise {\n\tconstructor (initBond, abiBond, optionsBond, api) {\n\t\tsuper([initBond, abiBond, optionsBond, bonds.registry], [], ([init, abi, options, registry]) => {\n\t\t\toptions.data = init;\n\t\t\tdelete options.to;\n\t\t\tlet progress = this.trigger.bind(this);\n\t\t\ttransactionPromise(api, options, progress, status => {\n\t\t\t\tif (status.confirmed) {\n\t\t\t\t\tstatus.deployed = bonds.makeContract(status.confirmed.contractAddress, abi, options.extras || []);\n\t\t\t\t}\n\t\t\t\treturn status;\n\t\t\t});\n\t\t\t// TODO: consider allowing registry of the contract here.\n\t\t}, false);\n\t\tthis.then(_ => null);\n\t}\n\tisDone (s) {\n\t\treturn !!(s.failed || s.confirmed);\n\t}\n}\n\nclass Transaction extends oo7.ReactivePromise {\n\tconstructor (tx, api) {\n\t\tsuper([tx], [], ([tx]) => {\n\t\t\tlet progress = this.trigger.bind(this);\n\t\t\ttransactionPromise(api, tx, progress, _ => _);\n\t\t}, false);\n\t\tthis.then(_ => null);\n\t}\n\tisDone (s) {\n\t\treturn !!(s.failed || s.confirmed);\n\t}\n}\n\n/**\n * @param {{api: ParityApi}} Options object\n * @returns {Bonds}\n */\nfunction createBonds (options) {\n\tconst bonds = new Bonds();\n\n\t// We only ever use api() at call-time of this function; this allows the\n\t// options (particularly the transport option) to be changed dynamically\n\t// and the datastructure to be reused.\n\tconst api = () => options.api;\n\tconst util = ParityApi.util;\n\n\tclass TransformBond extends oo7.TransformBond {\n\t\tconstructor (f, a = [], d = [], outResolveDepth = 0, resolveDepth = 1, latched = true, mayBeNull = true) {\n\t\t\tsuper(f, a, d, outResolveDepth, resolveDepth, latched, mayBeNull, api());\n\t\t}\n\t\tmap (f, outResolveDepth = 0, resolveDepth = 1) {\n\t\t\treturn new TransformBond(f, [this], [], outResolveDepth, resolveDepth);\n\t\t}\n\t\tsub (name, outResolveDepth = 0, resolveDepth = 1) {\n\t\t\treturn new TransformBond((r, n) => r[n], [this, name], [], outResolveDepth, resolveDepth);\n\t\t}\n\t\tstatic all (list) {\n\t\t\treturn new TransformBond((...args) => args, list);\n\t\t}\n\t}\n\n\tclass SubscriptionBond extends oo7.Bond {\n\t\tconstructor (module, rpcName, options = []) {\n\t\t\tsuper();\n\t\t\tthis.module = module;\n\t\t\tthis.rpcName = rpcName;\n\t\t\tthis.options = [(_, n) => this.trigger(n), ...options];\n\t\t}\n\t\tinitialise () {\n\t\t\t// promise instead of id because if a dependency triggers finalise() before id's promise is resolved the unsubscribing would call with undefined\n\t\t\tthis.subscription = api().pubsub[this.module][this.rpcName](...this.options);\n\t\t}\n\t\tfinalise () {\n\t\t\tthis.subscription.then(id => api().pubsub.unsubscribe([id]));\n\t\t}\n\t\tmap (f, outResolveDepth = 0, resolveDepth = 1) {\n\t\t\treturn new TransformBond(f, [this], [], outResolveDepth, resolveDepth);\n\t\t}\n\t\tsub (name, outResolveDepth = 0, resolveDepth = 1) {\n\t\t\treturn new TransformBond((r, n) => r[n], [this, name], [], outResolveDepth, resolveDepth);\n\t\t}\n\t\tstatic all (list) {\n\t\t\treturn new TransformBond((...args) => args, list);\n\t\t}\n\t}\n\n\tclass Signature extends oo7.ReactivePromise {\n\t\tconstructor (message, from) {\n\t\t\tsuper([message, from], [], ([message, from]) => {\n\t\t\t\tapi().parity.postSign(from, asciiToHex(message))\n\t\t\t\t\t.then(signerRequestId => {\n\t\t\t\t\t\tthis.trigger({requested: signerRequestId});\n\t\t\t\t\t\treturn api().pollMethod('parity_checkRequest', signerRequestId);\n\t\t\t\t\t})\n\t\t\t\t\t.then(signature => {\n\t\t\t\t\t\tthis.trigger({\n\t\t\t\t\t\t\tsigned: splitSignature(signature)\n\t\t\t\t\t\t});\n\t\t\t\t\t})\n\t\t\t\t\t.catch(error => {\n\t\t\t\t\t\tconsole.error(error);\n\t\t\t\t\t\tthis.trigger({failed: error});\n\t\t\t\t\t});\n\t\t\t}, false);\n\t\t\tthis.then(_ => null);\n\t\t}\n\t\tisDone (s) {\n\t\t\treturn !!s.failed || !!s.signed;\n\t\t}\n\t}\n\n\tfunction call (addr, method, args, options) {\n\t\tlet data = util.abiEncode(method.name, method.inputs.map(f => f.type), args);\n\t\tlet decode = d => util.abiDecode(method.outputs.map(f => f.type), d);\n\t\treturn api().eth.call(overlay({to: addr, data: data}, options)).then(decode);\n\t}\n\n\tfunction post (addr, method, args, options) {\n\t\tlet toOptions = (addr, method, options, ...args) => {\n\t\t\treturn overlay({to: addr, data: util.abiEncode(method.name, method.inputs.map(f => f.type), args)}, options);\n\t\t};\n\t\t// inResolveDepth is 2 to allow for Bonded `condition`values which are\n\t\t// object values in `options`.\n\t\treturn new Transaction(new TransformBond(toOptions, [addr, method, options, ...args], [], 0, 2), api);\n\t}\n\n\tfunction presub (f) {\n\t\treturn new Proxy(f, {\n\t\t\tget (receiver, name) {\n\t\t\t\tif (typeof (name) === 'string' || typeof (name) === 'number') {\n\t\t\t\t\treturn typeof (receiver[name]) !== 'undefined' ? receiver[name] : receiver(name);\n\t\t\t\t} else if (typeof (name) === 'symbol' && oo7.Bond.knowSymbol(name)) {\n\t\t\t\t\treturn receiver(oo7.Bond.fromSymbol(name));\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(`Weird value type to be subscripted by: ${typeof (name)}: ${JSON.stringify(name)}`);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tlet useSubs = false;\n\n\tbonds.time = new oo7.TimeBond();\n\n\tif (!useSubs) {\n\t\tbonds.height = new TransformBond(() => api().eth.blockNumber().then(_ => +_), [], [bonds.time]);\n\n\t\tlet onAccountsChanged = bonds.time; // TODO: more accurate notification\n\t\tlet onHardwareAccountsChanged = bonds.time; // TODO: more accurate notification\n\t\tlet onHeadChanged = bonds.height;\t// TODO: more accurate notification\n\t\t//\tlet onReorg = undefined;\t// TODO make more accurate.\n\t\tlet onSyncingChanged = bonds.time;\n\t\tlet onAuthoringDetailsChanged = bonds.time;\n\t\tlet onPeerNetChanged = bonds.time; // TODO: more accurate notification\n\t\tlet onPendingChanged = bonds.time; // TODO: more accurate notification\n\t\tlet onUnsignedChanged = bonds.time; // TODO: more accurate notification\n\t\tlet onAutoUpdateChanged = bonds.height;\n\n\t\t// eth_\n\t\tbonds.blockNumber = bonds.height;\n\t\tbonds.blockByNumber = x => new TransformBond(x => api().eth.getBlockByNumber(x), [x], []).subscriptable();// TODO: chain reorg that includes number x\n\t\tbonds.blockByHash = x => new TransformBond(x => api().eth.getBlockByHash(x), [x]).subscriptable();\n\t\tbonds.findBlock = hashOrNumberBond => new TransformBond(hashOrNumber => isNumber(hashOrNumber)\n\t\t\t? api().eth.getBlockByNumber(hashOrNumber)\n\t\t\t: api().eth.getBlockByHash(hashOrNumber),\n\t\t[hashOrNumberBond], [/* onReorg */]).subscriptable();// TODO: chain reorg that includes number x, if x is a number\n\t\tbonds.blocks = presub(bonds.findBlock);\n\t\tbonds.block = bonds.blockByNumber(bonds.height);\t// TODO: DEPRECATE AND REMOVE\n\t\tbonds.head = new TransformBond(() => api().eth.getBlockByNumber('latest'), [], [onHeadChanged]).subscriptable();// TODO: chain reorgs\n\t\tbonds.author = new TransformBond(() => api().eth.coinbase(), [], [onAccountsChanged]);\n\t\tbonds.accounts = new TransformBond(a => a.map(util.toChecksumAddress), [new TransformBond(() => api().eth.accounts(), [], [onAccountsChanged])]).subscriptable();\n\t\tbonds.defaultAccount = bonds.accounts[0];\t// TODO: make this use its subscription\n\t\tbonds.me = bonds.accounts[0];\n\t\t// TODO [ToDr] document (Post & Sign)\n\t\tbonds.post = tx => new Transaction(tx, api);\n\t\tbonds.sign = (message, from = bonds.me) => new Signature(message, from);\n\n\t\tbonds.balance = x => new TransformBond(x => api().eth.getBalance(x), [x], [onHeadChanged]);\n\t\tbonds.code = x => new TransformBond(x => api().eth.getCode(x), [x], [onHeadChanged]);\n\t\tbonds.nonce = x => new TransformBond(x => api().eth.getTransactionCount(x).then(_ => +_), [x], [onHeadChanged]);\n\t\tbonds.storageAt = (x, y) => new TransformBond((x, y) => api().eth.getStorageAt(x, y), [x, y], [onHeadChanged]);\n\n\t\tbonds.syncing = new TransformBond(() => api().eth.syncing(), [], [onSyncingChanged]);\n\t\tbonds.hashrate = new TransformBond(() => api().eth.hashrate(), [], [onAuthoringDetailsChanged]);\n\t\tbonds.authoring = new TransformBond(() => api().eth.mining(), [], [onAuthoringDetailsChanged]);\n\t\tbonds.ethProtocolVersion = new TransformBond(() => api().eth.protocolVersion(), [], []);\n\t\tbonds.gasPrice = new TransformBond(() => api().eth.gasPrice(), [], [onHeadChanged]);\n\t\tbonds.estimateGas = x => new TransformBond(x => api().eth.estimateGas(x), [x], [onHeadChanged, onPendingChanged]);\n\n\t\tbonds.blockTransactionCount = hashOrNumberBond => new TransformBond(\n\t\t\thashOrNumber => isNumber(hashOrNumber)\n\t\t\t\t? api().eth.getBlockTransactionCountByNumber(hashOrNumber).then(_ => +_)\n\t\t\t\t: api().eth.getBlockTransactionCountByHash(hashOrNumber).then(_ => +_),\n\t\t\t[hashOrNumberBond], [/* onReorg */]);\n\t\tbonds.uncleCount = hashOrNumberBond => new TransformBond(\n\t\t\thashOrNumber => isNumber(hashOrNumber)\n\t\t\t\t? api().eth.getUncleCountByBlockNumber(hashOrNumber).then(_ => +_)\n\t\t\t\t: api().eth.getUncleCountByBlockHash(hashOrNumber).then(_ => +_),\n\t\t\t[hashOrNumberBond], [/* onReorg */]).subscriptable();\n\t\tbonds.uncle = (hashOrNumberBond, indexBond) => new TransformBond(\n\t\t\t(hashOrNumber, index) => isNumber(hashOrNumber)\n\t\t\t\t? api().eth.getUncleByBlockNumber(hashOrNumber, index)\n\t\t\t\t: api().eth.getUncleByBlockHash(hashOrNumber, index),\n\t\t\t[hashOrNumberBond, indexBond], [/* onReorg */]).subscriptable();\n\t\tbonds.transaction = (hashOrNumberBond, indexOrNullBond) => new TransformBond(\n\t\t\t(hashOrNumber, indexOrNull) =>\n\t\t\t\tindexOrNull === undefined || indexOrNull === null\n\t\t\t\t\t? api().eth.getTransactionByHash(hashOrNumber)\n\t\t\t\t\t: isNumber(hashOrNumber)\n\t\t\t\t\t\t? api().eth.getTransactionByBlockNumberAndIndex(hashOrNumber, indexOrNull)\n\t\t\t\t\t\t: api().eth.getTransactionByBlockHashAndIndex(hashOrNumber, indexOrNull),\n\t\t\t[hashOrNumberBond, indexOrNullBond], [/* onReorg */]).subscriptable();\n\t\tbonds.receipt = hashBond => new TransformBond(x => api().eth.getTransactionReceipt(x), [hashBond], []).subscriptable();\n\n\t\t// web3_\n\t\tbonds.clientVersion = new TransformBond(() => api().web3.clientVersion(), [], []);\n\n\t\t// net_\n\t\tbonds.peerCount = new TransformBond(() => api().net.peerCount().then(_ => +_), [], [onPeerNetChanged]);\n\t\tbonds.listening = new TransformBond(() => api().net.listening(), [], [onPeerNetChanged]);\n\t\tbonds.chainId = new TransformBond(() => api().net.version(), [], []);\n\n\t\t// parity_\n\t\tbonds.hashContent = u => new TransformBond(x => api().parity.hashContent(x), [u], [], false);\n\t\tbonds.gasPriceHistogram = new TransformBond(() => api().parity.gasPriceHistogram(), [], [onHeadChanged]).subscriptable();\n\t\tbonds.accountsInfo = new TransformBond(() => api().parity.accountsInfo(), [], [onAccountsChanged]).subscriptable(2);\n\t\tbonds.allAccountsInfo = new TransformBond(() => api().parity.allAccountsInfo(), [], [onAccountsChanged]).subscriptable(2);\n\t\tbonds.hardwareAccountsInfo = new TransformBond(() => api().parity.hardwareAccountsInfo(), [], [onHardwareAccountsChanged]).subscriptable(2);\n\t\tbonds.mode = new TransformBond(() => api().parity.mode(), [], [bonds.height]);\n\n\t\t// ...authoring\n\t\tbonds.defaultExtraData = new TransformBond(() => api().parity.defaultExtraData(), [], [onAuthoringDetailsChanged]);\n\t\tbonds.extraData = new TransformBond(() => api().parity.extraData(), [], [onAuthoringDetailsChanged]);\n\t\tbonds.gasCeilTarget = new TransformBond(() => api().parity.gasCeilTarget(), [], [onAuthoringDetailsChanged]);\n\t\tbonds.gasFloorTarget = new TransformBond(() => api().parity.gasFloorTarget(), [], [onAuthoringDetailsChanged]);\n\t\tbonds.minGasPrice = new TransformBond(() => api().parity.minGasPrice(), [], [onAuthoringDetailsChanged]);\n\t\tbonds.transactionsLimit = new TransformBond(() => api().parity.transactionsLimit(), [], [onAuthoringDetailsChanged]);\n\n\t\t// ...chain info\n\t\tbonds.chainName = new TransformBond(() => api().parity.netChain(), [], []);\n\t\tbonds.chainStatus = new TransformBond(() => api().parity.chainStatus(), [], [onSyncingChanged]).subscriptable();\n\n\t\t// ...networking\n\t\tbonds.peers = new TransformBond(() => api().parity.netPeers(), [], [onPeerNetChanged]).subscriptable(2);\n\t\tbonds.enode = new TransformBond(() => api().parity.enode(), [], []);\n\t\tbonds.nodePort = new TransformBond(() => api().parity.netPort().then(_ => +_), [], []);\n\t\tbonds.nodeName = new TransformBond(() => api().parity.nodeName(), [], []);\n\t\tbonds.signerPort = new TransformBond(() => api().parity.signerPort().then(_ => +_), [], []);\n\t\tbonds.dappsPort = new TransformBond(() => api().parity.dappsPort().then(_ => +_), [], []);\n\t\tbonds.dappsInterface = new TransformBond(() => api().parity.dappsInterface(), [], []);\n\n\t\t// ...transaction queue\n\t\tbonds.nextNonce = new TransformBond(() => api().parity.nextNonce().then(_ => +_), [], [onPendingChanged]);\n\t\tbonds.pending = new TransformBond(() => api().parity.pendingTransactions(), [], [onPendingChanged]);\n\t\tbonds.local = new TransformBond(() => api().parity.localTransactions(), [], [onPendingChanged]).subscriptable(3);\n\t\tbonds.future = new TransformBond(() => api().parity.futureTransactions(), [], [onPendingChanged]).subscriptable(2);\n\t\tbonds.pendingStats = new TransformBond(() => api().parity.pendingTransactionsStats(), [], [onPendingChanged]).subscriptable(2);\n\t\tbonds.unsignedCount = new TransformBond(() => api().parity.parity_unsignedTransactionsCount().then(_ => +_), [], [onUnsignedChanged]);\n\n\t\t// ...auto-update\n\t\tbonds.releasesInfo = new TransformBond(() => api().parity.releasesInfo(), [], [onAutoUpdateChanged]).subscriptable();\n\t\tbonds.versionInfo = new TransformBond(() => api().parity.versionInfo(), [], [onAutoUpdateChanged]).subscriptable();\n\t\tbonds.consensusCapability = new TransformBond(() => api().parity.consensusCapability(), [], [onAutoUpdateChanged]);\n\t\tbonds.upgradeReady = new TransformBond(() => api().parity.upgradeReady(), [], [onAutoUpdateChanged]).subscriptable();\n\t} else {\n\t\tbonds.height = new TransformBond(_ => +_, [new SubscriptionBond('eth', 'blockNumber')]).subscriptable();\n\n\t\tlet onAutoUpdateChanged = bonds.height;\n\n\t\t// eth_\n\t\tbonds.blockNumber = bonds.height;\n\t\tbonds.blockByNumber = numberBond => new TransformBond(number => new SubscriptionBond('eth', 'getBlockByNumber', [number]), [numberBond]).subscriptable();\n\t\tbonds.blockByHash = x => new TransformBond(x => new SubscriptionBond('eth', 'getBlockByHash', [x]), [x]).subscriptable();\n\t\tbonds.findBlock = hashOrNumberBond => new TransformBond(hashOrNumber => isNumber(hashOrNumber)\n\t\t\t? new SubscriptionBond('eth', 'getBlockByNumber', [hashOrNumber])\n\t\t\t: new SubscriptionBond('eth', 'getBlockByHash', [hashOrNumber]),\n\t\t[hashOrNumberBond]).subscriptable();\n\t\tbonds.blocks = presub(bonds.findBlock);\n\t\tbonds.block = bonds.blockByNumber(bonds.height);\t// TODO: DEPRECATE AND REMOVE\n\t\tbonds.head = new SubscriptionBond('eth', 'getBlockByNumber', ['latest']).subscriptable();\n\t\tbonds.author = new SubscriptionBond('eth', 'coinbase');\n\t\tbonds.me = new SubscriptionBond('parity', 'defaultAccount');\n\t\tbonds.defaultAccount = bonds.me;\t// TODO: DEPRECATE\n\t\tbonds.accounts = new SubscriptionBond('eth', 'accounts').subscriptable();\n\t\tbonds.post = tx => new Transaction(tx, api);\n\t\tbonds.sign = (message, from = bonds.me) => new Signature(message, from);\n\n\t\tbonds.balance = x => new TransformBond(x => new SubscriptionBond('eth', 'getBalance', [x]), [x]);\n\t\tbonds.code = x => new TransformBond(x => new SubscriptionBond('eth', 'getCode', [x]), [x]);\n\t\tbonds.nonce = x => new TransformBond(x => new SubscriptionBond('eth', 'getTransactionCount', [x]), [x]); // TODO: then(_ => +_) Depth 2 if second TransformBond or apply to result\n\t\tbonds.storageAt = (x, y) => new TransformBond((x, y) => new SubscriptionBond('eth', 'getStorageAt', [x, y]), [x, y]);\n\n\t\tbonds.syncing = new SubscriptionBond('eth', 'syncing');\n\t\tbonds.hashrate = new SubscriptionBond('eth', 'hashrate');\n\t\tbonds.authoring = new SubscriptionBond('eth', 'mining');\n\t\tbonds.ethProtocolVersion = new SubscriptionBond('eth', 'protocolVersion');\n\t\tbonds.gasPrice = new SubscriptionBond('eth', 'gasPrice');\n\t\tbonds.estimateGas = x => new TransformBond(x => new SubscriptionBond('eth', 'estimateGas', [x]), [x]);\n\n\t\tbonds.blockTransactionCount = hashOrNumberBond => new TransformBond(\n\t\t\thashOrNumber => isNumber(hashOrNumber)\n\t\t\t\t? new TransformBond(_ => +_, [new SubscriptionBond('eth', 'getBlockTransactionCountByNumber', [hashOrNumber])])\n\t\t\t\t: new TransformBond(_ => +_, [new SubscriptionBond('eth', 'getBlockTransactionCountByHash', [hashOrNumber])]),\n\t\t\t[hashOrNumberBond]);\n\t\tbonds.uncleCount = hashOrNumberBond => new TransformBond(\n\t\t\thashOrNumber => isNumber(hashOrNumber)\n\t\t\t\t? new TransformBond(_ => +_, [new SubscriptionBond('eth', 'getUncleCountByBlockNumber', [hashOrNumber])])\n\t\t\t\t: new TransformBond(_ => +_, [new SubscriptionBond('eth', 'getUncleCountByBlockHash', [hashOrNumber])]),\n\t\t\t[hashOrNumberBond]).subscriptable();\n\t\tbonds.uncle = (hashOrNumberBond, indexBond) => new TransformBond(\n\t\t\t(hashOrNumber, index) => isNumber(hashOrNumber)\n\t\t\t\t? new SubscriptionBond('eth', 'getUncleByBlockNumberAndIndex', [hashOrNumber, index])\n\t\t\t\t: new SubscriptionBond('eth', 'getUncleByBlockHashAndIndex', [hashOrNumber, index]),\n\t\t\t[hashOrNumberBond, indexBond]).subscriptable();\n\n\t\tbonds.transaction = (hashOrNumberBond, indexOrNullBond) => new TransformBond(\n\t\t\t(hashOrNumber, indexOrNull) =>\n\t\t\t\tindexOrNull === undefined || indexOrNull === null\n\t\t\t\t\t? new SubscriptionBond('eth', 'getTransactionByHash', [hashOrNumber])\n\t\t\t\t\t: isNumber(hashOrNumber)\n\t\t\t\t\t\t? new SubscriptionBond('eth', 'getTransactionByBlockNumberAndIndex', [hashOrNumber, indexOrNull])\n\t\t\t\t\t\t: new SubscriptionBond('eth', 'getTransactionByBlockHashAndIndex', [hashOrNumber, indexOrNull]),\n\t\t\t[hashOrNumberBond, indexOrNullBond]).subscriptable();\n\t\tbonds.receipt = hashBond => new TransformBond(x => new SubscriptionBond('eth', 'getTransactionReceipt', [x]), [hashBond]).subscriptable();\n\n\t\t// web3_\n\t\tbonds.clientVersion = new TransformBond(() => api().web3.clientVersion(), [], []);\n\n\t\t// net_\n\t\tbonds.peerCount = new TransformBond(_ => +_, [new SubscriptionBond('net', 'peerCount')]);\n\t\tbonds.listening = new SubscriptionBond('net', 'listening');\n\t\tbonds.chainId = new SubscriptionBond('net', 'version');\n\n\t\t// parity_\n\t\tbonds.hashContent = u => new TransformBond(x => api().parity.hashContent(x), [u], [], false);\n\t\tbonds.gasPriceHistogram = new SubscriptionBond('parity', 'gasPriceHistogram').subscriptable();\n\t\tbonds.mode = new SubscriptionBond('parity', 'mode');\n\t\tbonds.accountsInfo = new SubscriptionBond('parity', 'accountsInfo').subscriptable(2);\n\t\tbonds.allAccountsInfo = new SubscriptionBond('parity', 'allAccountsInfo').subscriptable(2);\n\t\tbonds.hardwareAccountsInfo = new SubscriptionBond('parity', 'hardwareAccountsInfo').subscriptable(2);\n\n\t\t// ...authoring\n\t\tbonds.defaultExtraData = new SubscriptionBond('parity', 'defaultExtraData');\n\t\tbonds.extraData = new SubscriptionBond('parity', 'extraData');\n\t\tbonds.gasCeilTarget = new SubscriptionBond('parity', 'gasCeilTarget');\n\t\tbonds.gasFloorTarget = new SubscriptionBond('parity', 'gasFloorTarget');\n\t\tbonds.minGasPrice = new SubscriptionBond('parity', 'minGasPrice');\n\t\tbonds.transactionsLimit = new SubscriptionBond('parity', 'transactionsLimit');\n\n\t\t// ...chain info\n\t\tbonds.chainName = new SubscriptionBond('parity', 'netChain');\n\t\tbonds.chainStatus = new SubscriptionBond('parity', 'chainStatus').subscriptable();\n\n\t\t// ...networking\n\t\tbonds.peers = new SubscriptionBond('parity', 'netPeers').subscriptable(2);\n\t\tbonds.enode = new SubscriptionBond('parity', 'enode');\n\t\tbonds.nodePort = new TransformBond(_ => +_, [new SubscriptionBond('parity', 'netPort')]);\n\t\tbonds.nodeName = new SubscriptionBond('parity', 'nodeName');\n\t\t// Where defined ?\n\t\tbonds.signerPort = new TransformBond(() => api().parity.signerPort().then(_ => +_), [], []);\n\t\tbonds.dappsPort = new TransformBond(() => api().parity.dappsPort().then(_ => +_), [], []);\n\t\tbonds.dappsInterface = new TransformBond(() => api().parity.dappsInterface(), [], []);\n\n\t\t// ...transaction queue\n\t\tbonds.nextNonce = new TransformBond(_ => +_, [new SubscriptionBond('parity', 'nextNonce')]);\n\t\tbonds.pending = new SubscriptionBond('parity', 'pendingTransactions').subscriptable();\n\t\tbonds.local = new SubscriptionBond('parity', 'localTransactions').subscriptable(3);\n\t\tbonds.future = new SubscriptionBond('parity', 'futureTransactions').subscriptable(2);\n\t\tbonds.pendingStats = new SubscriptionBond('parity', 'pendingTransactionsStats').subscriptable(2);\n\t\tbonds.unsignedCount = new TransformBond(_ => +_, [new SubscriptionBond('parity', 'unsignedTransactionsCount')]);\n\t\tbonds.requestsToConfirm = new SubscriptionBond('signer', 'requestsToConfirm');\n\n\t\t// ...auto-update\n\t\tbonds.releasesInfo = new SubscriptionBond('parity', 'releasesInfo').subscriptable();\n\t\tbonds.versionInfo = new SubscriptionBond('parity', 'versionInfo').subscriptable();\n\t\tbonds.consensusCapability = new SubscriptionBond('parity', 'consensusCapability').subscriptable();\n\t\tbonds.upgradeReady = new TransformBond(() => api().parity.upgradeReady(), [], [onAutoUpdateChanged]).subscriptable();\n\t}\n\n\t// trace TODO: Implement contract object with new trace_many feature\n\tbonds.replayTx = (x, whatTrace) => new TransformBond((x, whatTrace) => api().trace.replayTransaction(x, whatTrace), [x, whatTrace], []).subscriptable();\n\tbonds.callTx = (x, whatTrace, blockNumber) => new TransformBond((x, whatTrace, blockNumber) => api().trace.call(x, whatTrace, blockNumber), [x, whatTrace, blockNumber], []).subscriptable();\n\n\tfunction traceCall (addr, method, args, options) {\n\t\tlet data = util.abiEncode(method.name, method.inputs.map(f => f.type), args);\n\t\tlet decode = d => util.abiDecode(method.outputs.map(f => f.type), d);\n\t\tlet traceMode = options.traceMode;\n\t\tdelete options.traceMode;\n\t\treturn api().trace.call(overlay({to: addr, data: data}, options), traceMode, 'latest').then(decode);\n\t}\n\n\tbonds.deployContract = function (init, abi, options = {}) {\n\t\treturn new DeployContract(init, abi, options, api);\n\t};\n\n\tbonds.makeContract = function (address, abi, extras = [], debug = false) {\n\t\tvar r = { address: address };\n\t\tlet unwrapIfOne = a => a.length === 1 ? a[0] : a;\n\t\tabi.forEach(i => {\n\t\t\tif (i.type === 'function' && i.constant) {\n\t\t\t\tlet f = function (...args) {\n\t\t\t\t\tvar options = args.length === i.inputs.length + 1 ? args.pop() : {};\n\t\t\t\t\tif (args.length !== i.inputs.length) {\n\t\t\t\t\t\tthrow new Error(`Invalid number of arguments to ${i.name}. Expected ${i.inputs.length}, got ${args.length}.`);\n\t\t\t\t\t}\n\t\t\t\t\tlet f = (addr, ...fargs) => debug\n\t\t\t\t\t\t? traceCall(address, i, args, options)\n\t\t\t\t\t\t: call(addr, i, fargs, options)\n\t\t\t\t\t\t\t.then(rets => rets.map((r, o) => cleanup(r, i.outputs[o].type, api)))\n\t\t\t\t\t\t\t.then(unwrapIfOne);\n\t\t\t\t\treturn new TransformBond(f, [address, ...args], [bonds.height]).subscriptable();\t// TODO: should be subscription on contract events\n\t\t\t\t};\n\t\t\t\tr[i.name] = (i.inputs.length === 0) ? memoized(f) : (i.inputs.length === 1) ? presub(f) : f;\n\t\t\t\tr[i.name].args = i.inputs;\n\t\t\t}\n\t\t});\n\t\textras.forEach(i => {\n\t\t\tlet f = function (...args) {\n\t\t\t\tlet expectedInputs = (i.numInputs || i.args.length);\n\t\t\t\tvar options = args.length === expectedInputs + 1 ? args.pop() : {};\n\t\t\t\tif (args.length !== expectedInputs) {\n\t\t\t\t\tthrow new Error(`Invalid number of arguments to ${i.name}. Expected ${expectedInputs}, got ${args.length}. ${args}`);\n\t\t\t\t}\n\t\t\t\tlet c = abi.find(j => j.name === i.method);\n\t\t\t\tlet f = (addr, ...fargs) => {\n\t\t\t\t\tlet args = i.args.map((v, index) => v === null ? fargs[index] : typeof (v) === 'function' ? v(fargs[index]) : v);\n\t\t\t\t\treturn debug\n\t\t\t\t\t\t? traceCall(address, i, args, options)\n\t\t\t\t\t\t: call(addr, c, args, options).then(unwrapIfOne);\n\t\t\t\t};\n\t\t\t\treturn new TransformBond(f, [address, ...args], [bonds.height]).subscriptable();\t// TODO: should be subscription on contract events\n\t\t\t};\n\t\t\tr[i.name] = (i.args.length === 1) ? presub(f) : f;\n\t\t\tr[i.name].args = i.args;\n\t\t});\n\t\tabi.forEach(i => {\n\t\t\tif (i.type === 'function' && !i.constant) {\n\t\t\t\tr[i.name] = function (...args) {\n\t\t\t\t\tvar options = args.length === i.inputs.length + 1 ? args.pop() : {};\n\t\t\t\t\tif (args.length !== i.inputs.length) { throw new Error(`Invalid number of arguments to ${i.name}. Expected ${i.inputs.length}, got ${args.length}. ${args}`); }\n\t\t\t\t\treturn debug\n\t\t\t\t\t\t? traceCall(address, i, args, options)\n\t\t\t\t\t\t: post(address, i, args, options).subscriptable();\n\t\t\t\t};\n\t\t\t\tr[i.name].args = i.inputs;\n\t\t\t}\n\t\t});\n\t\tvar eventLookup = {};\n\t\tabi.filter(i => i.type === 'event').forEach(i => {\n\t\t\teventLookup[util.abiSignature(i.name, i.inputs.map(f => f.type))] = i.name;\n\t\t});\n\n\t\tfunction prepareIndexEncode (v, t, top = true) {\n\t\t\tif (v instanceof Array) {\n\t\t\t\tif (top) {\n\t\t\t\t\treturn v.map(x => prepareIndexEncode(x, t, false));\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error('Invalid type');\n\t\t\t\t}\n\t\t\t}\n\t\t\tvar val;\n\t\t\tif (t === 'string' || t === 'bytes') {\n\t\t\t\tval = util.sha3(v);\n\t\t\t} else {\n\t\t\t\tval = util.abiEncode(null, [t], [v]);\n\t\t\t}\n\t\t\tif (val.length !== 66) {\n\t\t\t\tthrow new Error('Invalid length');\n\t\t\t}\n\t\t\treturn val;\n\t\t}\n\n\t\tabi.forEach(i => {\n\t\t\tif (i.type === 'event') {\n\t\t\t\tr[i.name] = function (indexed = {}, params = {}) {\n\t\t\t\t\treturn new TransformBond((addr, indexed) => {\n\t\t\t\t\t\tvar topics = [util.abiSignature(i.name, i.inputs.map(f => f.type))];\n\t\t\t\t\t\ti.inputs.filter(f => f.indexed).forEach(f => {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\ttopics.push(indexed[f.name] ? prepareIndexEncode(indexed[f.name], f.type) : null);\n\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\tthrow new Error(`Couldn't encode indexed parameter ${f.name} of type ${f.type} with value ${indexed[f.name]}`);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn api().eth.getLogs({\n\t\t\t\t\t\t\taddress: addr,\n\t\t\t\t\t\t\tfromBlock: params.fromBlock || 0,\n\t\t\t\t\t\t\ttoBlock: params.toBlock || 'pending',\n\t\t\t\t\t\t\tlimit: params.limit || 10,\n\t\t\t\t\t\t\ttopics: topics\n\t\t\t\t\t\t}).then(logs => logs.map(l => {\n\t\t\t\t\t\t\tl.blockNumber = +l.blockNumber;\n\t\t\t\t\t\t\tl.transactionIndex = +l.transactionIndex;\n\t\t\t\t\t\t\tl.logIndex = +l.logIndex;\n\t\t\t\t\t\t\tl.transactionLogIndex = +l.transactionLogIndex;\n\t\t\t\t\t\t\tvar e = {};\n\t\t\t\t\t\t\tlet unins = i.inputs.filter(f => !f.indexed);\n\t\t\t\t\t\t\tutil.abiDecode(unins.map(f => f.type), l.data).forEach((v, j) => {\n\t\t\t\t\t\t\t\tlet f = unins[j];\n\t\t\t\t\t\t\t\tif (v instanceof Array && !f.type.endsWith(']')) {\n\t\t\t\t\t\t\t\t\tv = util.bytesToHex(v);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (f.type.substr(0, 4) === 'uint' && +f.type.substr(4) <= 48) {\n\t\t\t\t\t\t\t\t\tv = +v;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\te[f.name] = v;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\ti.inputs.filter(f => f.indexed).forEach((f, j) => {\n\t\t\t\t\t\t\t\tif (f.type === 'string' || f.type === 'bytes') {\n\t\t\t\t\t\t\t\t\te[f.name] = l.topics[1 + j];\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tvar v = util.abiDecode([f.type], l.topics[1 + j])[0];\n\t\t\t\t\t\t\t\t\tif (v instanceof Array) {\n\t\t\t\t\t\t\t\t\t\tv = util.bytesToHex(v);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif (f.type.substr(0, 4) === 'uint' && +f.type.substr(4) <= 48) {\n\t\t\t\t\t\t\t\t\t\tv = +v;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\te[f.name] = v;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\te.event = eventLookup[l.topics[0]];\n\t\t\t\t\t\t\te.log = l;\n\t\t\t\t\t\t\treturn e;\n\t\t\t\t\t\t}));\n\t\t\t\t\t}, [address, indexed], [bonds.height]).subscriptable();\n\t\t\t\t};\n\t\t\t\tr[i.name].args = i.inputs;\n\t\t\t}\n\t\t});\n\t\treturn r;\n\t};\n\n\tif (useSubs) {\n\t\tbonds.registry = bonds.makeContract(new SubscriptionBond('parity', 'registryAddress'), RegistryABI, RegistryExtras);\n\t} else {\n\t\tbonds.registry = bonds.makeContract(new TransformBond(() => api().parity.registryAddress(), [], [bonds.time]), RegistryABI, RegistryExtras);\n\t}\n\n\tbonds.githubhint = bonds.makeContract(bonds.registry.lookupAddress('githubhint', 'A'), GitHubHintABI);\n\tbonds.operations = bonds.makeContract(bonds.registry.lookupAddress('operations', 'A'), OperationsABI);\n\tbonds.badgereg = bonds.makeContract(bonds.registry.lookupAddress('badgereg', 'A'), BadgeRegABI);\n\tbonds.tokenreg = bonds.makeContract(bonds.registry.lookupAddress('tokenreg', 'A'), TokenRegABI);\n\n\tbonds.badges = new TransformBond(n => {\n\t\tvar ret = [];\n\t\tfor (var i = 0; i < +n; ++i) {\n\t\t\tlet id = i;\n\t\t\tret.push(oo7.Bond.all([\n\t\t\t\tbonds.badgereg.badge(id),\n\t\t\t\tbonds.badgereg.meta(id, 'IMG'),\n\t\t\t\tbonds.badgereg.meta(id, 'CAPTION')\n\t\t\t]).map(([[addr, name, owner], img, caption]) => ({\n\t\t\t\tid,\n\t\t\t\tname,\n\t\t\t\timg,\n\t\t\t\tcaption,\n\t\t\t\tbadge: bonds.makeContract(addr, BadgeABI)\n\t\t\t}))\n\t\t\t);\n\t\t}\n\t\treturn ret;\n\t}, [bonds.badgereg.badgeCount()], [], 1);\n\n\tbonds.badgesOf = address => new TransformBond(\n\t\t(addr, bads) => bads.map(b => ({\n\t\t\tcertified: b.badge.certified(addr),\n\t\t\tbadge: b.badge,\n\t\t\tid: b.id,\n\t\t\timg: b.img,\n\t\t\tcaption: b.caption,\n\t\t\tname: b.name\n\t\t})),\n\t\t[address, bonds.badges], [], 2\n\t).map(all => all.filter(_ => _.certified));\n\n\tbonds.tokens = new TransformBond(n => {\n\t\tvar ret = [];\n\t\tfor (var i = 0; i < +n; ++i) {\n\t\t\tlet id = i;\n\t\t\tret.push(oo7.Bond.all([\n\t\t\t\tbonds.tokenreg.token(id),\n\t\t\t\tbonds.tokenreg.meta(id, 'IMG'),\n\t\t\t\tbonds.tokenreg.meta(id, 'CAPTION')\n\t\t\t]).map(([[addr, tla, base, name, owner], img, caption]) => ({\n\t\t\t\tid,\n\t\t\t\ttla,\n\t\t\t\tbase,\n\t\t\t\tname,\n\t\t\t\timg,\n\t\t\t\tcaption,\n\t\t\t\ttoken: bonds.makeContract(addr, TokenABI)\n\t\t\t}))\n\t\t\t);\n\t\t}\n\t\treturn ret;\n\t}, [bonds.tokenreg.tokenCount()], [], 1);\n\n\tbonds.tokensOf = address => new TransformBond(\n\t\t(addr, bads) => bads.map(b => ({\n\t\t\tbalance: b.token.balanceOf(addr),\n\t\t\ttoken: b.token,\n\t\t\tid: b.id,\n\t\t\tname: b.name,\n\t\t\ttla: b.tla,\n\t\t\tbase: b.base,\n\t\t\timg: b.img,\n\t\t\tcaption: b.caption\n\t\t})),\n\t\t[address, bonds.tokens], [], 2\n\t).map(all => all.filter(_ => _.balance.gt(0)));\n\n\tbonds.namesOf = address => new TransformBond((reg, addr, accs) => ({\n\t\towned: accs[addr] ? accs[addr].name : null,\n\t\tregistry: reg || null\n\t}), [bonds.registry.reverse(address), address, bonds.accountsInfo]);\n\n\tbonds.registry.names = oo7.Bond.mapAll([bonds.registry.ReverseConfirmed({}, {limit: 100}), bonds.accountsInfo],\n\t\t(reg, info) => {\n\t\t\tlet r = {};\n\t\t\tObject.keys(info).forEach(k => r[k] = info[k].name);\n\t\t\treg.forEach(a => r[a.reverse] = bonds.registry.reverse(a.reverse));\n\t\t\treturn r;\n\t\t}, 1);\n\n\treturn bonds;\n}\n\nconst t = defaultProvider();\nconst options = t ? { api: new ParityApi(t) } : null;\n/** @type {Bonds} */\nconst bonds = options ? createBonds(options) : null;\n\nconst isOwned = addr => oo7.Bond.mapAll([addr, bonds.accounts], (a, as) => as.indexOf(a) !== -1);\nconst isNotOwned = addr => oo7.Bond.mapAll([addr, bonds.accounts], (a, as) => as.indexOf(a) === -1);\n\nmodule.exports = {\n\t// Bonds stuff\n\t// abiPolyfill,\n\toptions,\n\tbonds,\n\tBonds,\n\tcreateBonds,\n\n\t// Util functions\n\tisOwned,\n\tisNotOwned,\n\tasciiToHex,\n\tbytesToHex,\n\thexToAscii,\n\tisAddressValid,\n\ttoChecksumAddress,\n\tsha3,\n\tcapitalizeFirstLetter,\n\tsingleton,\n\tdenominations,\n\tdenominationMultiplier,\n\tinterpretRender,\n\tcombineValue,\n\tdefDenom,\n\tformatValue,\n\tformatValueNoDenom,\n\tformatToExponential,\n\tinterpretQuantity,\n\tsplitValue,\n\tformatBalance,\n\tformatBlockNumber,\n\tisNullData,\n\tsplitSignature,\n\tremoveSigningPrefix,\n\tcleanup,\n\n\t// ABIs\n\tabiPolyfill,\n\tRegistryABI,\n\tRegistryExtras,\n\tGitHubHintABI,\n\tOperationsABI,\n\tBadgeRegABI,\n\tTokenRegABI,\n\tBadgeABI,\n\tTokenABI\n};\n",
    "static": true,
    "longname": "/home/tomusdrw/workspace/oo7-new/packages/oo7-parity/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 211,
    "kind": "function",
    "name": "defaultProvider",
    "memberof": "packages/oo7-parity/src/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/oo7-parity/src/index.js~defaultProvider",
    "access": "public",
    "export": false,
    "importPath": "./packages/oo7-parity/src/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 212,
    "kind": "function",
    "name": "isNumber",
    "memberof": "packages/oo7-parity/src/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/oo7-parity/src/index.js~isNumber",
    "access": "public",
    "export": false,
    "importPath": "./packages/oo7-parity/src/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 766,
    "undocument": true,
    "params": [
      {
        "name": "n",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 213,
    "kind": "function",
    "name": "memoized",
    "memberof": "packages/oo7-parity/src/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/oo7-parity/src/index.js~memoized",
    "access": "public",
    "export": false,
    "importPath": "./packages/oo7-parity/src/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 770,
    "undocument": true,
    "params": [
      {
        "name": "f",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 214,
    "kind": "function",
    "name": "overlay",
    "memberof": "packages/oo7-parity/src/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/oo7-parity/src/index.js~overlay",
    "access": "public",
    "export": false,
    "importPath": "./packages/oo7-parity/src/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 778,
    "undocument": true,
    "params": [
      {
        "name": "base",
        "types": [
          "*"
        ]
      },
      {
        "name": "top",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 215,
    "kind": "function",
    "name": "transactionPromise",
    "memberof": "packages/oo7-parity/src/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/oo7-parity/src/index.js~transactionPromise",
    "access": "public",
    "export": false,
    "importPath": "./packages/oo7-parity/src/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 785,
    "undocument": true,
    "params": [
      {
        "name": "api",
        "types": [
          "*"
        ]
      },
      {
        "name": "tx",
        "types": [
          "*"
        ]
      },
      {
        "name": "progress",
        "types": [
          "*"
        ]
      },
      {
        "name": "f",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 216,
    "kind": "class",
    "name": "DeployContract",
    "memberof": "packages/oo7-parity/src/index.js",
    "static": true,
    "longname": "packages/oo7-parity/src/index.js~DeployContract",
    "access": "public",
    "export": false,
    "importPath": "./packages/oo7-parity/src/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 823,
    "undocument": true,
    "interface": false,
    "extends": [
      "oo7~oo7.ReactivePromise"
    ],
    "ignore": true
  },
  {
    "__docId__": 217,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/oo7-parity/src/index.js~DeployContract",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~DeployContract#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 824,
    "undocument": true
  },
  {
    "__docId__": 218,
    "kind": "method",
    "name": "isDone",
    "memberof": "packages/oo7-parity/src/index.js~DeployContract",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~DeployContract#isDone",
    "access": "public",
    "description": null,
    "lineNumber": 839,
    "undocument": true,
    "params": [
      {
        "name": "s",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 219,
    "kind": "class",
    "name": "Transaction",
    "memberof": "packages/oo7-parity/src/index.js",
    "static": true,
    "longname": "packages/oo7-parity/src/index.js~Transaction",
    "access": "public",
    "export": false,
    "importPath": "./packages/oo7-parity/src/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 844,
    "undocument": true,
    "interface": false,
    "extends": [
      "oo7~oo7.ReactivePromise"
    ],
    "ignore": true
  },
  {
    "__docId__": 220,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/oo7-parity/src/index.js~Transaction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Transaction#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 845,
    "undocument": true
  },
  {
    "__docId__": 221,
    "kind": "method",
    "name": "isDone",
    "memberof": "packages/oo7-parity/src/index.js~Transaction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Transaction#isDone",
    "access": "public",
    "description": null,
    "lineNumber": 852,
    "undocument": true,
    "params": [
      {
        "name": "s",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 222,
    "kind": "variable",
    "name": "t",
    "memberof": "packages/oo7-parity/src/index.js",
    "static": true,
    "longname": "packages/oo7-parity/src/index.js~t",
    "access": "public",
    "export": false,
    "importPath": "./packages/oo7-parity/src/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1452,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 223,
    "kind": "variable",
    "name": "options",
    "memberof": "packages/oo7-parity/src/index.js",
    "static": true,
    "longname": "packages/oo7-parity/src/index.js~options",
    "access": "public",
    "export": true,
    "importPath": "./packages/oo7-parity/src/index.js",
    "importStyle": "{options}",
    "description": null,
    "lineNumber": 1453,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 224,
    "kind": "variable",
    "name": "bonds",
    "memberof": "packages/oo7-parity/src/index.js",
    "static": true,
    "longname": "packages/oo7-parity/src/index.js~bonds",
    "access": "public",
    "export": true,
    "importPath": "./packages/oo7-parity/src/index.js",
    "importStyle": "{bonds}",
    "description": null,
    "lineNumber": 1455,
    "type": {
      "nullable": null,
      "types": [
        "Bonds"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 225,
    "kind": "class",
    "name": "Bonds",
    "memberof": "packages/oo7-parity/src/index.js",
    "static": true,
    "longname": "packages/oo7-parity/src/index.js~Bonds",
    "access": "public",
    "export": true,
    "importPath": "./packages/oo7-parity/src/index.js",
    "importStyle": "{Bonds}",
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 226,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#constructor",
    "access": "public",
    "description": "Creates a new oo7-parity bonds aggregate object with given ethereum provider.\n\nAdditional documentation can be found at https://wiki.parity.io/oo7-Parity-Reference.html",
    "lineNumber": 85,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Bonds}"
      }
    ],
    "params": [
      {
        "nullable": true,
        "types": [
          "Provider"
        ],
        "spread": false,
        "optional": false,
        "name": "provider",
        "description": "Web3-compatible transport Provider (i.e. `window.ethereum`). Uses a sane default if not provided."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Bonds"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 227,
    "kind": "member",
    "name": "time",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#time",
    "access": "public",
    "description": "\nA {@link Bond} representing latest time. Updated every second.",
    "examples": [
      "const { bonds } = require('oo7-parity')\n\nbonds\n.time\n.tie(console.log) // prints time periodically"
    ],
    "lineNumber": 103,
    "type": {
      "nullable": null,
      "types": [
        "TimeBond"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 228,
    "kind": "member",
    "name": "height",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#height",
    "access": "public",
    "description": "A {@link Bond} representing latest block number.\nAlias for {@link Bonds.blockNumber}",
    "lineNumber": 111,
    "type": {
      "nullable": null,
      "types": [
        "Bond.<Number>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 229,
    "kind": "member",
    "name": "blockNumber",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#blockNumber",
    "access": "public",
    "description": "A {@link Bond} representing latest block number.",
    "examples": [
      "const { bonds } = require('oo7-parity')\n\nbonds\n.blockNumber\n.tie(console.log) // prints latest block number when it changes"
    ],
    "lineNumber": 125,
    "type": {
      "nullable": null,
      "types": [
        "Bond.<Number>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 230,
    "kind": "member",
    "name": "blockByNumber",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#blockByNumber",
    "access": "public",
    "description": "A function returning bond that represents given block content.",
    "examples": [
      "const { bonds } = require('oo7-parity')\n\nbonds\n.blockByNumber(bonds.height)\n.tie(console.log) // prints latest block"
    ],
    "lineNumber": 140,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Bond.<Block>} block bond"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "number",
          "Bond"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "block number"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Bond.<Block>"
      ],
      "spread": false,
      "description": "block bond"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 231,
    "kind": "member",
    "name": "blockByHash",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#blockByHash",
    "access": "public",
    "description": "A function returning bond that represents given block content.",
    "examples": [
      "const { bonds } = require('oo7-parity')\n\nbonds\n.blockByHash('0x2b23d04567313fa141ca396f1e2620b62ab0c5d69f8c77157118f8d7671e1f4d')\n.tie(console.log) // prints block with given hash"
    ],
    "lineNumber": 155,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Bond.<Block>} block bond"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "number",
          "Bond"
        ],
        "spread": false,
        "optional": false,
        "name": "hash",
        "description": "block hash"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Bond.<Block>"
      ],
      "spread": false,
      "description": "block bond"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 232,
    "kind": "member",
    "name": "findBlock",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#findBlock",
    "access": "public",
    "description": "Similar to {@link Bonds.blockByNumber} and {@link Bonds.blockByHash},\nbut accepts both hashes and numbers as arguments.",
    "examples": [
      "const { bonds } = require('oo7-parity')\n\nbonds\n.findBlock('0x2b23d04567313fa141ca396f1e2620b62ab0c5d69f8c77157118f8d7671e1f4d')\n.tie(console.log) // prints block with given hash"
    ],
    "lineNumber": 171,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Bond.<Block>} block bond"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "number",
          "Bond"
        ],
        "spread": false,
        "optional": false,
        "name": "hashOrNumber",
        "description": "block hash or block number"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Bond.<Block>"
      ],
      "spread": false,
      "description": "block bond"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 233,
    "kind": "member",
    "name": "blocks",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#blocks",
    "access": "public",
    "description": "A subscriptable version of {@link Bonds.findBlock}\n\nYou can retrieve bonds given block numbers or hashes or other Bonds.",
    "examples": [
      "const { bonds } = require('oo7-parity')\n\nbonds\n.blocks['0x2b23d04567313fa141ca396f1e2620b62ab0c5d69f8c77157118f8d7671e1f4d']\n.tie(console.log) // prints block with given hash\n\nbonds\n.blocks[bonds.height]\n.tie(console.log) // prints latest block every time it changes"
    ],
    "lineNumber": 191,
    "type": {
      "nullable": null,
      "types": [
        "Object.<string|number|Bond, Bond>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 234,
    "kind": "member",
    "name": "head",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#head",
    "access": "public",
    "description": "A {@link Bond} for latest block.",
    "examples": [
      "const { bonds } = require('oo7-parity')\n\nbonds\n.head\n.tie(console.log) // prints latest block every time it changes"
    ],
    "lineNumber": 206,
    "type": {
      "nullable": null,
      "types": [
        "Bond.<Block>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 235,
    "kind": "member",
    "name": "author",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#author",
    "access": "public",
    "description": "A {@link Bond} for currently set block author.\nRepresents a result of `eth_coinbase` RPC call.",
    "examples": [
      "const { bonds } = require('oo7-parity')\n\nbonds\n.author\n.tie(console.log) // prints currently set block author (coinbase/miner) every time it changes"
    ],
    "lineNumber": 222,
    "type": {
      "nullable": null,
      "types": [
        "Bond.<Address>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 236,
    "kind": "member",
    "name": "accounts",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#accounts",
    "access": "public",
    "description": "List of accounts managed by the node.",
    "examples": [
      "const { bonds } = require('oo7-parity')\n\nbonds\n.accounts\n.tie(console.log) // prints accounts list every time it changes"
    ],
    "lineNumber": 237,
    "type": {
      "nullable": null,
      "types": [
        "Bond.<Address[]>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 237,
    "kind": "member",
    "name": "defaultAccount",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#defaultAccount",
    "access": "public",
    "description": "User-selected default account for this dapp.",
    "examples": [
      "const { bonds } = require('oo7-parity')\n\nbonds\n.defaultAccount\n.tie(console.log) // prints default account every time it changes"
    ],
    "lineNumber": 252,
    "type": {
      "nullable": null,
      "types": [
        "Bond.<Address>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 238,
    "kind": "member",
    "name": "me",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#me",
    "access": "public",
    "description": "Alias for {@link Bonds.defaultAccount}",
    "examples": [
      "const { bonds } = require('oo7-parity')\n\nbonds\n.me\n.tie(console.log) // prints default account every time it changes"
    ],
    "lineNumber": 267,
    "type": {
      "nullable": null,
      "types": [
        "Bond.<Address>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 239,
    "kind": "member",
    "name": "post",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#post",
    "access": "public",
    "description": "Posts a transaction to the network.",
    "examples": [
      "const { bonds } = require('oo7-parity')\n\nbonds\n.post({ to: bonds.me, value: 0  })\n.tie(console.log) // Reports transaction progress"
    ],
    "lineNumber": 280,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ReactivePromise.<TransactionStatus>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "TransactionRequest"
        ],
        "spread": false,
        "optional": false,
        "name": "tx",
        "description": "Transaction details"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ReactivePromise.<TransactionStatus>"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 240,
    "kind": "member",
    "name": "sign",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#sign",
    "access": "public",
    "description": "Returns a signature of given message",
    "examples": [
      "const { bonds } = require('oo7-parity')\n\nbonds\n.sign('0x2ea2e504d09c458dbadc703112125564d53ca03c27a5b28e7b3e2b5804289c45')\n.tie(console.log) // Reports signing progress"
    ],
    "lineNumber": 294,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ReactivePromise.<SignStatus>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Hash",
          "Bond"
        ],
        "spread": false,
        "optional": false,
        "name": "hash",
        "description": "Hash to sign"
      },
      {
        "nullable": true,
        "types": [
          "Address",
          "Bond"
        ],
        "spread": false,
        "optional": false,
        "name": "from",
        "description": "Optional account that should be used for signing."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ReactivePromise.<SignStatus>"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 241,
    "kind": "member",
    "name": "balance",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#balance",
    "access": "public",
    "description": "Returns balance of given address.",
    "examples": [
      "const { bonds } = require('oo7-parity')\n\nbonds\n.balance(bonds.me)\n.tie(console.log) // prints default account balance every time any of them changes"
    ],
    "lineNumber": 310,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Bond.<BigNumber>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "Bond.<Address>"
        ],
        "spread": false,
        "optional": false,
        "name": "address",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Bond.<BigNumber>"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 242,
    "kind": "member",
    "name": "code",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#code",
    "access": "public",
    "description": "Returns code of given address.",
    "examples": [
      "const { bonds } = require('oo7-parity')\n\nbonds\n.code(bonds.me)\n.tie(console.log) // prints default account code every time any of them changes"
    ],
    "lineNumber": 326,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Bond.<Bytes>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "Bond.<Address>"
        ],
        "spread": false,
        "optional": false,
        "name": "address",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Bond.<Bytes>"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 243,
    "kind": "member",
    "name": "nonce",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#nonce",
    "access": "public",
    "description": "Returns the nonce of given address.",
    "examples": [
      "const { bonds } = require('oo7-parity')\n\nbonds\n.nonce(bonds.me)\n.tie(console.log) // prints default account nonce every time any of them changes"
    ],
    "lineNumber": 342,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Bond.<BigNumber>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "Bond.<Address>"
        ],
        "spread": false,
        "optional": false,
        "name": "address",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Bond.<BigNumber>"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 244,
    "kind": "member",
    "name": "storageAt",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#storageAt",
    "access": "public",
    "description": "Returns storage at given index of an address.",
    "examples": [
      "const { bonds } = require('oo7-parity')\n\nbonds\n.storageAt(bonds.me, 0)\n.tie(console.log) // prints default account storage at position 0 every time any of them changes"
    ],
    "lineNumber": 359,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Bond.<BigNumber>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "Bond.<Address>"
        ],
        "spread": false,
        "optional": false,
        "name": "address",
        "description": "Contract address"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "number",
          "Bond.<H256>"
        ],
        "spread": false,
        "optional": false,
        "name": "storageIdx",
        "description": "Contract storage index"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Bond.<BigNumber>"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 245,
    "kind": "member",
    "name": "syncing",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#syncing",
    "access": "public",
    "description": "Returns node's syncing status.\nIf the node is fully synced this will return `false`.",
    "examples": [
      "const { bonds } = require('oo7-parity')\n\nbonds\n.syncing\n.tie(console.log) // prints sync status every time it changes"
    ],
    "lineNumber": 375,
    "type": {
      "nullable": null,
      "types": [
        "Bond.<bool>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 246,
    "kind": "member",
    "name": "authoring",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#authoring",
    "access": "public",
    "description": "Returns node's authoring status.\nIf the node is not authoring blocks this will return `false`.",
    "examples": [
      "const { bonds } = require('oo7-parity')\n\nbonds\n.authoring\n.tie(console.log) // prints authoring status every time it changes"
    ],
    "lineNumber": 390,
    "type": {
      "nullable": null,
      "types": [
        "Bond.<bool>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 247,
    "kind": "member",
    "name": "hashrate",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#hashrate",
    "access": "public",
    "description": "Reported hashrate.\nIf there is an external miner connected to the node it will return reported values.",
    "examples": [
      "const { bonds } = require('oo7-parity')\n\nbonds\n.hashrate\n.tie(console.log) // prints current average hashrate"
    ],
    "lineNumber": 405,
    "type": {
      "nullable": null,
      "types": [
        "Bond.<BigNumber>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 248,
    "kind": "member",
    "name": "ethProtocolVersion",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#ethProtocolVersion",
    "access": "public",
    "description": null,
    "lineNumber": 406,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 249,
    "kind": "member",
    "name": "gasPrice",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#gasPrice",
    "access": "public",
    "description": "Suggested gas price value. (Gas Price Oracle)\nThis returns a suggested gas price for next transaction. The estimation is based on statistics from last blocks.",
    "examples": [
      "const { bonds } = require('oo7-parity')\n\nbonds\n.gasPrice\n.tie(console.log) // prints current gas price suggestion"
    ],
    "lineNumber": 421,
    "type": {
      "nullable": null,
      "types": [
        "Bond.<BigNumber>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 250,
    "kind": "member",
    "name": "estimateGas",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#estimateGas",
    "access": "public",
    "description": "Estimates gas required to execute given transaction",
    "examples": [
      "const { bonds } = require('oo7-parity')\n\nbonds\n.estimateGas({ from: bonds.me, to: '0x00D6Cc1BA9cf89BD2e58009741f4F7325BAdc0ED' })\n.tie(console.log) // prints current gas estimate"
    ],
    "lineNumber": 436,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Bond.<BigNumber>} gas estimate"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "{ from: ?Address, to: ?Address, data: ?Bytes }"
        ],
        "spread": false,
        "optional": false,
        "name": "call",
        "description": "Transaction request"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Bond.<BigNumber>"
      ],
      "spread": false,
      "description": "gas estimate"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 251,
    "kind": "member",
    "name": "blockTransactionCount",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#blockTransactionCount",
    "access": "public",
    "description": "Returns block transaction count given block number or hash.",
    "examples": [
      "const { bonds } = require('oo7-parity')\n\nbonds\n.blockTransactionCount(bonds.blockNumber)\n.tie(console.log) // prints number of transactions in latest block"
    ],
    "lineNumber": 452,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Bond.<Number>} number of transactions in block"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "number",
          "Bond"
        ],
        "spread": false,
        "optional": false,
        "name": "block",
        "description": "block number or hash"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Bond.<Number>"
      ],
      "spread": false,
      "description": "number of transactions in block"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 252,
    "kind": "member",
    "name": "uncleCount",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#uncleCount",
    "access": "public",
    "description": "Returns uncle count given block number or hash.",
    "examples": [
      "const { bonds } = require('oo7-parity')\n\nbonds\n.uncleCount(bonds.blockNumber)\n.tie(console.log) // prints number of uncles in latest block"
    ],
    "lineNumber": 467,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Bond.<Number>} number of uncles in a block"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "number",
          "Bond"
        ],
        "spread": false,
        "optional": false,
        "name": "block",
        "description": "block number or hash"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Bond.<Number>"
      ],
      "spread": false,
      "description": "number of uncles in a block"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 253,
    "kind": "member",
    "name": "uncle",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#uncle",
    "access": "public",
    "description": "Returns uncle given block number or hash and uncle index",
    "examples": [
      "const { bonds } = require('oo7-parity')\n\nbonds\n.uncle(bonds.blockNumber, 0)\n.tie(console.log) // prints the first uncle in latest block"
    ],
    "lineNumber": 483,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Bond.<Header>} uncle header at that index"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "number",
          "Bond"
        ],
        "spread": false,
        "optional": false,
        "name": "block",
        "description": "block number or hash"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "number",
          "Bond"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "index of an uncle within a block"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Bond.<Header>"
      ],
      "spread": false,
      "description": "uncle header at that index"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 254,
    "kind": "member",
    "name": "transaction",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#transaction",
    "access": "public",
    "description": "Returns transaction given block number or hash and transaction index",
    "examples": [
      "const { bonds } = require('oo7-parity')\n\nbonds\n.transaction(bonds.blockNumber, 0)\n.tie(console.log) // prints the first uncle in latest block"
    ],
    "lineNumber": 499,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Bond.<Transaction>} transaction at that index"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "number",
          "Bond"
        ],
        "spread": false,
        "optional": false,
        "name": "block",
        "description": "block number or hash"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "number",
          "Bond"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "index of a transaction within a block"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Bond.<Transaction>"
      ],
      "spread": false,
      "description": "transaction at that index"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 255,
    "kind": "member",
    "name": "receipt",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#receipt",
    "access": "public",
    "description": "Returns receipt given transaction hash.",
    "examples": [
      "const { bonds } = require('oo7-parity')\n\nbonds\n.receipt(bonds.transaction(bonds.height, 0).map(x => x ? x.hash : undefined))\n.tie(console.log) // prints receipt of first transaction in latest block"
    ],
    "lineNumber": 514,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Bond.<TransactionReceipt>} transaction at that index"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "number",
          "Bond"
        ],
        "spread": false,
        "optional": false,
        "name": "hash",
        "description": "transaction hash"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Bond.<TransactionReceipt>"
      ],
      "spread": false,
      "description": "transaction at that index"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 256,
    "kind": "member",
    "name": "clientVersion",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#clientVersion",
    "access": "public",
    "description": "Returns client version string. (`web3_clientVersion`).",
    "examples": [
      "const { bonds } = require('oo7-parity')\n\nbonds\n.clientVersion\n.tie(console.log)"
    ],
    "lineNumber": 528,
    "type": {
      "nullable": null,
      "types": [
        "Bond.<String>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 257,
    "kind": "member",
    "name": "peerCount",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#peerCount",
    "access": "public",
    "description": "Returns current peer count. (`net_peerCount`).",
    "examples": [
      "const { bonds } = require('oo7-parity')\n\nbonds\n.peerCount\n.tie(console.log)"
    ],
    "lineNumber": 542,
    "type": {
      "nullable": null,
      "types": [
        "Bond.<Number>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 258,
    "kind": "member",
    "name": "listening",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#listening",
    "access": "public",
    "description": "Returns true if the node is actively listening for network connections.",
    "examples": [
      "const { bonds } = require('oo7-parity')\n\nbonds\n.listening\n.tie(console.log)"
    ],
    "lineNumber": 555,
    "type": {
      "nullable": null,
      "types": [
        "Bond.<bool>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 259,
    "kind": "member",
    "name": "chainId",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#chainId",
    "access": "public",
    "description": "Returns chain id (used for chain replay protection).\nNOTE: It's _not_ network id.",
    "examples": [
      "const { bonds } = require('oo7-parity')\n\nbonds\n.chainId\n.tie(console.log)"
    ],
    "lineNumber": 569,
    "type": {
      "nullable": null,
      "types": [
        "Bond.<Number>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 260,
    "kind": "member",
    "name": "hashContent",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#hashContent",
    "access": "public",
    "description": "Returns a hash of content under given URL.",
    "examples": [
      "const { bonds } = require('oo7-parity')\n\nbonds\n.hashContent('https://google.com')\n.tie(console.log)"
    ],
    "lineNumber": 584,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Bond.<string>} hash of the content"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "Bond"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "URL of the content"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Bond.<string>"
      ],
      "spread": false,
      "description": "hash of the content"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 261,
    "kind": "member",
    "name": "gasPriceHistogram",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#gasPriceHistogram",
    "access": "public",
    "description": null,
    "lineNumber": 585,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 262,
    "kind": "member",
    "name": "accountsInfo",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#accountsInfo",
    "access": "public",
    "description": null,
    "lineNumber": 586,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 263,
    "kind": "member",
    "name": "allAccontsInfo",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#allAccontsInfo",
    "access": "public",
    "description": null,
    "lineNumber": 587,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 264,
    "kind": "member",
    "name": "hardwareAccountsInfo",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#hardwareAccountsInfo",
    "access": "public",
    "description": null,
    "lineNumber": 588,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 265,
    "kind": "member",
    "name": "mode",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#mode",
    "access": "public",
    "description": null,
    "lineNumber": 589,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 266,
    "kind": "member",
    "name": "defaultExtraData",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#defaultExtraData",
    "access": "public",
    "description": null,
    "lineNumber": 591,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 267,
    "kind": "member",
    "name": "extraData",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#extraData",
    "access": "public",
    "description": null,
    "lineNumber": 592,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 268,
    "kind": "member",
    "name": "gasCeilTarget",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#gasCeilTarget",
    "access": "public",
    "description": null,
    "lineNumber": 593,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 269,
    "kind": "member",
    "name": "gasFloorTarget",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#gasFloorTarget",
    "access": "public",
    "description": null,
    "lineNumber": 594,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 270,
    "kind": "member",
    "name": "minGasPrice",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#minGasPrice",
    "access": "public",
    "description": null,
    "lineNumber": 595,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 271,
    "kind": "member",
    "name": "transactionsLimit",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#transactionsLimit",
    "access": "public",
    "description": null,
    "lineNumber": 596,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 272,
    "kind": "member",
    "name": "chainName",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#chainName",
    "access": "public",
    "description": "Returns a string name of currently connected chain.",
    "examples": [
      "const { bonds } = require('oo7-parity')\n\nbonds\n.chainName\n.tie(console.log)"
    ],
    "lineNumber": 608,
    "type": {
      "nullable": null,
      "types": [
        "Bond.<string>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 273,
    "kind": "member",
    "name": "chainStatus",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#chainStatus",
    "access": "public",
    "description": "Returns a status of currently connected chain.",
    "examples": [
      "const { bonds } = require('oo7-parity')\n\nbonds\n.chainStatus\n.tie(console.log)"
    ],
    "lineNumber": 620,
    "type": {
      "nullable": null,
      "types": [
        "Bond.<object>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 274,
    "kind": "member",
    "name": "peers",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#peers",
    "access": "public",
    "description": null,
    "lineNumber": 622,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 275,
    "kind": "member",
    "name": "enode",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#enode",
    "access": "public",
    "description": null,
    "lineNumber": 623,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 276,
    "kind": "member",
    "name": "nodePort",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#nodePort",
    "access": "public",
    "description": null,
    "lineNumber": 624,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 277,
    "kind": "member",
    "name": "nodeName",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#nodeName",
    "access": "public",
    "description": null,
    "lineNumber": 625,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 278,
    "kind": "member",
    "name": "signerPort",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#signerPort",
    "access": "public",
    "description": null,
    "lineNumber": 626,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 279,
    "kind": "member",
    "name": "dappsPort",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#dappsPort",
    "access": "public",
    "description": null,
    "lineNumber": 627,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 280,
    "kind": "member",
    "name": "dappsInterface",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#dappsInterface",
    "access": "public",
    "description": null,
    "lineNumber": 628,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 281,
    "kind": "member",
    "name": "nextNonce",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#nextNonce",
    "access": "public",
    "description": null,
    "lineNumber": 630,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 282,
    "kind": "member",
    "name": "pending",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#pending",
    "access": "public",
    "description": null,
    "lineNumber": 631,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 283,
    "kind": "member",
    "name": "local",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#local",
    "access": "public",
    "description": null,
    "lineNumber": 632,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 284,
    "kind": "member",
    "name": "future",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#future",
    "access": "public",
    "description": null,
    "lineNumber": 633,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 285,
    "kind": "member",
    "name": "pendingStats",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#pendingStats",
    "access": "public",
    "description": null,
    "lineNumber": 634,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 286,
    "kind": "member",
    "name": "unsignedCount",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#unsignedCount",
    "access": "public",
    "description": null,
    "lineNumber": 635,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 287,
    "kind": "member",
    "name": "releaseInfo",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#releaseInfo",
    "access": "public",
    "description": null,
    "lineNumber": 637,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 288,
    "kind": "member",
    "name": "versionInfo",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#versionInfo",
    "access": "public",
    "description": null,
    "lineNumber": 638,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 289,
    "kind": "member",
    "name": "consensusCapability",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#consensusCapability",
    "access": "public",
    "description": null,
    "lineNumber": 639,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 290,
    "kind": "member",
    "name": "upgradeReady",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#upgradeReady",
    "access": "public",
    "description": null,
    "lineNumber": 640,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 291,
    "kind": "member",
    "name": "replayTx",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#replayTx",
    "access": "public",
    "description": "Replays (re-executes) a transaction. Returns requested traces of execution.",
    "examples": [
      "const { bonds } = require('oo7-parity')\n\nbonds\n.replayTx('0x2ea2e504d09c458dbadc703112125564d53ca03c27a5b28e7b3e2b5804289c45', ['trace'])\n.tie(console.log)"
    ],
    "lineNumber": 655,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Bond.<object>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hash",
        "description": "Transaction hash"
      },
      {
        "nullable": null,
        "types": [
          "String[]"
        ],
        "spread": false,
        "optional": false,
        "name": "traces",
        "description": "Any subset of `trace`,`vmTrace`,`stateDiff`."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Bond.<object>"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 292,
    "kind": "member",
    "name": "callTx",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#callTx",
    "access": "public",
    "description": "Executs a transaction and collects traces.",
    "examples": [
      "const { bonds } = require('oo7-parity')\n\nbonds\n.callTx({\n\tfrom: bonds.me,\n\tto: bonds.registry.address\n}, ['trace'], 'latest')\n.tie(console.log)"
    ],
    "lineNumber": 673,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Bond.<object>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "TransactionRequest"
        ],
        "spread": false,
        "optional": false,
        "name": "transaction",
        "description": "Transaction request"
      },
      {
        "nullable": null,
        "types": [
          "String[]"
        ],
        "spread": false,
        "optional": false,
        "name": "traces",
        "description": "Any subset of `trace`,`vmTrace`,`stateDiff`."
      },
      {
        "nullable": null,
        "types": [
          "string",
          "number",
          "Bond"
        ],
        "spread": false,
        "optional": false,
        "name": "block",
        "description": "Block number or hash"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Bond.<object>"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 293,
    "kind": "member",
    "name": "deployContract",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#deployContract",
    "access": "public",
    "description": "Deploys a new contract",
    "examples": [
      "const { bonds } = require('oo7-parity')\n\nbonds\n.deployContract('0x1234', abi, {})\n.tie(console.log) // Reports deployment progress"
    ],
    "lineNumber": 689,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ReactivePromise.<DeployStatus>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "Bytes"
        ],
        "spread": false,
        "optional": false,
        "name": "init",
        "description": "Initialization bytecode"
      },
      {
        "nullable": null,
        "types": [
          "ABI"
        ],
        "spread": false,
        "optional": false,
        "name": "abi",
        "description": "Contract ABI"
      },
      {
        "nullable": null,
        "types": [
          "{from: ?Address, gas: ?BigNumber, gasPrice: ?BigNumber, nonce: ?BigNumber}"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Deployment options"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ReactivePromise.<DeployStatus>"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 294,
    "kind": "member",
    "name": "makeContract",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#makeContract",
    "access": "public",
    "description": "Creates bond-enabled contract object for existing contract.",
    "examples": [
      "const { bonds } = require('oo7-parity')\n\nbonds\n.makeContract(bonds.me, abi)\n.someMethod()\n.tie(console.log) // returns a result of someMethod call"
    ],
    "lineNumber": 705,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Contract}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "Bond"
        ],
        "spread": false,
        "optional": false,
        "name": "address",
        "description": "Contract address"
      },
      {
        "nullable": null,
        "types": [
          "ABI"
        ],
        "spread": false,
        "optional": false,
        "name": "abi",
        "description": "Contract ABI"
      },
      {
        "nullable": true,
        "types": [
          "ABI"
        ],
        "spread": false,
        "optional": false,
        "name": "extras",
        "description": "Additional methods not defined in the ABI."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Contract"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 295,
    "kind": "member",
    "name": "registry",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#registry",
    "access": "public",
    "description": "Parity registry contract instance.",
    "lineNumber": 711,
    "type": {
      "nullable": null,
      "types": [
        "Contract.<Registry>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 296,
    "kind": "member",
    "name": "githubhint",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#githubhint",
    "access": "public",
    "description": "Parity registry contract instance.",
    "lineNumber": 717,
    "type": {
      "nullable": null,
      "types": [
        "Contract.<GithubHint>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 297,
    "kind": "member",
    "name": "operations",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#operations",
    "access": "public",
    "description": "Parity registry contract instance.",
    "lineNumber": 722,
    "type": {
      "nullable": null,
      "types": [
        "Contract.<Operations>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 298,
    "kind": "member",
    "name": "badgereg",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#badgereg",
    "access": "public",
    "description": "Parity registry contract instance.",
    "lineNumber": 727,
    "type": {
      "nullable": null,
      "types": [
        "Contract.<BadgeReg>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 299,
    "kind": "member",
    "name": "tokenreg",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#tokenreg",
    "access": "public",
    "description": "Parity registry contract instance.",
    "lineNumber": 732,
    "type": {
      "nullable": null,
      "types": [
        "Contract.<TokenReg>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 300,
    "kind": "member",
    "name": "badges",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#badges",
    "access": "public",
    "description": "A {@link Bond} representing all currently registered badges from BadgeReg.",
    "lineNumber": 739,
    "type": {
      "nullable": null,
      "types": [
        "Bond.<{id:string,name:string,img:string,caption:string,badge:Contract}[]>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 301,
    "kind": "member",
    "name": "badgesOf",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#badgesOf",
    "access": "public",
    "description": "Returns a list of badges for given address.",
    "lineNumber": 746,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Bond.<Badge[]>} see {@link Bonds.badges}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Address"
        ],
        "spread": false,
        "optional": false,
        "name": "address",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Bond.<Badge[]>"
      ],
      "spread": false,
      "description": "see {@link Bonds.badges}"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 302,
    "kind": "member",
    "name": "tokens",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#tokens",
    "access": "public",
    "description": "A {@link Bond} representing all currently registered tokens from TokenReg.",
    "lineNumber": 753,
    "type": {
      "nullable": null,
      "types": [
        "Bond.<{id:string,tla:string,base:string,name:string,owner:address,img:string,caption:string}[]>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 303,
    "kind": "member",
    "name": "tokensOf",
    "memberof": "packages/oo7-parity/src/index.js~Bonds",
    "static": false,
    "longname": "packages/oo7-parity/src/index.js~Bonds#tokensOf",
    "access": "public",
    "description": "Returns a list of tokens with a non-empty balance for given address.",
    "lineNumber": 760,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Bond.<Token[]>} see {@link Bonds.tokens}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Address"
        ],
        "spread": false,
        "optional": false,
        "name": "address",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Bond.<Token[]>"
      ],
      "spread": false,
      "description": "see {@link Bonds.tokens}"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 304,
    "kind": "function",
    "name": "createBonds",
    "memberof": "packages/oo7-parity/src/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/oo7-parity/src/index.js~createBonds",
    "access": "public",
    "export": true,
    "importPath": "./packages/oo7-parity/src/index.js",
    "importStyle": "{createBonds}",
    "description": "",
    "lineNumber": 861,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Bonds}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "{api: ParityApi}"
        ],
        "spread": false,
        "optional": false,
        "name": "Options",
        "description": "object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Bonds"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 305,
    "kind": "function",
    "name": "isOwned",
    "memberof": "packages/oo7-parity/src/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/oo7-parity/src/index.js~isOwned",
    "access": "public",
    "export": true,
    "importPath": "./packages/oo7-parity/src/index.js",
    "importStyle": "{isOwned}",
    "description": null,
    "lineNumber": 1457,
    "undocument": true,
    "params": [
      {
        "name": "addr",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 306,
    "kind": "function",
    "name": "isNotOwned",
    "memberof": "packages/oo7-parity/src/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/oo7-parity/src/index.js~isNotOwned",
    "access": "public",
    "export": true,
    "importPath": "./packages/oo7-parity/src/index.js",
    "importStyle": "{isNotOwned}",
    "description": null,
    "lineNumber": 1458,
    "undocument": true,
    "params": [
      {
        "name": "addr",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 307,
    "kind": "file",
    "name": "packages/oo7-parity/src/utils/index.js",
    "content": "// (C) Copyright 2016-2017 Parity Technologies (UK) Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//         http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/* global parity */\nconst BigNumber = require('bignumber.js');\nconst oo7 = require('oo7');\nconst ParityApi = require('@parity/api');\n\nconst asciiToHex = ParityApi.util.asciiToHex;\nconst bytesToHex = ParityApi.util.bytesToHex;\nconst hexToAscii = ParityApi.util.hexToAscii;\nconst isAddressValid = h => oo7.Bond.instanceOf(h) ? h.map(ParityApi.util.isAddressValid) : ParityApi.util.isAddressValid(h);\nconst toChecksumAddress = h => oo7.Bond.instanceOf(h) ? h.map(ParityApi.util.toChecksumAddress) : ParityApi.util.toChecksumAddress(h);\nconst sha3 = h => oo7.Bond.instanceOf(h) ? h.map(ParityApi.util.sha3) : ParityApi.util.sha3(h);\n\nconst denominations = [ 'wei', 'Kwei', 'Mwei', 'Gwei', 'szabo', 'finney', 'ether', 'grand', 'Mether', 'Gether', 'Tether', 'Pether', 'Eether', 'Zether', 'Yether', 'Nether', 'Dether', 'Vether', 'Uether' ];\n\n// Parity Utilities\n// TODO: move to parity.js, repackage or repot.\n\n/**\n * Capitalizes the first letter of a string\n *\n * @param {string} s\n * @returns {string}\n */\nfunction capitalizeFirstLetter (s) {\n\treturn s.charAt(0).toUpperCase() + s.slice(1);\n}\n\n/**\n * Wrap `f` in a function that ensures it's called at most once.\n * The value returned from `f` is memoized and returned for all subsequent calls.\n *\n * @param {F} f\n * @returns {function(): F}\n */\nfunction singleton (f) {\n\tvar instance = null;\n\treturn function () {\n\t\tif (instance === null) { instance = f(); }\n\t\treturn instance;\n\t};\n}\n\n/**\n * Returns a {@link BigNumber} multiplier for give string denominator\n *\n * @param {string} denominator denominator (wei, eth, finney, Gwei, etc)\n * @returns {BigNumber} multiplier\n */\nfunction denominationMultiplier (s) {\n\tlet i = denominations.indexOf(s);\n\tif (i < 0) { throw new Error('Invalid denomination'); }\n\treturn (new BigNumber(1000)).pow(i);\n}\n\nfunction interpretRender (s, defaultDenom = 6) {\n\ttry {\n\t\tlet m = s.toLowerCase().match(/([0-9,]+)(\\.([0-9]*))? *([a-zA-Z]+)?/);\n\t\tlet di = m[4] ? denominations.indexOf(m[4]) : defaultDenom;\n\t\tif (di === -1) {\n\t\t\treturn null;\n\t\t}\n\t\tlet n = (m[1].replace(',', '').replace(/^0*/, '')) || '0';\n\t\tlet d = (m[3] || '').replace(/0*$/, '');\n\t\treturn { denom: di, units: n, decimals: d, origNum: m[1] + (m[2] || ''), origDenom: m[4] || '' };\n\t} catch (e) {\n\t\treturn null;\n\t}\n}\n\nfunction combineValue (v) {\n\tlet d = (new BigNumber(1000)).pow(v.denom);\n\tlet n = v.units;\n\tif (v.decimals) {\n\t\tn += v.decimals;\n\t\td = d.div((new BigNumber(10)).pow(v.decimals.length));\n\t}\n\treturn new BigNumber(n).mul(d);\n}\n\n/**\n * Add missing denominator to the value\n *\n * @param {BigNumber} v value\n * @param {string} d denominator\n * @returns {Value}\n */\nfunction defDenom (v, d) {\n\tif (v.denom === null) {\n\t\tv.denom = d;\n\t}\n\treturn v;\n}\n\n/**\n * Formats a value with denominator\n *\n * @param {Value} n value with denominator\n * @returns {string}\n */\nfunction formatValue (n) {\n\treturn `${formatValueNoDenom(n)} ${denominations[n.denom]}`;\n}\n\n/**\n * Format value without denominator\n * @param {Value} v\n * @returns {string}\n */\nfunction formatValueNoDenom (n) {\n\treturn `${n.units.toString().replace(/(\\d)(?=(\\d{3})+$)/g, '$1,')}${n.decimals ? '.' + n.decimals : ''}`;\n}\n\n/**\n * Format value without denominator\n *\n * @param {number|BigNumber} v\n * @param {number| exponent\n * @returns {string}\n */\nfunction formatToExponential (v, n = 4) {\n\treturn new BigNumber(v).toExponential(n);\n}\n\nfunction interpretQuantity (s) {\n\ttry {\n\t\tlet m = s.toLowerCase().match(/([0-9,]+)(\\.([0-9]*))? *([a-zA-Z]+)?/);\n\t\tlet d = denominationMultiplier(m[4] || 'ether');\n\t\tlet n = +m[1].replace(',', '');\n\t\tif (m[2]) {\n\t\t\tn += m[3];\n\t\t\tfor (let i = 0; i < m[3].length; ++i) {\n\t\t\t\td = d.div(10);\n\t\t\t}\n\t\t}\n\t\treturn new BigNumber(n).mul(d);\n\t} catch (e) {\n\t\treturn null;\n\t}\n}\n\n/**\n * Split value into base and denominator\n *\n * @param {number|BigNumber} a\n * @returns {Value}\n */\nfunction splitValue (a) {\n\tvar i = 0;\n\ta = new BigNumber('' + a);\n\tif (a.gte(new BigNumber('10000000000000000')) && a.lt(new BigNumber('100000000000000000000000'))) {\n\t\ti = 6;\n\t} else {\n\t\tfor (var aa = a; aa.gte(1000) && i < denominations.length - 1; aa = aa.div(1000)) { i++; }\n\t}\n\n\tfor (var j = 0; j < i; ++j) { a = a.div(1000); }\n\n\treturn {base: a, denom: i};\n}\n\n/**\n * Display balance into human-readable format with denomnator\n *\n * @param {string|BigNumber} balance\n * @returns {string}\n */\nfunction formatBalance (n) {\n\tlet a = splitValue(n);\n\t//\tlet b = Math.floor(a.base * 1000) / 1000;\n\treturn `${a.base} ${denominations[a.denom]}`;\n}\n\n/**\n * Format block number into human-readable representation.\n * @param {string|number|BigNumber} blockNumber\n * @returns {string}\n */\nfunction formatBlockNumber (n) {\n\treturn '#' + ('' + n).replace(/(\\d)(?=(\\d{3})+$)/g, '$1,');\n}\n\nfunction isNullData (a) {\n\treturn !a || typeof (a) !== 'string' || a.match(/^(0x)?0+$/) !== null;\n}\n\nfunction splitSignature (sig) {\n\tif ((sig.substr(2, 2) === '1b' || sig.substr(2, 2) === '1c') && (sig.substr(66, 2) !== '1b' && sig.substr(66, 2) !== '1c')) {\n\t\t// vrs\n\t\treturn [sig.substr(0, 4), `0x${sig.substr(4, 64)}`, `0x${sig.substr(68, 64)}`];\n\t} else {\n\t\t// rsv\n\t\treturn [`0x${sig.substr(130, 2)}`, `0x${sig.substr(2, 64)}`, `0x${sig.substr(66, 64)}`];\n\t}\n}\n\nfunction removeSigningPrefix (message) {\n\tif (!message.startsWith('\\x19Ethereum Signed Message:\\n')) {\n\t\tthrow new Error('Invalid message - doesn\\'t contain security prefix');\n\t}\n\tfor (var i = 1; i < 6; ++i) {\n\t\tif (message.length === 26 + i + +message.substr(26, i)) {\n\t\t\treturn message.substr(26 + i);\n\t\t}\n\t}\n\tthrow new Error('Invalid message - invalid security prefix');\n}\n\nfunction cleanup (value, type = 'bytes32', api = parity.api) {\n\t// TODO: make work with arbitrary depth arrays\n\tif (value instanceof Array && type.match(/bytes[0-9]+/)) {\n\t\t// figure out if it's an ASCII string hiding in there:\n\t\tvar ascii = '';\n\t\tfor (var i = 0, ended = false; i < value.length && ascii !== null; ++i) {\n\t\t\tif (value[i] === 0) {\n\t\t\t\tended = true;\n\t\t\t} else {\n\t\t\t\tascii += String.fromCharCode(value[i]);\n\t\t\t}\n\t\t\tif ((ended && value[i] !== 0) || (!ended && (value[i] < 32 || value[i] >= 128))) {\n\t\t\t\tascii = null;\n\t\t\t}\n\t\t}\n\t\tvalue = ascii === null ? '0x' + value.map(n => ('0' + n.toString(16)).slice(-2)).join('') : ascii;\n\t}\n\tif (type.substr(0, 4) === 'uint' && +type.substr(4) <= 48) {\n\t\tvalue = +value;\n\t}\n\treturn value;\n}\n\nmodule.exports = {\n\tasciiToHex,\n\tbytesToHex,\n\thexToAscii,\n\tisAddressValid,\n\ttoChecksumAddress,\n\tsha3,\n\tcapitalizeFirstLetter,\n\tsingleton,\n\tdenominations,\n\tdenominationMultiplier,\n\tinterpretRender,\n\tcombineValue,\n\tdefDenom,\n\tformatValue,\n\tformatValueNoDenom,\n\tformatToExponential,\n\tinterpretQuantity,\n\tsplitValue,\n\tformatBalance,\n\tformatBlockNumber,\n\tisNullData,\n\tsplitSignature,\n\tremoveSigningPrefix,\n\tcleanup\n};\n",
    "static": true,
    "longname": "/home/tomusdrw/workspace/oo7-new/packages/oo7-parity/src/utils/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 308,
    "kind": "variable",
    "name": "asciiToHex",
    "memberof": "packages/oo7-parity/src/utils/index.js",
    "static": true,
    "longname": "packages/oo7-parity/src/utils/index.js~asciiToHex",
    "access": "public",
    "export": true,
    "importPath": "./packages/oo7-parity/src/utils/index.js",
    "importStyle": "{asciiToHex}",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 309,
    "kind": "variable",
    "name": "bytesToHex",
    "memberof": "packages/oo7-parity/src/utils/index.js",
    "static": true,
    "longname": "packages/oo7-parity/src/utils/index.js~bytesToHex",
    "access": "public",
    "export": true,
    "importPath": "./packages/oo7-parity/src/utils/index.js",
    "importStyle": "{bytesToHex}",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 310,
    "kind": "variable",
    "name": "hexToAscii",
    "memberof": "packages/oo7-parity/src/utils/index.js",
    "static": true,
    "longname": "packages/oo7-parity/src/utils/index.js~hexToAscii",
    "access": "public",
    "export": true,
    "importPath": "./packages/oo7-parity/src/utils/index.js",
    "importStyle": "{hexToAscii}",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 311,
    "kind": "function",
    "name": "isAddressValid",
    "memberof": "packages/oo7-parity/src/utils/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/oo7-parity/src/utils/index.js~isAddressValid",
    "access": "public",
    "export": true,
    "importPath": "./packages/oo7-parity/src/utils/index.js",
    "importStyle": "{isAddressValid}",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "params": [
      {
        "name": "h",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 312,
    "kind": "function",
    "name": "toChecksumAddress",
    "memberof": "packages/oo7-parity/src/utils/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/oo7-parity/src/utils/index.js~toChecksumAddress",
    "access": "public",
    "export": true,
    "importPath": "./packages/oo7-parity/src/utils/index.js",
    "importStyle": "{toChecksumAddress}",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "params": [
      {
        "name": "h",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 313,
    "kind": "function",
    "name": "sha3",
    "memberof": "packages/oo7-parity/src/utils/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/oo7-parity/src/utils/index.js~sha3",
    "access": "public",
    "export": true,
    "importPath": "./packages/oo7-parity/src/utils/index.js",
    "importStyle": "{sha3}",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "params": [
      {
        "name": "h",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 314,
    "kind": "function",
    "name": "capitalizeFirstLetter",
    "memberof": "packages/oo7-parity/src/utils/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/oo7-parity/src/utils/index.js~capitalizeFirstLetter",
    "access": "public",
    "export": true,
    "importPath": "./packages/oo7-parity/src/utils/index.js",
    "importStyle": "{capitalizeFirstLetter}",
    "description": "Capitalizes the first letter of a string",
    "lineNumber": 38,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 315,
    "kind": "function",
    "name": "singleton",
    "memberof": "packages/oo7-parity/src/utils/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/oo7-parity/src/utils/index.js~singleton",
    "access": "public",
    "export": true,
    "importPath": "./packages/oo7-parity/src/utils/index.js",
    "importStyle": "{singleton}",
    "description": "Wrap `f` in a function that ensures it's called at most once.\nThe value returned from `f` is memoized and returned for all subsequent calls.",
    "lineNumber": 49,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{function(): F}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "F"
        ],
        "spread": false,
        "optional": false,
        "name": "f",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "function(): F"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 316,
    "kind": "variable",
    "name": "denominations",
    "memberof": "packages/oo7-parity/src/utils/index.js",
    "static": true,
    "longname": "packages/oo7-parity/src/utils/index.js~denominations",
    "access": "public",
    "export": true,
    "importPath": "./packages/oo7-parity/src/utils/index.js",
    "importStyle": "{denominations}",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    }
  },
  {
    "__docId__": 317,
    "kind": "function",
    "name": "denominationMultiplier",
    "memberof": "packages/oo7-parity/src/utils/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/oo7-parity/src/utils/index.js~denominationMultiplier",
    "access": "public",
    "export": true,
    "importPath": "./packages/oo7-parity/src/utils/index.js",
    "importStyle": "{denominationMultiplier}",
    "description": "Returns a {@link BigNumber} multiplier for give string denominator",
    "lineNumber": 63,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigNumber} multiplier"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "denominator",
        "description": "denominator (wei, eth, finney, Gwei, etc)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigNumber"
      ],
      "spread": false,
      "description": "multiplier"
    }
  },
  {
    "__docId__": 318,
    "kind": "function",
    "name": "interpretRender",
    "memberof": "packages/oo7-parity/src/utils/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/oo7-parity/src/utils/index.js~interpretRender",
    "access": "public",
    "export": true,
    "importPath": "./packages/oo7-parity/src/utils/index.js",
    "importStyle": "{interpretRender}",
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "params": [
      {
        "name": "s",
        "types": [
          "*"
        ]
      },
      {
        "name": "defaultDenom",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 6,
        "defaultValue": "6"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 319,
    "kind": "function",
    "name": "combineValue",
    "memberof": "packages/oo7-parity/src/utils/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/oo7-parity/src/utils/index.js~combineValue",
    "access": "public",
    "export": true,
    "importPath": "./packages/oo7-parity/src/utils/index.js",
    "importStyle": "{combineValue}",
    "description": null,
    "lineNumber": 84,
    "undocument": true,
    "params": [
      {
        "name": "v",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 320,
    "kind": "function",
    "name": "defDenom",
    "memberof": "packages/oo7-parity/src/utils/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/oo7-parity/src/utils/index.js~defDenom",
    "access": "public",
    "export": true,
    "importPath": "./packages/oo7-parity/src/utils/index.js",
    "importStyle": "{defDenom}",
    "description": "Add missing denominator to the value",
    "lineNumber": 101,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Value}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BigNumber"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "value"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "d",
        "description": "denominator"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Value"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 321,
    "kind": "function",
    "name": "formatValue",
    "memberof": "packages/oo7-parity/src/utils/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/oo7-parity/src/utils/index.js~formatValue",
    "access": "public",
    "export": true,
    "importPath": "./packages/oo7-parity/src/utils/index.js",
    "importStyle": "{formatValue}",
    "description": "Formats a value with denominator",
    "lineNumber": 114,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Value"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": "value with denominator"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 322,
    "kind": "function",
    "name": "formatValueNoDenom",
    "memberof": "packages/oo7-parity/src/utils/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/oo7-parity/src/utils/index.js~formatValueNoDenom",
    "access": "public",
    "export": true,
    "importPath": "./packages/oo7-parity/src/utils/index.js",
    "importStyle": "{formatValueNoDenom}",
    "description": "Format value without denominator",
    "lineNumber": 123,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Value"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 323,
    "kind": "function",
    "name": "formatToExponential",
    "memberof": "packages/oo7-parity/src/utils/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/oo7-parity/src/utils/index.js~formatToExponential",
    "access": "public",
    "export": true,
    "importPath": "./packages/oo7-parity/src/utils/index.js",
    "importStyle": "{formatToExponential}",
    "description": "Format value without denominator",
    "lineNumber": 134,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number",
          "BigNumber"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "{number|",
        "description": "exponent"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 324,
    "kind": "function",
    "name": "interpretQuantity",
    "memberof": "packages/oo7-parity/src/utils/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/oo7-parity/src/utils/index.js~interpretQuantity",
    "access": "public",
    "export": true,
    "importPath": "./packages/oo7-parity/src/utils/index.js",
    "importStyle": "{interpretQuantity}",
    "description": null,
    "lineNumber": 138,
    "undocument": true,
    "params": [
      {
        "name": "s",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 325,
    "kind": "function",
    "name": "splitValue",
    "memberof": "packages/oo7-parity/src/utils/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/oo7-parity/src/utils/index.js~splitValue",
    "access": "public",
    "export": true,
    "importPath": "./packages/oo7-parity/src/utils/index.js",
    "importStyle": "{splitValue}",
    "description": "Split value into base and denominator",
    "lineNumber": 161,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Value}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number",
          "BigNumber"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Value"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 326,
    "kind": "function",
    "name": "formatBalance",
    "memberof": "packages/oo7-parity/src/utils/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/oo7-parity/src/utils/index.js~formatBalance",
    "access": "public",
    "export": true,
    "importPath": "./packages/oo7-parity/src/utils/index.js",
    "importStyle": "{formatBalance}",
    "description": "Display balance into human-readable format with denomnator",
    "lineNumber": 181,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "BigNumber"
        ],
        "spread": false,
        "optional": false,
        "name": "balance",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 327,
    "kind": "function",
    "name": "formatBlockNumber",
    "memberof": "packages/oo7-parity/src/utils/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/oo7-parity/src/utils/index.js~formatBlockNumber",
    "access": "public",
    "export": true,
    "importPath": "./packages/oo7-parity/src/utils/index.js",
    "importStyle": "{formatBlockNumber}",
    "description": "Format block number into human-readable representation.",
    "lineNumber": 192,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "number",
          "BigNumber"
        ],
        "spread": false,
        "optional": false,
        "name": "blockNumber",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 328,
    "kind": "function",
    "name": "isNullData",
    "memberof": "packages/oo7-parity/src/utils/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/oo7-parity/src/utils/index.js~isNullData",
    "access": "public",
    "export": true,
    "importPath": "./packages/oo7-parity/src/utils/index.js",
    "importStyle": "{isNullData}",
    "description": null,
    "lineNumber": 196,
    "undocument": true,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 329,
    "kind": "function",
    "name": "splitSignature",
    "memberof": "packages/oo7-parity/src/utils/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/oo7-parity/src/utils/index.js~splitSignature",
    "access": "public",
    "export": true,
    "importPath": "./packages/oo7-parity/src/utils/index.js",
    "importStyle": "{splitSignature}",
    "description": null,
    "lineNumber": 200,
    "undocument": true,
    "params": [
      {
        "name": "sig",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 330,
    "kind": "function",
    "name": "removeSigningPrefix",
    "memberof": "packages/oo7-parity/src/utils/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/oo7-parity/src/utils/index.js~removeSigningPrefix",
    "access": "public",
    "export": true,
    "importPath": "./packages/oo7-parity/src/utils/index.js",
    "importStyle": "{removeSigningPrefix}",
    "description": null,
    "lineNumber": 210,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 331,
    "kind": "function",
    "name": "cleanup",
    "memberof": "packages/oo7-parity/src/utils/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/oo7-parity/src/utils/index.js~cleanup",
    "access": "public",
    "export": true,
    "importPath": "./packages/oo7-parity/src/utils/index.js",
    "importStyle": "{cleanup}",
    "description": null,
    "lineNumber": 222,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "type",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "bytes32",
        "defaultValue": "bytes32"
      },
      {
        "name": "api",
        "optional": true,
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "index",
    "content": "# oo7 Suite\n\n![Travis](https://img.shields.io/travis/tomusdrw/oo7.svg)\n\n\n![npm:oo7](https://img.shields.io/npm/v/oo7.svg)\n![npm:oo7-parity](https://img.shields.io/npm/v/oo7-parity.svg)\n![npm:oo7-react](https://img.shields.io/npm/v/oo7-react.svg)\n\n\nThe `oo7` suite consists of three independent packages:\n\n- [oo7](./packages/oo7/) - Reactive Bonds\n- [oo7-parity](./packages/oo7-parity) - Bonds bindings for Ethereum objects\n- [oo7-react](./packages/oo7-react) - React components to display Bonds\n\n# Documentation\n\n[Documentation](https://tomusdrw.github.io/oo7/class/packages/oo7-parity/src/index.js~Bonds.html#instance-member-accounts) to all three packages can be found [here](https://tomusdrw.github.io/oo7/)\n\n# Examples\n\n### oo7\n```js\n// npm i oo7\nimport {TimeBond} from 'oo7'\n\n\n// Initialize the bond\nconst bond = new TimeBond()\nbond\n    .map(t => new Date(t))\n    .tie(date => console.log(`${date}`))\n    // Wed Oct 11 2017 12:14:56 GMT+0200 (CEST)\n\n```\n\n### oo7-parity\n```js\n// npm i oo7-parity\nimport {Bonds, formatBalance} from 'oo7-parity'\n\nconst bonds = Bonds()\n\nbonds.balance(bonds.me)\n    .map(formatBalance)\n    .tie(console.log) // 4.45 ETH\n```\n\n### oo7-react\n```js\nimport ReactDOM from 'react-dom'\nimport React, { Component } from 'react'\n\n// Import reactive element\nimport {Rspan} from 'oo7-react'\nimport {Bonds, formatBalance} from 'oo7-parity'\n\nconst bonds = new Bonds()\n\nclass App extends Component {\n  render() {\n    // Simply render bonds\n    return (\n      <div>\n          <Rspan>\n            {bonds.me} has \n            {bonds.balance(bonds.me).map(formatBalance)}\n          </Rspan>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, document.querySelector('body'))\n```\n",
    "longname": "/home/tomusdrw/workspace/oo7-new/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n\t\"scripts\": {\n\t\t\"postinstall\": \"lerna bootstrap\",\n\t\t\"bootstrap\": \"lerna bootstrap\",\n\t\t\"publish\": \"lerna publish\",\n\t\t\"lint\": \"lerna run lint\",\n\t\t\"test\": \"lerna run test\",\n\t\t\"lerna\": \"lerna\",\n\t\t\"esdoc\": \"esdoc\"\n\t},\n\t\"devDependencies\": {\n\t\t\"lerna\": \"^2.9.1\",\n\t\t\"esdoc\": \"^1.0.4\",\n\t\t\"esdoc-node\": \"^1.0.3\",\n\t\t\"esdoc-standard-plugin\": \"^1.0.0\"\n\t}\n}\n",
    "longname": "/home/tomusdrw/workspace/oo7-new/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]