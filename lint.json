[
  {
    "name": "Bond#defaultTo",
    "filePath": "packages/oo7/src/bond.js",
    "lines": [
      {
        "lineNumber": 217,
        "line": "\t/**"
      },
      {
        "lineNumber": 218,
        "line": "\t * Alters this object so that it is always _ready_."
      },
      {
        "lineNumber": 219,
        "line": "\t *"
      },
      {
        "lineNumber": 220,
        "line": "\t * If this object is ever {@link Bond#reset}, then it will be changed to the"
      },
      {
        "lineNumber": 221,
        "line": "\t * value given."
      },
      {
        "lineNumber": 222,
        "line": "\t *"
      },
      {
        "lineNumber": 223,
        "line": "\t * @example"
      },
      {
        "lineNumber": 224,
        "line": "\t * let x = (new Bond).defaultTo(42);"
      },
      {
        "lineNumber": 225,
        "line": "\t * x.log();\t// 42"
      },
      {
        "lineNumber": 226,
        "line": "\t * x.changed(69);"
      },
      {
        "lineNumber": 227,
        "line": "\t * x.log();\t// 69"
      },
      {
        "lineNumber": 228,
        "line": "\t * x.reset();"
      },
      {
        "lineNumber": 229,
        "line": "\t * x.log() // 42"
      },
      {
        "lineNumber": 230,
        "line": "\t *"
      },
      {
        "lineNumber": 231,
        "line": "\t * @param {*} x - The value that this object represents if it would otherwise"
      },
      {
        "lineNumber": 232,
        "line": "\t * be _not ready_."
      },
      {
        "lineNumber": 233,
        "line": "\t * @returns {@link Bond} - This (mutated) object."
      },
      {
        "lineNumber": 234,
        "line": "\t */"
      },
      {
        "lineNumber": 235,
        "line": "\tdefaultTo (_defaultValue) {"
      }
    ],
    "codeParams": [
      "_defaultValue"
    ],
    "docParams": [
      "x"
    ]
  },
  {
    "name": "Bond#changed",
    "filePath": "packages/oo7/src/bond.js",
    "lines": [
      {
        "lineNumber": 260,
        "line": "\t/**"
      },
      {
        "lineNumber": 261,
        "line": "\t * Makes the object _ready_ and sets its current value."
      },
      {
        "lineNumber": 262,
        "line": "\t *"
      },
      {
        "lineNumber": 263,
        "line": "\t * Any functions that are registered for _notification_ (see {@link Bond#notify})"
      },
      {
        "lineNumber": 264,
        "line": "\t * or are _tied_ (see {@link Bond#tie}) will be called if this {@link Bond} is not"
      },
      {
        "lineNumber": 265,
        "line": "\t * currently _ready_ or is _ready_ but has a different value."
      },
      {
        "lineNumber": 266,
        "line": "\t *"
      },
      {
        "lineNumber": 267,
        "line": "\t * This function is a no-op if the JSON representations of `v` and of the"
      },
      {
        "lineNumber": 268,
        "line": "\t * current value, if any, are equal."
      },
      {
        "lineNumber": 269,
        "line": "\t *"
      },
      {
        "lineNumber": 270,
        "line": "\t * @param {*} v - The new value that this object should represent. If `undefined`"
      },
      {
        "lineNumber": 271,
        "line": "\t * then the function does nothing."
      },
      {
        "lineNumber": 272,
        "line": "\t */"
      },
      {
        "lineNumber": 273,
        "line": "\tchanged (newValue) {"
      }
    ],
    "codeParams": [
      "newValue"
    ],
    "docParams": [
      "v"
    ]
  },
  {
    "name": "Bond#trigger",
    "filePath": "packages/oo7/src/bond.js",
    "lines": [
      {
        "lineNumber": 285,
        "line": "\t/**"
      },
      {
        "lineNumber": 286,
        "line": "\t * Makes the object _ready_ and sets its current value."
      },
      {
        "lineNumber": 287,
        "line": "\t *"
      },
      {
        "lineNumber": 288,
        "line": "\t * Any functions that are registered for _notification_ (see {@link Bond#notify})"
      },
      {
        "lineNumber": 289,
        "line": "\t * or are _tied_ (see {@link Bond#tie}) will be called if this {@link Bond} is not"
      },
      {
        "lineNumber": 290,
        "line": "\t * currently _ready_ or is _ready_ but has a different value."
      },
      {
        "lineNumber": 291,
        "line": "\t *"
      },
      {
        "lineNumber": 292,
        "line": "\t * Unlike {@link Bond#changed}, this function doesn't check equivalence"
      },
      {
        "lineNumber": 293,
        "line": "\t * between the new value and the current value."
      },
      {
        "lineNumber": 294,
        "line": "\t *"
      },
      {
        "lineNumber": 295,
        "line": "\t * @param {*} v - The new value that this object should represent. By default,"
      },
      {
        "lineNumber": 296,
        "line": "\t * it will reissue the current value. It is an error to call it without"
      },
      {
        "lineNumber": 297,
        "line": "\t * an argument if it is not _ready_."
      },
      {
        "lineNumber": 298,
        "line": "\t */"
      },
      {
        "lineNumber": 299,
        "line": "\ttrigger (newValue = this._value) {"
      }
    ],
    "codeParams": [
      "newValue"
    ],
    "docParams": [
      "v"
    ]
  },
  {
    "name": "Bond#notify",
    "filePath": "packages/oo7/src/bond.js",
    "lines": [
      {
        "lineNumber": 417,
        "line": "\t/**"
      },
      {
        "lineNumber": 418,
        "line": "\t * Register a function to be called when the value or the _readiness_"
      },
      {
        "lineNumber": 419,
        "line": "\t * changes."
      },
      {
        "lineNumber": 420,
        "line": "\t *"
      },
      {
        "lineNumber": 421,
        "line": "\t * Calling this function already implies calling {@link Bond#use} - there"
      },
      {
        "lineNumber": 422,
        "line": "\t * is no need to call both."
      },
      {
        "lineNumber": 423,
        "line": "\t *"
      },
      {
        "lineNumber": 424,
        "line": "\t * Use this only when you need to be notified should the object be reset to"
      },
      {
        "lineNumber": 425,
        "line": "\t * a not _ready_ state. In general you will want to use {@link Bond#tie}"
      },
      {
        "lineNumber": 426,
        "line": "\t * instead."
      },
      {
        "lineNumber": 427,
        "line": "\t *"
      },
      {
        "lineNumber": 428,
        "line": "\t * @param {Bond~notifyCallback} f - The function to be called. Takes no parameters."
      },
      {
        "lineNumber": 429,
        "line": "\t * @returns {Symbol} An identifier for this registration. Must be provided"
      },
      {
        "lineNumber": 430,
        "line": "\t * to {@link Bond#unnotify} when the function no longer needs to be called."
      },
      {
        "lineNumber": 431,
        "line": "\t */"
      },
      {
        "lineNumber": 432,
        "line": "\tnotify (callback) {"
      }
    ],
    "codeParams": [
      "callback"
    ],
    "docParams": [
      "f"
    ]
  },
  {
    "name": "Bond#tie",
    "filePath": "packages/oo7/src/bond.js",
    "lines": [
      {
        "lineNumber": 463,
        "line": "\t/**"
      },
      {
        "lineNumber": 464,
        "line": "\t * Register a function to be called when the value changes."
      },
      {
        "lineNumber": 465,
        "line": "\t *"
      },
      {
        "lineNumber": 466,
        "line": "\t * Calling this function already implies calling {@link Bond#use} - there"
      },
      {
        "lineNumber": 467,
        "line": "\t * is no need to call both."
      },
      {
        "lineNumber": 468,
        "line": "\t *"
      },
      {
        "lineNumber": 469,
        "line": "\t * Unlike {@link Bond#notify}, this does not get"
      },
      {
        "lineNumber": 470,
        "line": "\t * called should the object become reset into being not _ready_."
      },
      {
        "lineNumber": 471,
        "line": "\t *"
      },
      {
        "lineNumber": 472,
        "line": "\t * @param {Bond~tieCallback} f - The function to be called."
      },
      {
        "lineNumber": 473,
        "line": "\t * @returns {Symbol} - An identifier for this registration. Must be provided"
      },
      {
        "lineNumber": 474,
        "line": "\t * to {@link Bond#untie} when the function no longer needs to be called."
      },
      {
        "lineNumber": 475,
        "line": "\t */"
      },
      {
        "lineNumber": 476,
        "line": "\ttie (callback) {"
      }
    ],
    "codeParams": [
      "callback"
    ],
    "docParams": [
      "f"
    ]
  },
  {
    "name": "Bond#latched",
    "filePath": "packages/oo7/src/bond.js",
    "lines": [
      {
        "lineNumber": 508,
        "line": "\t/**"
      },
      {
        "lineNumber": 509,
        "line": "\t * Provide a derivative {@link Bond} which represents the same as this object"
      },
      {
        "lineNumber": 510,
        "line": "\t * except that before it is ready it evaluates to a given default value and"
      },
      {
        "lineNumber": 511,
        "line": "\t * after it becomes ready for the first time it stays fixed to that value"
      },
      {
        "lineNumber": 512,
        "line": "\t * indefinitely."
      },
      {
        "lineNumber": 513,
        "line": "\t *"
      },
      {
        "lineNumber": 514,
        "line": "\t * @param {Symbol} defaultValue - The value that the new bond should take when"
      },
      {
        "lineNumber": 515,
        "line": "\t * this bond is not ready."
      },
      {
        "lineNumber": 516,
        "line": "\t * @returns {@link Bond} - Object representing the value returned by"
      },
      {
        "lineNumber": 517,
        "line": "\t * this {@link Bond} except that it evaluates to the given default value when"
      },
      {
        "lineNumber": 518,
        "line": "\t * this bond is not ready and sticks to the first value that made it ready."
      },
      {
        "lineNumber": 519,
        "line": "\t */"
      },
      {
        "lineNumber": 520,
        "line": "\tlatched (defaultValue = undefined, mayBeNull = undefined, cache = null) {"
      }
    ],
    "codeParams": [
      "defaultValue",
      "mayBeNull",
      "cache"
    ],
    "docParams": [
      "defaultValue"
    ]
  },
  {
    "name": "Bond#then",
    "filePath": "packages/oo7/src/bond.js",
    "lines": [
      {
        "lineNumber": 592,
        "line": "\t/**"
      },
      {
        "lineNumber": 593,
        "line": "\t * Register a function to be called when this object becomes _ready_."
      },
      {
        "lineNumber": 594,
        "line": "\t *"
      },
      {
        "lineNumber": 595,
        "line": "\t * For an object to be considered _ready_, it must represent a definite"
      },
      {
        "lineNumber": 596,
        "line": "\t * value. In this case, {@link Bond#isReady} will return `true`."
      },
      {
        "lineNumber": 597,
        "line": "\t *"
      },
      {
        "lineNumber": 598,
        "line": "\t * If the object is already _ready_, then `f` will be called immediately. If"
      },
      {
        "lineNumber": 599,
        "line": "\t * not, `f` will be deferred until the object assumes a value. `f` will be"
      },
      {
        "lineNumber": 600,
        "line": "\t * called at most once."
      },
      {
        "lineNumber": 601,
        "line": "\t *"
      },
      {
        "lineNumber": 602,
        "line": "\t * @param {Bond~thenCallback} f The callback to be made once the object is ready."
      },
      {
        "lineNumber": 603,
        "line": "\t *"
      },
      {
        "lineNumber": 604,
        "line": "\t * @example"
      },
      {
        "lineNumber": 605,
        "line": "\t * let x = new Bond;"
      },
      {
        "lineNumber": 606,
        "line": "\t * x.then(console.log);"
      },
      {
        "lineNumber": 607,
        "line": "\t * x.changed(42); // 42 is written to the console."
      },
      {
        "lineNumber": 608,
        "line": "\t */"
      },
      {
        "lineNumber": 609,
        "line": "\tthen (callback) {"
      }
    ],
    "codeParams": [
      "callback"
    ],
    "docParams": [
      "f"
    ]
  },
  {
    "name": "Bond#done",
    "filePath": "packages/oo7/src/bond.js",
    "lines": [
      {
        "lineNumber": 620,
        "line": "\t/**"
      },
      {
        "lineNumber": 621,
        "line": "\t * Register a function to be called when this object becomes _done_."
      },
      {
        "lineNumber": 622,
        "line": "\t *"
      },
      {
        "lineNumber": 623,
        "line": "\t * For an object to be considered `done`, it must be _ready_ and the"
      },
      {
        "lineNumber": 624,
        "line": "\t * function {@link Bond#isDone} should exist and return `true`."
      },
      {
        "lineNumber": 625,
        "line": "\t *"
      },
      {
        "lineNumber": 626,
        "line": "\t * If the object is already _done_, then `f` will be called immediately. If"
      },
      {
        "lineNumber": 627,
        "line": "\t * not, `f` will be deferred until the object assumes a value. `f` will be"
      },
      {
        "lineNumber": 628,
        "line": "\t * called at most once."
      },
      {
        "lineNumber": 629,
        "line": "\t *"
      },
      {
        "lineNumber": 630,
        "line": "\t * @param {Bond~thenCallback} f The callback to be made once the object is ready."
      },
      {
        "lineNumber": 631,
        "line": "\t *"
      },
      {
        "lineNumber": 632,
        "line": "\t * @example"
      },
      {
        "lineNumber": 633,
        "line": "\t * let x = new Bond;"
      },
      {
        "lineNumber": 634,
        "line": "\t * x.then(console.log);"
      },
      {
        "lineNumber": 635,
        "line": "\t * x.changed(42); // 42 is written to the console."
      },
      {
        "lineNumber": 636,
        "line": "\t */"
      },
      {
        "lineNumber": 637,
        "line": "\tdone (callback) {"
      }
    ],
    "codeParams": [
      "callback"
    ],
    "docParams": [
      "f"
    ]
  },
  {
    "name": "Bond#mapEach",
    "filePath": "packages/oo7/src/bond.js",
    "lines": [
      {
        "lineNumber": 737,
        "line": "\t/**"
      },
      {
        "lineNumber": 738,
        "line": "\t * Create a new {@link Bond} which represents this object's array value with"
      },
      {
        "lineNumber": 739,
        "line": "\t * its elements transformed by a function."
      },
      {
        "lineNumber": 740,
        "line": "\t *"
      },
      {
        "lineNumber": 741,
        "line": "\t * @example"
      },
      {
        "lineNumber": 742,
        "line": "\t * let b = new Bond;"
      },
      {
        "lineNumber": 743,
        "line": "\t * let t = b.mapEach(_ => _ * 2);"
      },
      {
        "lineNumber": 744,
        "line": "\t * t.tie(console.log);"
      },
      {
        "lineNumber": 745,
        "line": "\t * b.changed([1, 2, 3]); // logs [2, 4, 6]"
      },
      {
        "lineNumber": 746,
        "line": "\t * b.changed([21]); // logs [42]"
      },
      {
        "lineNumber": 747,
        "line": "\t *"
      },
      {
        "lineNumber": 748,
        "line": "\t * @param {function} transform - The transformation to apply to each element."
      },
      {
        "lineNumber": 749,
        "line": "\t * @returns The new {@link Bond} object representing the element-wise"
      },
      {
        "lineNumber": 750,
        "line": "\t * Transformation."
      },
      {
        "lineNumber": 751,
        "line": "\t */"
      },
      {
        "lineNumber": 752,
        "line": "\tmapEach (transform, cache = undefined, latched = false, mayBeNull = true) {"
      }
    ],
    "codeParams": [
      "transform",
      "cache",
      "latched",
      "mayBeNull"
    ],
    "docParams": [
      "transform"
    ]
  },
  {
    "name": "Bond#sub",
    "filePath": "packages/oo7/src/bond.js",
    "lines": [
      {
        "lineNumber": 756,
        "line": "\t/**"
      },
      {
        "lineNumber": 757,
        "line": "\t * Create a new {@link Bond} which represents this object's value when"
      },
      {
        "lineNumber": 758,
        "line": "\t * subscripted."
      },
      {
        "lineNumber": 759,
        "line": "\t *"
      },
      {
        "lineNumber": 760,
        "line": "\t * @example"
      },
      {
        "lineNumber": 761,
        "line": "\t * let b = new Bond;"
      },
      {
        "lineNumber": 762,
        "line": "\t * let t = b.sub('foo');"
      },
      {
        "lineNumber": 763,
        "line": "\t * t.tie(console.log);"
      },
      {
        "lineNumber": 764,
        "line": "\t * b.changed({foo: 42}); // logs 42"
      },
      {
        "lineNumber": 765,
        "line": "\t * b.changed({foo: 69}); // logs 69"
      },
      {
        "lineNumber": 766,
        "line": "\t *"
      },
      {
        "lineNumber": 767,
        "line": "\t * @example"
      },
      {
        "lineNumber": 768,
        "line": "\t * let b = new Bond;"
      },
      {
        "lineNumber": 769,
        "line": "\t * let c = new Bond;"
      },
      {
        "lineNumber": 770,
        "line": "\t * let t = b.sub(c);"
      },
      {
        "lineNumber": 771,
        "line": "\t * t.tie(console.log);"
      },
      {
        "lineNumber": 772,
        "line": "\t * b.changed([42, 4, 2]);"
      },
      {
        "lineNumber": 773,
        "line": "\t * c.changed(0); // logs 42"
      },
      {
        "lineNumber": 774,
        "line": "\t * c.changed(1); // logs 4"
      },
      {
        "lineNumber": 775,
        "line": "\t * b.changed([68, 69, 70]); // logs 69"
      },
      {
        "lineNumber": 776,
        "line": "\t *"
      },
      {
        "lineNumber": 777,
        "line": "\t * @param {string|number} name - The field or index by which to subscript this object's"
      },
      {
        "lineNumber": 778,
        "line": "\t * represented value. May itself be a {@link Bond}, in which case, the"
      },
      {
        "lineNumber": 779,
        "line": "\t * resolved value is used."
      },
      {
        "lineNumber": 780,
        "line": "\t * @param {number} outResolveDepth - The depth in any returned structure"
      },
      {
        "lineNumber": 781,
        "line": "\t * that a {@link Bond} may be for it to be resolved."
      },
      {
        "lineNumber": 782,
        "line": "\t * @returns {@link Bond} - The object representing the value which is the"
      },
      {
        "lineNumber": 783,
        "line": "\t * value represented by this object subscripted by the value represented by"
      },
      {
        "lineNumber": 784,
        "line": "\t * `name`."
      },
      {
        "lineNumber": 785,
        "line": "\t */"
      },
      {
        "lineNumber": 786,
        "line": "\tsub (name, outResolveDepth = 3, cache = undefined, latched = false, mayBeNull = true) {"
      }
    ],
    "codeParams": [
      "name",
      "outResolveDepth",
      "cache",
      "latched",
      "mayBeNull"
    ],
    "docParams": [
      "name",
      "outResolveDepth"
    ]
  },
  {
    "name": "Bond.all",
    "filePath": "packages/oo7/src/bond.js",
    "lines": [
      {
        "lineNumber": 798,
        "line": "\t/**"
      },
      {
        "lineNumber": 799,
        "line": "\t * Create a new {@link Bond} which represents the array of many objects'"
      },
      {
        "lineNumber": 800,
        "line": "\t * representative values."
      },
      {
        "lineNumber": 801,
        "line": "\t *"
      },
      {
        "lineNumber": 802,
        "line": "\t * This object will be _ready_ if and only if all objects in `list` are"
      },
      {
        "lineNumber": 803,
        "line": "\t * themselves _ready_."
      },
      {
        "lineNumber": 804,
        "line": "\t *"
      },
      {
        "lineNumber": 805,
        "line": "\t * @example"
      },
      {
        "lineNumber": 806,
        "line": "\t * let b = new Bond;"
      },
      {
        "lineNumber": 807,
        "line": "\t * let c = new Bond;"
      },
      {
        "lineNumber": 808,
        "line": "\t * let t = Bond.all([b, c]);"
      },
      {
        "lineNumber": 809,
        "line": "\t * t.tie(console.log);"
      },
      {
        "lineNumber": 810,
        "line": "\t * b.changed(42);"
      },
      {
        "lineNumber": 811,
        "line": "\t * c.changed(69); // logs [42, 69]"
      },
      {
        "lineNumber": 812,
        "line": "\t * b.changed(3); // logs [3, 69]"
      },
      {
        "lineNumber": 813,
        "line": "\t *"
      },
      {
        "lineNumber": 814,
        "line": "\t * @example"
      },
      {
        "lineNumber": 815,
        "line": "\t * let b = new Bond;"
      },
      {
        "lineNumber": 816,
        "line": "\t * let c = new Bond;"
      },
      {
        "lineNumber": 817,
        "line": "\t * let t = Bond.all(['a', {b, c}, 'd'], 2);"
      },
      {
        "lineNumber": 818,
        "line": "\t * t.tie(console.log);"
      },
      {
        "lineNumber": 819,
        "line": "\t * b.changed(42);"
      },
      {
        "lineNumber": 820,
        "line": "\t * c.changed(69); // logs ['a', {b: 42, c: 69}, 'd']"
      },
      {
        "lineNumber": 821,
        "line": "\t * b.changed(null); // logs ['a', {b: null, c: 69}, 'd']"
      },
      {
        "lineNumber": 822,
        "line": "\t *"
      },
      {
        "lineNumber": 823,
        "line": "\t * @param {array} list - An array of {@link Bond} objects, plain values or"
      },
      {
        "lineNumber": 824,
        "line": "\t * structures (arrays/objects) which contain either of these."
      },
      {
        "lineNumber": 825,
        "line": "\t * @param {number} resolveDepth - The depth in a structure (array or object)"
      },
      {
        "lineNumber": 826,
        "line": "\t * that a {@link Bond} may be in any of `list`'s items for it to be resolved."
      },
      {
        "lineNumber": 827,
        "line": "\t * @returns {@link Bond} - The object representing the value of the array of"
      },
      {
        "lineNumber": 828,
        "line": "\t * each object's representative value in `list`."
      },
      {
        "lineNumber": 829,
        "line": "\t */"
      },
      {
        "lineNumber": 830,
        "line": "\tstatic all (list, resolveDepth = 3, cache = undefined, latched = false, mayBeNull = true) {"
      }
    ],
    "codeParams": [
      "list",
      "resolveDepth",
      "cache",
      "latched",
      "mayBeNull"
    ],
    "docParams": [
      "list",
      "resolveDepth"
    ]
  },
  {
    "name": "Bond.mapAll",
    "filePath": "packages/oo7/src/bond.js",
    "lines": [
      {
        "lineNumber": 835,
        "line": "\t/**"
      },
      {
        "lineNumber": 836,
        "line": "\t * Create a new {@link Bond} which represents a functional transformation of"
      },
      {
        "lineNumber": 837,
        "line": "\t * many objects' representative values."
      },
      {
        "lineNumber": 838,
        "line": "\t *"
      },
      {
        "lineNumber": 839,
        "line": "\t * @example"
      },
      {
        "lineNumber": 840,
        "line": "\t * let b = new Bond;"
      },
      {
        "lineNumber": 841,
        "line": "\t * b.changed(23);"
      },
      {
        "lineNumber": 842,
        "line": "\t * let c = new Bond;"
      },
      {
        "lineNumber": 843,
        "line": "\t * c.changed(3);"
      },
      {
        "lineNumber": 844,
        "line": "\t * let multiply = (x, y) => x * y;"
      },
      {
        "lineNumber": 845,
        "line": "\t * // These two are exactly equivalent:"
      },
      {
        "lineNumber": 846,
        "line": "\t * let bc = Bond.all([b, c]).map(([b, c]) => multiply(b, c));"
      },
      {
        "lineNumber": 847,
        "line": "\t * let bc2 = Bond.mapAll([b, c], multiply);"
      },
      {
        "lineNumber": 848,
        "line": "\t *"
      },
      {
        "lineNumber": 849,
        "line": "\t * @param {array} list - An array of {@link Bond} objects or plain values."
      },
      {
        "lineNumber": 850,
        "line": "\t * @param {function} f - A function which accepts as many parameters are there"
      },
      {
        "lineNumber": 851,
        "line": "\t * values in `list` and transforms it into a {@link Bond}, {@link Promise}"
      },
      {
        "lineNumber": 852,
        "line": "\t * or other value."
      },
      {
        "lineNumber": 853,
        "line": "\t * @param {number} resolveDepth - The depth in a structure (array or object)"
      },
      {
        "lineNumber": 854,
        "line": "\t * that a {@link Bond} may be in any of `list`'s items for it to be resolved."
      },
      {
        "lineNumber": 855,
        "line": "\t * @param {number} outResolveDepth - The depth in any returned structure"
      },
      {
        "lineNumber": 856,
        "line": "\t * that a {@link Bond} may be for it to be resolved."
      },
      {
        "lineNumber": 857,
        "line": "\t */"
      },
      {
        "lineNumber": 858,
        "line": "\tstatic mapAll (list, transform, outResolveDepth = 3, resolveDepth = 3, cache = undefined, latched = false, mayBeNull = true) {"
      }
    ],
    "codeParams": [
      "list",
      "transform",
      "outResolveDepth",
      "resolveDepth",
      "cache",
      "latched",
      "mayBeNull"
    ],
    "docParams": [
      "list",
      "f",
      "resolveDepth",
      "outResolveDepth"
    ]
  },
  {
    "name": "Bond#reduce",
    "filePath": "packages/oo7/src/bond.js",
    "lines": [
      {
        "lineNumber": 868,
        "line": "\t/**"
      },
      {
        "lineNumber": 869,
        "line": "\t * Lazily transforms the contents of this object's value when it is an array."
      },
      {
        "lineNumber": 870,
        "line": "\t *"
      },
      {
        "lineNumber": 871,
        "line": "\t * This operates on a {@link Bond} which should represent an array. It"
      },
      {
        "lineNumber": 872,
        "line": "\t * transforms this into a value based on a number of elements at the"
      },
      {
        "lineNumber": 873,
        "line": "\t * beginning of that array using a recursive _reduce_ algorithm."
      },
      {
        "lineNumber": 874,
        "line": "\t *"
      },
      {
        "lineNumber": 875,
        "line": "\t * The reduce algorithm works around an accumulator model. It begins with"
      },
      {
        "lineNumber": 876,
        "line": "\t * the `init` value, and incremenetally accumulates"
      },
      {
        "lineNumber": 877,
        "line": "\t * elements from the array by changing its value to one returned from the"
      },
      {
        "lineNumber": 878,
        "line": "\t * `accum` function, when passed the current accumulator and the next value"
      },
      {
        "lineNumber": 879,
        "line": "\t * from the array. The `accum` function may return a {@link Bond}, in which case it"
      },
      {
        "lineNumber": 880,
        "line": "\t * will be resolved (using {@link Bond#then}) and that value used."
      },
      {
        "lineNumber": 881,
        "line": "\t *"
      },
      {
        "lineNumber": 882,
        "line": "\t * The `accum` function returns a value (or a {@link Bond} which resolves to a value)"
      },
      {
        "lineNumber": 883,
        "line": "\t * of an array with exactly two elements; the first is the new value for the"
      },
      {
        "lineNumber": 884,
        "line": "\t * accumulator. The second is a boolean _early exit_ flag."
      },
      {
        "lineNumber": 885,
        "line": "\t *"
      },
      {
        "lineNumber": 886,
        "line": "\t * Accumulation will continue until either there are no more elements in the"
      },
      {
        "lineNumber": 887,
        "line": "\t * array to be processed, or until the _early exit_ flag is true, which ever"
      },
      {
        "lineNumber": 888,
        "line": "\t * happens first."
      },
      {
        "lineNumber": 889,
        "line": "\t *"
      },
      {
        "lineNumber": 890,
        "line": "\t * @param {function} accum - The reduce's accumulator function."
      },
      {
        "lineNumber": 891,
        "line": "\t * @param {*} init - The initialisation value for the reduce algorithm."
      },
      {
        "lineNumber": 892,
        "line": "\t * @returns {Bond} - A {@link Bond} representing `init` when the input array is empty,"
      },
      {
        "lineNumber": 893,
        "line": "\t * otherwise the reduction of that array."
      },
      {
        "lineNumber": 894,
        "line": "\t */"
      },
      {
        "lineNumber": 895,
        "line": "\treduce (accum, init, cache = undefined, latched = false, mayBeNull = true) {"
      }
    ],
    "codeParams": [
      "accum",
      "init",
      "cache",
      "latched",
      "mayBeNull"
    ],
    "docParams": [
      "accum",
      "init"
    ]
  },
  {
    "name": "createBonds",
    "filePath": "packages/oo7-parity/src/index.js",
    "lines": [
      {
        "lineNumber": 856,
        "line": "/**"
      },
      {
        "lineNumber": 857,
        "line": " * @param {{api: ParityApi}} Options object"
      },
      {
        "lineNumber": 858,
        "line": " * @returns {Bonds}"
      },
      {
        "lineNumber": 859,
        "line": " */"
      },
      {
        "lineNumber": 860,
        "line": "function createBonds (options) {"
      }
    ],
    "codeParams": [
      "options"
    ],
    "docParams": [
      "Options"
    ]
  },
  {
    "name": "denominationMultiplier",
    "filePath": "packages/oo7-parity/src/utils/index.js",
    "lines": [
      {
        "lineNumber": 56,
        "line": "/**"
      },
      {
        "lineNumber": 57,
        "line": " * Returns a {@link BigNumber} multiplier for give string denominator"
      },
      {
        "lineNumber": 58,
        "line": " *"
      },
      {
        "lineNumber": 59,
        "line": " * @param {string} denominator denominator (wei, eth, finney, Gwei, etc)"
      },
      {
        "lineNumber": 60,
        "line": " * @returns {BigNumber} multiplier"
      },
      {
        "lineNumber": 61,
        "line": " */"
      },
      {
        "lineNumber": 62,
        "line": "function denominationMultiplier (s) {"
      }
    ],
    "codeParams": [
      "s"
    ],
    "docParams": [
      "denominator"
    ]
  },
  {
    "name": "formatValueNoDenom",
    "filePath": "packages/oo7-parity/src/utils/index.js",
    "lines": [
      {
        "lineNumber": 117,
        "line": "/**"
      },
      {
        "lineNumber": 118,
        "line": " * Format value without denominator"
      },
      {
        "lineNumber": 119,
        "line": " * @param {Value} v"
      },
      {
        "lineNumber": 120,
        "line": " * @returns {string}"
      },
      {
        "lineNumber": 121,
        "line": " */"
      },
      {
        "lineNumber": 122,
        "line": "function formatValueNoDenom (n) {"
      }
    ],
    "codeParams": [
      "n"
    ],
    "docParams": [
      "v"
    ]
  },
  {
    "name": "formatToExponential",
    "filePath": "packages/oo7-parity/src/utils/index.js",
    "lines": [
      {
        "lineNumber": 126,
        "line": "/**"
      },
      {
        "lineNumber": 127,
        "line": " * Format value without denominator"
      },
      {
        "lineNumber": 128,
        "line": " *"
      },
      {
        "lineNumber": 129,
        "line": " * @param {number|BigNumber} v"
      },
      {
        "lineNumber": 130,
        "line": " * @param {number| exponent"
      },
      {
        "lineNumber": 131,
        "line": " * @returns {string}"
      },
      {
        "lineNumber": 132,
        "line": " */"
      },
      {
        "lineNumber": 133,
        "line": "function formatToExponential (v, n = 4) {"
      }
    ],
    "codeParams": [
      "v",
      "n"
    ],
    "docParams": [
      "v",
      "{number|"
    ]
  },
  {
    "name": "formatBalance",
    "filePath": "packages/oo7-parity/src/utils/index.js",
    "lines": [
      {
        "lineNumber": 174,
        "line": "/**"
      },
      {
        "lineNumber": 175,
        "line": " * Display balance into human-readable format with denomnator"
      },
      {
        "lineNumber": 176,
        "line": " *"
      },
      {
        "lineNumber": 177,
        "line": " * @param {string|BigNumber} balance"
      },
      {
        "lineNumber": 178,
        "line": " * @returns {string}"
      },
      {
        "lineNumber": 179,
        "line": " */"
      },
      {
        "lineNumber": 180,
        "line": "function formatBalance (n) {"
      }
    ],
    "codeParams": [
      "n"
    ],
    "docParams": [
      "balance"
    ]
  },
  {
    "name": "formatBlockNumber",
    "filePath": "packages/oo7-parity/src/utils/index.js",
    "lines": [
      {
        "lineNumber": 186,
        "line": "/**"
      },
      {
        "lineNumber": 187,
        "line": " * Format block number into human-readable representation."
      },
      {
        "lineNumber": 188,
        "line": " * @param {string|number|BigNumber} blockNumber"
      },
      {
        "lineNumber": 189,
        "line": " * @returns {string}"
      },
      {
        "lineNumber": 190,
        "line": " */"
      },
      {
        "lineNumber": 191,
        "line": "function formatBlockNumber (n) {"
      }
    ],
    "codeParams": [
      "n"
    ],
    "docParams": [
      "blockNumber"
    ]
  }
]